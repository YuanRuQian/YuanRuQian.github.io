<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-24T02:30:08.073Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode Longest Substring Without Repeating Characters</title>
    <link href="http://yoursite.com/2020/04/24/LeetCode-Longest-Substring-Without-Repeating-Characters/"/>
    <id>http://yoursite.com/2020/04/24/LeetCode-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2020-04-24T01:42:33.000Z</published>
    <updated>2020-04-24T02:30:08.073Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3. </span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length&lt;<span class="number">2</span>) <span class="keyword">return</span> s.length;</span><br><span class="line">    <span class="keyword">let</span> cur = [s[<span class="number">0</span>]];</span><br><span class="line">    <span class="comment">// track the current longest string</span></span><br><span class="line">    <span class="keyword">let</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxStr = [];</span><br><span class="line">    <span class="keyword">let</span> post = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> curStr = [];</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>;i&lt;s.length;i++ )&#123;</span><br><span class="line">    curStr = s[i];</span><br><span class="line">    post = maxStr.indexOf(curStr);</span><br><span class="line">    <span class="keyword">if</span>(post &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">// if the element already exists</span></span><br><span class="line">        maxStr = maxStr.substring(post + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// cut off the last one substring </span></span><br><span class="line">    &#125;</span><br><span class="line">    maxStr += curStr;</span><br><span class="line">    maxLen = <span class="built_in">Math</span>.max(maxLen, maxStr.length);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a string, find the length of the &lt;strong&gt;longest substring&lt;/strong&gt; without repeating characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examp
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 103. Binary Tree Zigzag Level Order Traversal</title>
    <link href="http://yoursite.com/2020/04/23/LeetCode-103-Binary-Tree-Zigzag-Level-Order-Traversal/"/>
    <id>http://yoursite.com/2020/04/23/LeetCode-103-Binary-Tree-Zigzag-Level-Order-Traversal/</id>
    <published>2020-04-23T06:11:51.000Z</published>
    <updated>2020-04-23T06:14:20.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, return the <em>zigzag level order</em> traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).</p><p>For example: Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its zigzag level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> zigzagLevelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">        <span class="keyword">let</span> res=[];</span><br><span class="line">        <span class="keyword">let</span> zigzag = <span class="function"><span class="keyword">function</span>(<span class="params">node,level=<span class="number">0</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(!res[level]) &#123;</span><br><span class="line">                res.push([node.val]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res[level].push(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            zigzag(node.left,level+<span class="number">1</span>);</span><br><span class="line">            zigzag(node.right,level+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        zigzag(root);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;res.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>===<span class="number">1</span>) &#123;</span><br><span class="line">                res[i]=res[i].reverse();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">      </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the &lt;em&gt;zigzag level order&lt;/em&gt; traversal of its nodes&#39; values. (ie, from left to right, then ri
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>看别人的面经准备：字节前端实习一二面面经</title>
    <link href="http://yoursite.com/2020/04/23/%E7%9C%8B%E5%88%AB%E4%BA%BA%E7%9A%84%E9%9D%A2%E7%BB%8F%E5%87%86%E5%A4%87%EF%BC%9A%E5%AD%97%E8%8A%82%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%B8%80%E4%BA%8C%E9%9D%A2%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2020/04/23/%E7%9C%8B%E5%88%AB%E4%BA%BA%E7%9A%84%E9%9D%A2%E7%BB%8F%E5%87%86%E5%A4%87%EF%BC%9A%E5%AD%97%E8%8A%82%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%B8%80%E4%BA%8C%E9%9D%A2%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-04-23T02:22:20.000Z</published>
    <updated>2020-04-24T01:30:59.131Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来源：<a href="https://www.nowcoder.com/discuss/414825" target="_blank" rel="noopener">字节前端实习一二面面经</a></p></blockquote><p>作者：桑桑的百香果 链接：https://www.nowcoder.com/discuss/414825 来源：牛客网</p><h3 id="一面">一面：</h3><ol type="1"><li><p>自我介绍</p></li><li><p>js基本数据类型（漏了布尔）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">值类型(基本类型)：字符串（<span class="built_in">String</span>）、数字(<span class="built_in">Number</span>)、布尔(<span class="built_in">Boolean</span>)、对空（Null）、未定义（Undefined）、<span class="built_in">Symbol</span> 、 BigInt 。</span><br><span class="line"></span><br><span class="line">引用数据类型：对象(<span class="built_in">Object</span>)、数组(<span class="built_in">Array</span>)、函数(<span class="built_in">Function</span>)。</span><br><span class="line"></span><br><span class="line">动态类型 : <span class="keyword">var</span> ；</span><br><span class="line"></span><br><span class="line">注：<span class="built_in">Symbol</span> 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</span><br></pre></td></tr></table></figure></li><li><p>出了三道题 都是考this指针的，然而我忘了题目是什么（但目测是对了）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In web browsers, the window object is also the global object:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">37</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 37</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.b = <span class="string">"MDN"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b)  <span class="comment">// "MDN"</span></span><br><span class="line"><span class="built_in">console</span>.log(b)         <span class="comment">// "MDN"</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In a browser:</span></span><br><span class="line">f1() === <span class="built_in">window</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In Node:</span></span><br><span class="line">f1() === global; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>; <span class="comment">// see strict mode</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2() === <span class="literal">undefined</span>; <span class="comment">// true</span></span><br><span class="line"><span class="comment">// In the second example, this should be undefined, because f2 was called directly and not as a method or property of an object (e.g. window.f2()). This feature wasn't implemented in some browsers when they first started to support strict mode. As a result, they incorrectly returned the window object.</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The first parameter is the object to use as</span></span><br><span class="line"><span class="comment">// 'this', subsequent parameters are passed as </span></span><br><span class="line"><span class="comment">// arguments in the function call</span></span><br><span class="line">add.call(o, <span class="number">5</span>, <span class="number">7</span>); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The first parameter is the object to use as</span></span><br><span class="line"><span class="comment">// 'this', the second is an array whose</span></span><br><span class="line"><span class="comment">// members are used as the arguments in the function call</span></span><br><span class="line">add.apply(o, [<span class="number">10</span>, <span class="number">20</span>]); <span class="comment">// 34</span></span><br></pre></td></tr></table></figure></li><li><p>var变量提升（get）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//In JavaScript, a variable can be declared after it has been used.</span></span><br><span class="line"><span class="comment">//In other words; a variable can be used before it has been declared.</span></span><br><span class="line"><span class="comment">// 'HOISTING'</span></span><br><span class="line">x = <span class="number">5</span>; <span class="comment">// Assign 5 to x</span></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>); <span class="comment">// Find an element</span></span><br><span class="line">elem.innerHTML = x;                     <span class="comment">// Display x in the element</span></span><br><span class="line"><span class="keyword">var</span> x; <span class="comment">// Declare x</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x; <span class="comment">// Declare x</span></span><br><span class="line">x = <span class="number">5</span>; <span class="comment">// Assign 5 to x</span></span><br><span class="line"></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>); <span class="comment">// Find an element</span></span><br><span class="line">elem.innerHTML = x;                     <span class="comment">// Display x in the element</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// To understand this, you have to understand the term "hoisting".</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Variables and constants declared with let or const are not hoisted!</span></span><br></pre></td></tr></table></figure></li><li><p>tcp三次握手（get）</p></li><li><p>tcp四次挥手（get）</p></li><li><p>http状态码（说不完整，她还问我服务器错误是啥）</p></li><li><p>http304的过程（get）</p></li><li><p>强缓存和协商缓存（get）</p></li><li><p>promise（get）</p></li><li><p>出了个算法：深度遍历树（大部分是对的，但是时间比较长，我算法是真的垃圾）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>https和http区别（get）</p></li><li><p>https通信过程（get）</p></li><li><p>对称加密和不对称加密的区别（get）</p></li><li><p>为什么一开始用不对称，后面用对称（母鸡）</p></li><li><p>浏览器是单进程的吗（我只知道js是单线程的。。） 不是</p></li><li><p>那浏览器还有哪些进程 不知道</p></li><li><p>xss攻击（get）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似 SQL 注入</span></span><br><span class="line"><span class="comment">// html 里面嵌入 JS</span></span><br></pre></td></tr></table></figure></li><li><p>怎么防御（只说了检查用户的输入）</p></li><li><p>css怎么垂直居中（行内和定宽说了，不知道不定宽。。之前看的都是水平居中。。）</p></li><li><p>position有哪几种取值，分别是怎么用的（get）</p></li><li><p>怎么控制可以强缓存（get） 不知道这题是不是这样问的，反正就是cache-control的设值</p></li><li><p>跨域（get）</p></li><li><p>cors如果我想请求时带上cookie咋搞(母鸡) 我说 记得有一个header可以设置，然后可以带上，然后就不知道了</p></li><li><p>tco和udp的区别</p></li><li><p>为什么说tcp比udp安全？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>还有的，想不起来了</p></li></ol><p>二面</p><ol type="1"><li>项目</li><li>手写js继承（做出来了，写的是组合继承） 问我组合继承的缺点。。忘记了（一切的一切从这里凉起）</li><li>手写bind函数（要用闭包写）（不会） 面试官真的疯狂提示我，然后我还是不会，凉凉</li><li>算法：翻转数组，不可以用reverse，要在原数组上修改（做出来了）</li><li>算法：合并区间（大概做出来了，思路没问题）</li><li>知道promise吗？为什么promise是微任务 ？ 我当然知道promise，但你问我为什么promise是微任务。。我母鸡啊</li><li>flex了解吗，flex：1什么意思</li><li>为什么一开始用不对称，后面用对称（重复了问题，但我连着面的，尼玛，没有时间去看答案）</li><li>怎么学的前端，学了多久，看了哪些书</li><li>进程和线程的联系和区别</li><li>线程间的通信</li><li>进程间的通信</li><li>死锁的原因和怎么解决<br /></li><li>啥是闭包</li><li>还有的，然而我忘记了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://www.nowcoder.com/discuss/414825&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;字节前端实习一二面面经&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作
      
    
    </summary>
    
    
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>牛客网OJ:JS刷题血泪史记录</title>
    <link href="http://yoursite.com/2020/04/22/%E7%89%9B%E5%AE%A2%E7%BD%91OJ-JS%E5%88%B7%E9%A2%98%E8%A1%80%E6%B3%AA%E5%8F%B2%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/04/22/%E7%89%9B%E5%AE%A2%E7%BD%91OJ-JS%E5%88%B7%E9%A2%98%E8%A1%80%E6%B3%AA%E5%8F%B2%E8%AE%B0%E5%BD%95/</id>
    <published>2020-04-22T03:55:36.000Z</published>
    <updated>2020-04-22T06:11:26.635Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景：微信挂了iOS和UI开发的提前批电面，马上开始OJ笔试，鹅厂是牛客的OJ。所以开始熟悉OJ的刷题形式，和LeetCode好不一样，需要时间适应。</p><p>要求是 JS V8</p></blockquote><h2 id="题目描述">1.题目描述</h2><p>计算a+b</p><h2 id="输入描述">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包括两个正整数a,b(1 &lt;&#x3D; a, b &lt;&#x3D; 10^9),输入数据包括多组。</span><br></pre></td></tr></table></figure><h2 id="输出描述">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出a+b的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line=readline())&#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);  </span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">parseInt</span>(lines[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">const</span> b = <span class="built_in">parseInt</span>(lines[<span class="number">1</span>]);</span><br><span class="line">    print(a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// node 读取 ： readline() 一次一行</span></span><br></pre></td></tr></table></figure><h2 id="题目描述-1">2.题目描述</h2><p>计算a+b</p><h2 id="输入描述-1">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入第一行包括一个数据组数t(1 &lt;&#x3D; t &lt;&#x3D; 100)</span><br><span class="line">接下来每行包括两个正整数a,b(1 &lt;&#x3D; a, b &lt;&#x3D; 10^9)</span><br></pre></td></tr></table></figure><h2 id="输出描述-1">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出a+b的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = readline();</span><br><span class="line"><span class="keyword">while</span>(line=readline())&#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);  </span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">parseInt</span>(lines[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">const</span> b = <span class="built_in">parseInt</span>(lines[<span class="number">1</span>]);</span><br><span class="line">    print(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-2">3.题目描述</h2><p>计算a+b</p><h2 id="输入描述-2">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包括两个正整数a,b(1 &lt;&#x3D; a, b &lt;&#x3D; 10^9),输入数据有多组, 如果输入为0 0则结束输入</span><br></pre></td></tr></table></figure><h2 id="输出描述-2">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出a+b的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line = readline()) &#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">if</span>( lines[<span class="number">0</span>]===<span class="string">'0'</span> &amp;&amp; lines[<span class="number">0</span>]===lines[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="built_in">parseInt</span>(lines[<span class="number">0</span>])+<span class="built_in">parseInt</span>(lines[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-3">4.题目描述</h2><p>计算一系列数的和</p><h2 id="输入描述-3">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入数据包括多组。</span><br><span class="line">每组数据一行,每行的第一个整数为整数的个数n(1 &lt;&#x3D; n &lt;&#x3D; 100), n为0的时候结束输入。</span><br><span class="line">接下来n个正整数,即需要求和的每个正整数。</span><br></pre></td></tr></table></figure><h2 id="输出描述-3">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>(line=readline()) &#123;</span><br><span class="line">    <span class="keyword">if</span>(line===<span class="string">'0'</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=lines[<span class="number">0</span>];i++) &#123;</span><br><span class="line">        sum+=<span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-4">5.题目描述</h2><p>计算一系列数的和</p><h2 id="输入描述-4">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入的第一行包括一个正整数t(1 &lt;&#x3D; t &lt;&#x3D; 100), 表示数据组数。</span><br><span class="line">接下来t行, 每行一组数据。</span><br><span class="line">每行的第一个整数为整数的个数n(1 &lt;&#x3D; n &lt;&#x3D; 100)。</span><br><span class="line">接下来n个正整数, 即需要求和的每个正整数。</span><br></pre></td></tr></table></figure><h2 id="输出描述-4">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> len = <span class="built_in">parseInt</span>(readline());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> line = readline();</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">const</span> t = lines[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;=t;j++) &#123;</span><br><span class="line">        sum+=<span class="built_in">parseInt</span>(lines[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-5">6.题目描述</h2><p>计算一系列数的和</p><h2 id="输入描述-5">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入数据有多组, 每行表示一组输入数据。</span><br><span class="line">每行的第一个整数为整数的个数n(1 &lt;&#x3D; n &lt;&#x3D; 100)。</span><br><span class="line">接下来n个正整数, 即需要求和的每个正整数。</span><br></pre></td></tr></table></figure><h2 id="输出描述-5">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line = readline()) &#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">const</span> len = lines[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=len;i++) &#123;</span><br><span class="line">        sum+=<span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-6">7.题目描述</h2><p>计算一系列数的和</p><h2 id="输入描述-6">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入数据有多组, 每行表示一组输入数据。</span><br><span class="line"></span><br><span class="line">每行不定有n个整数，空格隔开。(1 &lt;&#x3D; n &lt;&#x3D; 100)。</span><br></pre></td></tr></table></figure><h2 id="输出描述-6">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line=readline())&#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lines.length;i++) &#123;</span><br><span class="line">        sum+=<span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-7">8.题目描述</h2><p>对输入的字符串进行排序后输出</p><h2 id="输入描述-7">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入有两行，第一行n</span><br><span class="line"></span><br><span class="line">第二行是n个空格隔开的字符串</span><br></pre></td></tr></table></figure><h2 id="输出描述-7">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一行排序后的字符串，空格隔开，无结尾空格</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> len = <span class="built_in">parseInt</span>(readline())<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line"><span class="keyword">let</span> line = readline();</span><br><span class="line"><span class="keyword">let</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">while</span>(len&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">   res.push(lines[len]);</span><br><span class="line">   len=len<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = res.sort();</span><br><span class="line">print(res.join(<span class="string">' '</span>));</span><br></pre></td></tr></table></figure><h2 id="题目描述-8">9.题目描述</h2><p>对输入的字符串进行排序后输出</p><h2 id="输入描述-8">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多个测试用例，每个测试用例一行。</span><br><span class="line"></span><br><span class="line">每行通过空格隔开，有n个字符，n＜100</span><br></pre></td></tr></table></figure><h2 id="输出描述-8">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组测试用例，输出一行排序过的字符串，每个字符串通过空格隔开</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line = readline())&#123;</span><br><span class="line">    <span class="keyword">let</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lines.length;i++) &#123;</span><br><span class="line">        res.push(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res.sort();</span><br><span class="line">    print(res.join(<span class="string">' '</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-9">10.题目描述</h2><p>对输入的字符串进行排序后输出</p><h2 id="输入描述-9">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多个测试用例，每个测试用例一行。</span><br><span class="line">每行通过,隔开，有n个字符，n＜100</span><br></pre></td></tr></table></figure><h2 id="输出描述-9">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组用例输出一行排序后的字符串，用&#39;,&#39;隔开，无结尾空格</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line = readline())&#123;</span><br><span class="line">    <span class="keyword">let</span> lines = line.split(<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lines.length;i++) &#123;</span><br><span class="line">        res.push(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res.sort();</span><br><span class="line">    print(res.join(<span class="string">','</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-10">11.题目描述</h2><p>每年前几场在线笔试编程题的时候，总有同学询问为什么我本地测试通过，自测也通过，提交代码系统却返回通过率0。</p><p>这不是系统的错，可能是因为</p><p>1.你对题目理解错了，你的代码只过了样例或你自己的数据</p><p>2.你的代码逻辑有问题，你的代码只过了样例或你自己的数据</p><p>总之就是你的代码只是过了样例和自测数据，后台的测试数据你根本不可见，要多自己思考。</p><p>这个题目如果你提交后通过率为0，又觉得自己代码是正确的，可以在提交列表查看向宇同桌通过的代码</p><p>谨记：</p><p>当你笔试的时候怀疑系统或者题目数据有问题的时候请务必先怀疑自己的代码!</p><p>当你笔试的时候怀疑系统或者题目数据有问题的时候请务必先怀疑自己的代码!</p><p>请帮忙把这个练习专题发给你的朋友同学吧，感谢感谢</p><h2 id="输入描述-10">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入有多组测试用例，每组空格隔开两个整数</span><br></pre></td></tr></table></figure><h2 id="输出描述-10">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组数据输出一行两个整数的和</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line=readline())&#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    print(<span class="built_in">parseInt</span>(lines[<span class="number">0</span>])+<span class="built_in">parseInt</span>(lines[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;背景：微信挂了iOS和UI开发的提前批电面，马上开始OJ笔试，鹅厂是牛客的OJ。所以开始熟悉OJ的刷题形式，和LeetCode好不一样，需要时间适应。&lt;/p&gt;
&lt;p&gt;要求是 JS V8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;
      
    
    </summary>
    
    
    
      <category term="OJ" scheme="http://yoursite.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 437. Path Sum III</title>
    <link href="http://yoursite.com/2020/04/21/LeetCode-437-Path-Sum-III/"/>
    <id>http://yoursite.com/2020/04/21/LeetCode-437-Path-Sum-III/</id>
    <published>2020-04-21T09:50:43.000Z</published>
    <updated>2020-04-21T10:51:21.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are given a binary tree in which each node contains an integer value.</p><p>Find the number of paths that sum to a given value.</p><p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p><p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root &#x3D; [10,5,-3,3,2,null,11,3,-2,null,1], sum &#x3D; 8</span><br><span class="line"></span><br><span class="line">      10</span><br><span class="line">     &#x2F;  \</span><br><span class="line">    5   -3</span><br><span class="line">   &#x2F; \    \</span><br><span class="line">  3   2   11</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">3  -2   1</span><br><span class="line"></span><br><span class="line">Return 3. The paths that sum to 8 are:</span><br><span class="line"></span><br><span class="line">1.  5 -&gt; 3</span><br><span class="line">2.  5 -&gt; 2 -&gt; 1</span><br><span class="line">3. -3 -&gt; 11</span><br></pre></td></tr></table></figure></blockquote><p>Good old DFS recursive to tackle tree problem :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">sum</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">let</span> getSum = <span class="function"><span class="keyword">function</span>(<span class="params">node,sum</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ((sum===node.val) ? <span class="number">1</span>:<span class="number">0</span>) + getSum(node.right,sum-node.val) + getSum(node.left,sum-node.val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getSum(root,sum)+pathSum(root.right,sum)+pathSum(root.left,sum);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You are given a binary tree in which each node contains an integer value.&lt;/p&gt;
&lt;p&gt;Find the number of paths that sum to a give
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 198. House Robber</title>
    <link href="http://yoursite.com/2020/04/21/LeetCode-198-House-Robber/"/>
    <id>http://yoursite.com/2020/04/21/LeetCode-198-House-Robber/</id>
    <published>2020-04-21T01:28:53.000Z</published>
    <updated>2020-04-21T07:49:23.231Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 1) and then rob house 3 (money &#x3D; 3).</span><br><span class="line">             Total amount you can rob &#x3D; 1 + 3 &#x3D; 4.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 2), rob house 3 (money &#x3D; 9) and rob house 5 (money &#x3D; 1).</span><br><span class="line">             Total amount you can rob &#x3D; 2 + 9 + 1 &#x3D; 12.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Intuitive recursive method yet stack overflow TAT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> Robbed = <span class="function"><span class="keyword">function</span>(<span class="params">nums,i</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(nums.length&lt;<span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Math</span>.max(Robbed(nums,i<span class="number">-2</span>),Robbed(nums,i<span class="number">-1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> Robbed(nums,nums.length<span class="number">-1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">p, n</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> [p[<span class="number">1</span>], <span class="built_in">Math</span>.max(p[<span class="number">0</span>] + n, p[<span class="number">1</span>])]; </span><br><span class="line">    &#125;, [<span class="number">0</span>,<span class="number">0</span>])[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// variable p records previous 2 max values: p[1] is the previous one and p[0] is the one before previous one. p is initialized as [0,0]. variable n is the value at each position.</span></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback( accumulator, currentValue[, index[, array]] )[, initialValue])</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plain old good iterative method</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums.length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> maxAtTwoBefore = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> maxAtOneBefore = <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> maxAtCurrent = <span class="built_in">Math</span>.max(nums[i] + maxAtTwoBefore, maxAtOneBefore);</span><br><span class="line">        maxAtTwoBefore = maxAtOneBefore;</span><br><span class="line">        maxAtOneBefore = maxAtCurrent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxAtOneBefore;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// variable p records previous 2 max values: p[1] is the previous one and p[0] is the one before previous one. p is initialized as [0,0]. variable n is the value at each position.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the o
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 155. Min Stack</title>
    <link href="http://yoursite.com/2020/04/20/LeetCode-155-Min-Stack/"/>
    <id>http://yoursite.com/2020/04/20/LeetCode-155-Min-Stack/</id>
    <published>2020-04-20T02:58:18.000Z</published>
    <updated>2020-04-20T03:48:02.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p><ul><li>push(x) -- Push element x onto stack.</li><li>pop() -- Removes the element on top of the stack.</li><li>top() -- Get the top element.</li><li>getMin() -- Retrieve the minimum element in the stack.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MinStack minStack &#x3D; new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin(); &#x2F;&#x2F; return -3</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();    &#x2F;&#x2F; return 0</span><br><span class="line">minStack.getMin(); &#x2F;&#x2F; return -2</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MinStack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elements = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elements.push(&#123;</span><br><span class="line">    value: x,</span><br><span class="line">    min: <span class="keyword">this</span>.elements.length === <span class="number">0</span> ? x : <span class="built_in">Math</span>.min(x, <span class="keyword">this</span>.getMin()),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elements.pop();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.elements[<span class="keyword">this</span>.elements.length - <span class="number">1</span>].value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.getMin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.elements[<span class="keyword">this</span>.elements.length - <span class="number">1</span>].min;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MinStack()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.top()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.getMin()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>It's clever to put min &amp; value in a stack element together because if you only keep min as an stack property , when you pop it out the min remains the same.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) -- Pu
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 122. Best Time to Buy and Sell Stock II</title>
    <link href="http://yoursite.com/2020/04/20/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II/"/>
    <id>http://yoursite.com/2020/04/20/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II/</id>
    <published>2020-04-20T02:45:13.000Z</published>
    <updated>2020-04-20T02:54:11.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Say you have an array <code>prices</code> for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p><p><strong>Note:</strong> You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 3 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">             Then buy on day 4 (price &#x3D; 3) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-3 &#x3D; 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are</span><br><span class="line">             engaging multiple transactions at the same time. You must sell before buying again.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 10 ^ 4</code></li><li><code>0 &lt;= prices[i] &lt;= 10 ^ 4</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> profit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;prices.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">            profit += <span class="built_in">Math</span>.max(prices[i+<span class="number">1</span>]-prices[i],<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>No question is a joke. This question is indeed the interview question I encountered interviewing with Goldman Sachs. Interview questions from financial organization my be a lot simpler to solve. But it requires higher level of clarity when it comes to explaining your thought. And most importantly, arrogance is the first thing you want to avoid during interview. Don't murder me if you don't like my comment. LOL</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Say you have an array &lt;code&gt;prices&lt;/code&gt; for which the &lt;em&gt;i&lt;/em&gt;th element is the price of a given stock on day &lt;em&gt;i&lt;/em&gt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 543. Diameter of Binary Tree</title>
    <link href="http://yoursite.com/2020/04/20/LeetCode-543-Diameter-of-Binary-Tree/"/>
    <id>http://yoursite.com/2020/04/20/LeetCode-543-Diameter-of-Binary-Tree/</id>
    <published>2020-04-20T02:16:23.000Z</published>
    <updated>2020-04-20T02:40:44.679Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the <strong>longest</strong> path between any two nodes in a tree. This path may or may not pass through the root.</p><p><strong>Example:</strong> Given a binary tree</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line"> &#x2F; \     </span><br><span class="line">4   5    </span><br></pre></td></tr></table></figure><p>Return <strong>3</strong>, which is the length of the path [4,2,1,3] or [5,2,1,3].</p><p><strong>Note:</strong> The length of path between two nodes is represented by the number of edges between them.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> diameterOfBinaryTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> diameter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> getD = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> left = getD(root.left);</span><br><span class="line">        <span class="keyword">let</span> right = getD(root.right);</span><br><span class="line">        diameter = <span class="built_in">Math</span>.max(diameter, left + right);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">Math</span>.max(left,right);</span><br><span class="line">    &#125;</span><br><span class="line">    getD(root);</span><br><span class="line">    <span class="keyword">return</span> diameter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 448. Find All Numbers Disappeared in an Array</title>
    <link href="http://yoursite.com/2020/04/19/LeetCode-448-Find-All-Numbers-Disappeared-in-an-Array/"/>
    <id>http://yoursite.com/2020/04/19/LeetCode-448-Find-All-Numbers-Disappeared-in-an-Array/</id>
    <published>2020-04-19T02:05:30.000Z</published>
    <updated>2020-04-19T09:34:20.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear twice and others appear once.</p><p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(<em>n</em>) runtime? You may assume the returned list does not count as extra space.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = nums[i];</span><br><span class="line">        temp = (temp&gt;<span class="number">0</span>) ? temp : -temp;</span><br><span class="line">        <span class="keyword">if</span>(nums[temp<span class="number">-1</span>]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            nums[temp<span class="number">-1</span>] *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(i,temp,nums[temp<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(nums);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j&lt;nums.length;j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            res.push(j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Output :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i temp nums[temp<span class="number">-1</span>]</span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">-7</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">-2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">-3</span></span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">-3</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span> <span class="number">-1</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">-3</span></span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">-2</span></span><br><span class="line"><span class="number">7</span> <span class="number">1</span> <span class="number">-4</span></span><br><span class="line">[ <span class="number">-4</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-7</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">-1</span> ]</span><br></pre></td></tr></table></figure><p>First iteration to negate values at position whose equal to values appear in array.</p><p>Second iteration to collect all position whose value is positive, which are the missing values.</p><p>If you do so , then the left positive element <code>k</code> :</p><p><code>k = nums[i]=nums[j-1]</code></p><p><code>1&lt;=j&lt;=length</code></p><p>the <code>j</code> does not exist</p><p>This is how this method works.</p><p><strong>It just takes the advantage of the indexes in the array : 0~array.length-1</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of integers where 1 ≤ a[i] ≤ &lt;em&gt;n&lt;/em&gt; (&lt;em&gt;n&lt;/em&gt; = size of array), some elements appear twice and others a
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 169. Majority Element</title>
    <link href="http://yoursite.com/2020/04/19/LeetCode-169-Majority-Element/"/>
    <id>http://yoursite.com/2020/04/19/LeetCode-169-Majority-Element/</id>
    <published>2020-04-19T01:38:15.000Z</published>
    <updated>2020-04-19T02:00:44.491Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of size <em>n</em>, find the majority element. The majority element is the element that appears <strong>more than</strong> <code>⌊ n/2 ⌋</code> times.</p><p>You may assume that the array is non-empty and the majority element always exist in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1,1,1,2,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></blockquote><p>I thought maybe I could sort the array first</p><p>Then cuz the element that appears <strong>more than</strong> <code>⌊ n/2 ⌋</code> times , the median must be the element</p><p><code>mid = Math.floor(nums.length/2)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">3</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sorted = nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;<span class="keyword">return</span> a-b&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(sorted);</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(nums.length/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> nums[mid];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Also there is fancy <code>Boyer-Moore Voting Algorithm</code> :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Boyer-Moore Voting Algorithm</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>, candidate = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            candidate = num</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'first:'</span>,count,candidate);</span><br><span class="line">        count += ((num === candidate) ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(count,candidate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input : [2,2,1,1,1,2,2]</span></span><br><span class="line">first: <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">first: <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line">first: <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">first: <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span></span><br><span class="line">first: <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line">first: <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line">first: <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>This method use <code>candidate</code> to track the current element</p><p>if <code>num === candidate</code> then the element appears before so add 1 to the <code>count</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of size &lt;em&gt;n&lt;/em&gt;, find the majority element. The majority element is the element that appears &lt;strong&gt;more 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>R programming : Covid-19 data visualization</title>
    <link href="http://yoursite.com/2020/04/18/R-programming-Covid-19-data-visualization/"/>
    <id>http://yoursite.com/2020/04/18/R-programming-Covid-19-data-visualization/</id>
    <published>2020-04-18T11:39:25.000Z</published>
    <updated>2020-04-21T02:35:34.034Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I use <code>text()</code> to label numbers in graphs and it sucks ... I try to battle with it manully adjusting the parameters and it is still ugly ... if you know any other way PLEASE DO COMMENT !!! Thx !!! 🙏</p></blockquote><p>Here is the raw data :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt; china</span><br><span class="line">            日期 新增确诊病例 新增死亡病例 新增治愈出院病例 新增疑似病例</span><br><span class="line"><span class="number">1</span>  <span class="number">2020</span>年<span class="number">1</span>月<span class="number">29</span>日         <span class="number">1737</span>           <span class="number">38</span>               <span class="number">21</span>         <span class="number">4148</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2020</span>年<span class="number">1</span>月<span class="number">30</span>日         <span class="number">1982</span>           <span class="number">43</span>               <span class="number">47</span>         <span class="number">4812</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2020</span>年<span class="number">1</span>月<span class="number">31</span>日         <span class="number">2102</span>           <span class="number">46</span>               <span class="number">73</span>         <span class="number">5019</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">1</span>日         <span class="number">2590</span>           <span class="number">46</span>               <span class="number">85</span>         <span class="number">4562</span></span><br><span class="line"><span class="number">5</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">2</span>日         <span class="number">2829</span>           <span class="number">57</span>              <span class="number">147</span>         <span class="number">5173</span></span><br><span class="line"><span class="number">6</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">3</span>日         <span class="number">3235</span>           <span class="number">64</span>              <span class="number">157</span>         <span class="number">5072</span></span><br><span class="line"><span class="number">7</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">4</span>日         <span class="number">3887</span>           <span class="number">65</span>              <span class="number">262</span>         <span class="number">3971</span></span><br><span class="line"><span class="number">8</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">5</span>日         <span class="number">3694</span>           <span class="number">73</span>              <span class="number">261</span>         <span class="number">5328</span></span><br><span class="line"><span class="number">9</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">6</span>日         <span class="number">3143</span>           <span class="number">73</span>              <span class="number">387</span>         <span class="number">4833</span></span><br><span class="line"><span class="number">10</span>  <span class="number">2020</span>年<span class="number">2</span>月<span class="number">7</span>日         <span class="number">3399</span>           <span class="number">86</span>              <span class="number">510</span>         <span class="number">4214</span></span><br><span class="line"><span class="number">11</span>  <span class="number">2020</span>年<span class="number">2</span>月<span class="number">8</span>日         <span class="number">2656</span>           <span class="number">89</span>              <span class="number">600</span>         <span class="number">3916</span></span><br><span class="line"><span class="number">12</span>  <span class="number">2020</span>年<span class="number">2</span>月<span class="number">9</span>日         <span class="number">3062</span>           <span class="number">97</span>              <span class="number">632</span>         <span class="number">4008</span></span><br><span class="line"><span class="number">13</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">10</span>日         <span class="number">2478</span>          <span class="number">108</span>              <span class="number">716</span>         <span class="number">3536</span></span><br><span class="line"><span class="number">14</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">11</span>日         <span class="number">2015</span>           <span class="number">97</span>              <span class="number">744</span>         <span class="number">3342</span></span><br><span class="line"><span class="number">15</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">12</span>日        <span class="number">15152</span>          <span class="number">254</span>             <span class="number">1171</span>         <span class="number">2807</span></span><br><span class="line"><span class="number">16</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">13</span>日         <span class="number">5090</span>          <span class="number">121</span>             <span class="number">1081</span>         <span class="number">2450</span></span><br><span class="line"><span class="number">17</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">14</span>日         <span class="number">2641</span>          <span class="number">143</span>             <span class="number">1373</span>         <span class="number">2277</span></span><br><span class="line"><span class="number">18</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">15</span>日         <span class="number">2009</span>          <span class="number">142</span>             <span class="number">1323</span>         <span class="number">1918</span></span><br><span class="line"><span class="number">19</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">16</span>日         <span class="number">2048</span>          <span class="number">105</span>             <span class="number">1425</span>         <span class="number">1563</span></span><br><span class="line"><span class="number">20</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">17</span>日         <span class="number">1886</span>           <span class="number">98</span>             <span class="number">1701</span>         <span class="number">1432</span></span><br><span class="line"><span class="number">21</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">18</span>日         <span class="number">1749</span>          <span class="number">136</span>             <span class="number">1824</span>         <span class="number">1185</span></span><br><span class="line"><span class="number">22</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">19</span>日          <span class="number">394</span>          <span class="number">114</span>             <span class="number">1779</span>         <span class="number">1277</span></span><br><span class="line"><span class="number">23</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">20</span>日          <span class="number">889</span>          <span class="number">118</span>             <span class="number">2109</span>         <span class="number">1614</span></span><br><span class="line">&gt; usa</span><br><span class="line">            地区 累计确诊 累计死亡</span><br><span class="line"><span class="number">1</span>       New York   <span class="number">223691</span>    <span class="number">12248</span></span><br><span class="line"><span class="number">2</span>     New Jersey    <span class="number">75317</span>     <span class="number">3518</span></span><br><span class="line"><span class="number">3</span>  Massachusetts    <span class="number">32181</span>     <span class="number">1245</span></span><br><span class="line"><span class="number">4</span>       Michigan    <span class="number">29263</span>     <span class="number">2093</span></span><br><span class="line"><span class="number">5</span>     California    <span class="number">28036</span>      <span class="number">965</span></span><br><span class="line"><span class="number">6</span>   Pennsylvania    <span class="number">27735</span>      <span class="number">707</span></span><br><span class="line"><span class="number">7</span>       Illinois    <span class="number">25734</span>     <span class="number">1072</span></span><br><span class="line"><span class="number">8</span>        Florida    <span class="number">23340</span>      <span class="number">668</span></span><br><span class="line"><span class="number">9</span>      Louisiana    <span class="number">22532</span>     <span class="number">1156</span></span><br><span class="line"><span class="number">10</span>         Texas    <span class="number">17216</span>      <span class="number">424</span></span><br></pre></td></tr></table></figure><p>Dealing with the Chinese date data :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; as.Date(china$日期, format = <span class="string">"%Y年%m月%d日"</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"2020-01-29"</span> <span class="string">"2020-01-30"</span> <span class="string">"2020-01-31"</span> <span class="string">"2020-02-01"</span> <span class="string">"2020-02-02"</span> <span class="string">"2020-02-03"</span></span><br><span class="line"> [<span class="number">7</span>] <span class="string">"2020-02-04"</span> <span class="string">"2020-02-05"</span> <span class="string">"2020-02-06"</span> <span class="string">"2020-02-07"</span> <span class="string">"2020-02-08"</span> <span class="string">"2020-02-09"</span></span><br><span class="line">[<span class="number">13</span>] <span class="string">"2020-02-10"</span> <span class="string">"2020-02-11"</span> <span class="string">"2020-02-12"</span> <span class="string">"2020-02-13"</span> <span class="string">"2020-02-14"</span> <span class="string">"2020-02-15"</span></span><br><span class="line">[<span class="number">19</span>] <span class="string">"2020-02-16"</span> <span class="string">"2020-02-17"</span> <span class="string">"2020-02-18"</span> <span class="string">"2020-02-19"</span> <span class="string">"2020-02-20"</span></span><br></pre></td></tr></table></figure><p>Bummer ! Chinese characters cannot be displayed in the graph !</p><p>As a OS X user, I put a Chinese-frendly font in the system font folder then load into the working environment .</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; font_files()</span><br><span class="line">            path                       file                    family    face</span><br><span class="line"><span class="number">1</span> /Library/Fonts          Arial Unicode.ttf          Arial Unicode MS Regular</span><br><span class="line"><span class="number">2</span> /Library/Fonts  TaipeiSansTCBeta-Bold.ttf       Taipei Sans TC Beta    Bold</span><br><span class="line"><span class="number">3</span> /Library/Fonts TaipeiSansTCBeta-Light.ttf Taipei Sans TC Beta Light Regular</span><br><span class="line"><span class="number">4</span> /Library/Fonts       TaipeiSansTCBeta.ttf       Taipei Sans TC Beta Regular</span><br><span class="line">        version                  ps_name</span><br><span class="line"><span class="number">1</span> Version <span class="number">1.</span>01x           ArialUnicodeMS</span><br><span class="line"><span class="number">2</span> Version <span class="number">1.000</span>    TaipeiSansTCBeta-Bold</span><br><span class="line"><span class="number">3</span> Version <span class="number">1.000</span>   TaipeiSansTCBeta-Light</span><br><span class="line"><span class="number">4</span> Version <span class="number">1.000</span> TaipeiSansTCBeta-Regular</span><br><span class="line">&gt; par(family=<span class="string">'Taipei Sans TC Beta'</span>)</span><br></pre></td></tr></table></figure><p>Start to draw the first graph :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(china$新增确诊病例~as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),type=<span class="string">'b'</span>,col=<span class="string">'#f94f5b'</span>,pch=<span class="number">2</span>,xlab=<span class="string">'日期'</span>,ylab=<span class="string">'病例数目'</span>,main=<span class="string">'国内疫情数据'</span>)</span><br><span class="line">&gt; points(as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),china$新增死亡病例,col=<span class="string">'#df9f9f'</span>,pch=<span class="number">4</span>,type = <span class="string">'b'</span>)</span><br><span class="line">&gt; points(as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),china$新增治愈出院病例,col=<span class="string">'#9a3e3e'</span>,pch=<span class="number">6</span>,type=<span class="string">'b'</span>)</span><br><span class="line">&gt; points(as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),china$新增疑似病例,col=<span class="string">'#ce7676'</span>,pch=<span class="number">8</span>,type=<span class="string">'b'</span>)</span><br><span class="line">&gt; legend(<span class="string">'topright'</span>,c(<span class="string">'新增确诊病例'</span>,<span class="string">'新增死亡病例'</span>,<span class="string">'新增治愈出院病例'</span>,<span class="string">'新增疑似病例'</span>),col=c(<span class="string">'#f94f5b'</span>,<span class="string">'#df9f9f'</span>,<span class="string">'#9a3e3e'</span>,<span class="string">'#ce7676'</span>),pch=c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/lY0h2We.png" /></p><p>Now draw two pie charts with fancy percent legend :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; percent&lt;-round(<span class="number">100</span>*usa$累计确诊/sum(usa$累计确诊),<span class="number">2</span>) </span><br><span class="line">&gt; percent &lt;-paste(percent, <span class="string">"%"</span>, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent &lt;-paste(usa$地区,<span class="string">' '</span>,percent, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"New York 44.29%"</span>     <span class="string">"New Jersey 14.91%"</span>   <span class="string">"Massachusetts 6.37%"</span></span><br><span class="line"> [<span class="number">4</span>] <span class="string">"Michigan 5.79%"</span>      <span class="string">"California 5.55%"</span>    <span class="string">"Pennsylvania 5.49%"</span> </span><br><span class="line"> [<span class="number">7</span>] <span class="string">"Illinois 5.1%"</span>       <span class="string">"Florida 4.62%"</span>       <span class="string">"Louisiana 4.46%"</span>    </span><br><span class="line">[<span class="number">10</span>] <span class="string">"Texas 3.41%"</span>  </span><br><span class="line">&gt; pie(usa$累计确诊,labels = percent,col = rainbow(length(usa$地区)))</span><br><span class="line">&gt; title(<span class="string">'美国各大州累计确诊数目'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/PbvZzGd.png" /></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; percent&lt;-round(<span class="number">100</span>*usa$累计死亡/sum(usa$累计死亡),<span class="number">2</span>) </span><br><span class="line">&gt; percent &lt;-paste(percent, <span class="string">"%"</span>, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent &lt;-paste(usa$地区,<span class="string">' '</span>,percent, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"New York 50.83%"</span>     <span class="string">"New Jersey 14.6%"</span>    <span class="string">"Massachusetts 5.17%"</span></span><br><span class="line"> [<span class="number">4</span>] <span class="string">"Michigan 8.69%"</span>      <span class="string">"California 4%"</span>       <span class="string">"Pennsylvania 2.93%"</span> </span><br><span class="line"> [<span class="number">7</span>] <span class="string">"Illinois 4.45%"</span>      <span class="string">"Florida 2.77%"</span>       <span class="string">"Louisiana 4.8%"</span>     </span><br><span class="line">[<span class="number">10</span>] <span class="string">"Texas 1.76%"</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/I02uekp.png" /></p><p>Now bar plot :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; us &lt;- t(usa[,c(<span class="number">2</span>:<span class="number">3</span>)])</span><br><span class="line">&gt; us</span><br><span class="line">           [,<span class="number">1</span>]  [,<span class="number">2</span>]  [,<span class="number">3</span>]  [,<span class="number">4</span>]  [,<span class="number">5</span>]  [,<span class="number">6</span>]  [,<span class="number">7</span>]  [,<span class="number">8</span>]  [,<span class="number">9</span>] [,<span class="number">10</span>]</span><br><span class="line">累计确诊 <span class="number">223691</span> <span class="number">75317</span> <span class="number">32181</span> <span class="number">29263</span> <span class="number">28036</span> <span class="number">27735</span> <span class="number">25734</span> <span class="number">23340</span> <span class="number">22532</span> <span class="number">17216</span></span><br><span class="line">累计死亡  <span class="number">12248</span>  <span class="number">3518</span>  <span class="number">1245</span>  <span class="number">2093</span>   <span class="number">965</span>   <span class="number">707</span>  <span class="number">1072</span>   <span class="number">668</span>  <span class="number">1156</span>   <span class="number">424</span></span><br><span class="line">&gt; barplot(us,beside=<span class="literal">TRUE</span>,names.arg = usa$地区,col=c(<span class="string">'#3b5998'</span>,<span class="string">'#8b9dc3'</span>),legend.text = c(<span class="string">'累计确诊'</span>,<span class="string">'累计死亡'</span>),main = <span class="string">'美国各大州累计确诊与死亡数据'</span>,ylim = c(<span class="number">0</span>,<span class="number">250000</span>))</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(usa$地区))*<span class="number">2.75</span>+<span class="number">0.75</span>,y=usa$累计死亡,labels = usa$累计死亡,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(usa$地区))*<span class="number">2.5</span>,y=usa$累计确诊,labels = usa$累计确诊,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/jmEFEYS.png" /></p><p>Now box plot :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; boxplot(usa$累计确诊,usa$累计死亡,col=c(<span class="string">'#ffcc66'</span>),names = c(<span class="string">'累计确诊'</span>,<span class="string">'累计死亡'</span>))</span><br><span class="line">&gt; title(<span class="string">'美国累计确诊与累计死亡数据'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/f092XC0.png" /></p><p>Now dot chart :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dotchart(usa[order(usa$累计确诊),]$累计确诊,labels = usa[order(usa$累计确诊),]$地区,main = <span class="string">"美国累计确诊情况"</span>,pch=<span class="number">18</span>,col=<span class="string">"#52bf90"</span>,xlab = <span class="string">"数量"</span>)</span><br><span class="line">&gt; dotchart(usa[order(usa$累计死亡),]$累计死亡,labels = usa[order(usa$累计死亡),]$地区,main = <span class="string">"美国累计死亡情况"</span>,pch=<span class="number">18</span>,col=<span class="string">"#52bf90"</span>,xlab = <span class="string">"数量"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/nO9bov4.png" /></p><p><img src="https://i.imgur.com/Cpm2wYC.png" /></p><p>Finally 💅</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; barplot(china$新增确诊病例~as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),col=<span class="string">'#f94f5b'</span>,xlab=<span class="string">'日期'</span>,ylab=<span class="string">'病例数目'</span>,main=<span class="string">'国内新增确诊疫情数据'</span>)</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(china$日期))*<span class="number">1.15</span>,y=china$新增确诊病例,labels=china$新增确诊病例,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br><span class="line">&gt; barplot(china$新增确诊病例~as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),col=<span class="string">'#f94f5b'</span>,xlab=<span class="string">'日期'</span>,ylab=<span class="string">'病例数目'</span>,main=<span class="string">'国内新增确诊疫情数据'</span>)</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(china$日期))*<span class="number">1.15</span>,y=china$新增确诊病例,labels=china$新增确诊病例,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/6oXodVh.png" /></p><p><img src="https://i.imgur.com/Ft5I1Kr.png" /></p><p>Cumulative data :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; confirmed &lt;- cumsum(china$新增确诊病例)</span><br><span class="line">&gt; death &lt;- cumsum(china$新增死亡病例)</span><br><span class="line">&gt; rate &lt;- round(<span class="number">100</span>*death/confirmed,<span class="number">2</span>)</span><br><span class="line">&gt; rate</span><br><span class="line"> [<span class="number">1</span>] <span class="number">2.19</span> <span class="number">2.18</span> <span class="number">2.18</span> <span class="number">2.06</span> <span class="number">2.05</span> <span class="number">2.03</span> <span class="number">1.96</span> <span class="number">1.96</span> <span class="number">2.00</span> <span class="number">2.07</span> <span class="number">2.18</span> <span class="number">2.26</span> <span class="number">2.41</span> <span class="number">2.53</span> <span class="number">2.29</span> <span class="number">2.30</span> <span class="number">2.43</span></span><br><span class="line">[<span class="number">18</span>] <span class="number">2.58</span> <span class="number">2.66</span> <span class="number">2.73</span> <span class="number">2.86</span> <span class="number">3.00</span> <span class="number">3.13</span></span><br><span class="line">&gt; percent</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"2.19 % "</span> <span class="string">"2.18 % "</span> <span class="string">"2.18 % "</span> <span class="string">"2.06 % "</span> <span class="string">"2.05 % "</span> <span class="string">"2.03 % "</span> <span class="string">"1.96 % "</span> <span class="string">"1.96 % "</span></span><br><span class="line"> [<span class="number">9</span>] <span class="string">"2 % "</span>    <span class="string">"2.07 % "</span> <span class="string">"2.18 % "</span> <span class="string">"2.26 % "</span> <span class="string">"2.41 % "</span> <span class="string">"2.53 % "</span> <span class="string">"2.29 % "</span> <span class="string">"2.3 % "</span> </span><br><span class="line">[<span class="number">17</span>] <span class="string">"2.43 % "</span> <span class="string">"2.58 % "</span> <span class="string">"2.66 % "</span> <span class="string">"2.73 % "</span> <span class="string">"2.86 % "</span> <span class="string">"3 % "</span>    <span class="string">"3.13 % "</span></span><br><span class="line">&gt; barplot(rate~as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),col=<span class="string">'#52bf90'</span>,xlab=<span class="string">'日期'</span>,ylab=<span class="string">'死亡率'</span>,main=<span class="string">'国内疫情死亡率变化数据'</span>,ylim=c(<span class="number">0</span>,<span class="number">3.5</span>))</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(china$日期))*<span class="number">1.15</span>,y=rate,labels=percent,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/20TB9Ve.png" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;I use &lt;code&gt;text()&lt;/code&gt; to label numbers in graphs and it sucks ... I try to battle with it manully adjusting the paramete
      
    
    </summary>
    
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 230. Kth Smallest Element in a BST</title>
    <link href="http://yoursite.com/2020/04/18/LeetCode-230-Kth-Smallest-Element-in-a-BST/"/>
    <id>http://yoursite.com/2020/04/18/LeetCode-230-Kth-Smallest-Element-in-a-BST/</id>
    <published>2020-04-18T02:28:58.000Z</published>
    <updated>2020-04-18T03:13:01.393Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <strong>k</strong>th smallest element in it.</p><p><strong>Note:</strong> You may assume k is always valid, 1 ≤ k ≤ BST's total elements.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [5,3,6,2,4,null,null,1], k &#x3D; 3</span><br><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">     3   6</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   4</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong> What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kthSmallest = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> record = [];</span><br><span class="line">    <span class="keyword">let</span> traverse = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        record.push(root.val);</span><br><span class="line">        traverse(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    traverse(root);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> record[k<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Optimized version :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kthSmallest = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> current = root,result=<span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span>(current)&#123;</span><br><span class="line">          <span class="keyword">if</span>(!current.left)&#123;</span><br><span class="line">              --k;</span><br><span class="line">              <span class="keyword">if</span>(k===<span class="number">0</span>)&#123;</span><br><span class="line">                  result = current.val;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              current = current.right</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">let</span> prede = current.left;</span><br><span class="line">              <span class="keyword">while</span>(prede.right &amp;&amp; prede.right !== current)&#123;</span><br><span class="line">                  prede = prede.right</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(prede.right)&#123;</span><br><span class="line">                  prede.right = <span class="literal">null</span>;</span><br><span class="line">                  --k;</span><br><span class="line">                  <span class="keyword">if</span>(k===<span class="number">0</span>)&#123;result = current.val;<span class="keyword">break</span>;&#125;</span><br><span class="line">                  current = current.right;</span><br><span class="line"></span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  prede.right = current;</span><br><span class="line">                  current = current.left</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Judge while running the process , quit if k=0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary search tree, write a function &lt;code&gt;kthSmallest&lt;/code&gt; to find the &lt;strong&gt;k&lt;/strong&gt;th smallest element in i
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 104. Maximum Depth of Binary Tree</title>
    <link href="http://yoursite.com/2020/04/18/LeetCode-104-Maximum-Depth-of-Binary-Tree/"/>
    <id>http://yoursite.com/2020/04/18/LeetCode-104-Maximum-Depth-of-Binary-Tree/</id>
    <published>2020-04-18T02:24:06.000Z</published>
    <updated>2020-04-18T02:26:42.980Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><strong>Note:</strong> A leaf is a node with no children.</p><p><strong>Example:</strong></p><p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its depth = 3.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> getDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(getDepth(root.left),getDepth(root.right))+<span class="number">1</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getDepth(root);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>And it could be shortened like this :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root, depth = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> depth;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(maxDepth(root.left, depth + <span class="number">1</span>), maxDepth(root.right, depth + <span class="number">1</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, find its maximum depth.&lt;/p&gt;
&lt;p&gt;The maximum depth is the number of nodes along the longest path from the
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 121. Best Time to Buy and Sell Stock</title>
    <link href="http://yoursite.com/2020/04/17/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>http://yoursite.com/2020/04/17/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2020-04-17T06:19:06.000Z</published>
    <updated>2020-04-17T06:25:13.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ay you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find  the maximum profit.</p><p>Note that you cannot sell a stock before you buy one.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-1 &#x3D; 5.</span><br><span class="line">             Not 7-1 &#x3D; 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> high = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">  <span class="comment">// Notice : low needs to be Number.MAX_SAFE_INTEGER or some element will be missed</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;prices.length;i++) &#123;</span><br><span class="line">        low = <span class="built_in">Math</span>.min(low,prices[i]);</span><br><span class="line">        high = <span class="built_in">Math</span>.max(high,prices[i]-low);</span><br><span class="line">      <span class="comment">// It's very clever to put low first then calculate high </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> high;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ay you have an array for which the &lt;em&gt;i&lt;/em&gt;th element is the price of a given stock on day &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you were 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 53. Maximum Subarray</title>
    <link href="http://yoursite.com/2020/04/17/LeetCode-53-Maximum-Subarray/"/>
    <id>http://yoursite.com/2020/04/17/LeetCode-53-Maximum-Subarray/</id>
    <published>2020-04-17T02:35:56.000Z</published>
    <updated>2020-04-17T03:05:38.548Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum &#x3D; 6.</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> smax = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        sum += num;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;smax) smax=sum;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;<span class="number">0</span>) sum=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> smax;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, find the contiguous subarray (containing at least one number) which has the larges
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 136. Single Number</title>
    <link href="http://yoursite.com/2020/04/17/LeetCode-136-Single-Number/"/>
    <id>http://yoursite.com/2020/04/17/LeetCode-136-Single-Number/</id>
    <published>2020-04-17T02:22:42.000Z</published>
    <updated>2020-04-17T02:34:21.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></blockquote><p>Well it directly says <strong>no extra memory</strong></p><p>So I thought : maybe using XOR bitwise trick 😉</p><p>XOR means <code>1^0=1</code> <code>1^1=0</code> <code>0^0=1</code> , only two different elements will get <code>TRUE</code></p><p>It either twice or once</p><p>So if the element appears twice XOR it will be reduced to a string of zeros</p><p>Or it will be the way it is</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;nums.length;i++ ) &#123;</span><br><span class="line">        nums[<span class="number">0</span>] = nums[<span class="number">0</span>]^nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; array of integers, every element appears &lt;em&gt;twice&lt;/em&gt; except for one. Find that single 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 98. Validate Binary Search Tree</title>
    <link href="http://yoursite.com/2020/04/16/LeetCode-98-Validate-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2020/04/16/LeetCode-98-Validate-Binary-Search-Tree/</id>
    <published>2020-04-16T03:44:59.000Z</published>
    <updated>2020-04-16T04:37:43.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><ul><li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li><li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line"></span><br><span class="line">Input: [2,1,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line"></span><br><span class="line">Input: [5,1,4,null,null,3,6]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The root node&#39;s value is 5 but its right child&#39;s value is 4.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span>(<span class="params">root,min=null,max=null</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(min &amp;&amp; root.val&lt;=min.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(max &amp;&amp; root.val&gt;=max.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> isValidBST(root.left,min,root) &amp;&amp; isValidBST(root.right,root,max);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, determine if it is a valid binary search tree (BST).&lt;/p&gt;
&lt;p&gt;Assume a BST is defined as follows:&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 34. Find First and Last Position of Element in Sorted Array</title>
    <link href="http://yoursite.com/2020/04/15/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
    <id>http://yoursite.com/2020/04/15/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</id>
    <published>2020-04-15T03:50:51.000Z</published>
    <updated>2020-04-15T07:51:41.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>Your algorithm's runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure></blockquote><p>Well obviously it's not brutal force log(N)</p><p><em>O</em>(log <em>n</em>) means binary search</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchRange = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right) &#123;</span><br><span class="line">           mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]===target) &#123;</span><br><span class="line">               left = right = mid;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&lt;target) &#123;</span><br><span class="line">               left = mid+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&gt;target) &#123;</span><br><span class="line">              right = mid<span class="number">-1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(left&gt;right) &#123;</span><br><span class="line">               <span class="comment">// if not in the array</span></span><br><span class="line">               <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (nums[left<span class="number">-1</span>] === target) left--;</span><br><span class="line">    <span class="keyword">while</span> (nums[right+<span class="number">1</span>] === target) right++;</span><br><span class="line">    <span class="keyword">return</span> [left,right];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; sorted in ascending order, find the starting and ending position of a given &lt;co
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 56. Merge Intervals</title>
    <link href="http://yoursite.com/2020/04/14/LeetCode-56-Merge-Intervals/"/>
    <id>http://yoursite.com/2020/04/14/LeetCode-56-Merge-Intervals/</id>
    <published>2020-04-14T10:29:54.000Z</published>
    <updated>2020-04-14T15:41:10.657Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a collection of intervals, merge all overlapping intervals.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">intervals</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(intervals.length&lt;<span class="number">2</span>) <span class="keyword">return</span> intervals;</span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>(a[<span class="number">0</span>]-b[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// first ascending sort</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;intervals.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> pre = intervals[i];</span><br><span class="line">        <span class="keyword">let</span> lat = intervals[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(pre[<span class="number">1</span>]&gt;=lat[<span class="number">0</span>]) &#123;</span><br><span class="line">            intervals[i+<span class="number">1</span>]=[<span class="built_in">Math</span>.min(pre[<span class="number">0</span>],lat[<span class="number">0</span>]),<span class="built_in">Math</span>.max(pre[<span class="number">1</span>],lat[<span class="number">1</span>])];</span><br><span class="line">            intervals.splice(i,<span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intervals;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a collection of intervals, merge all overlapping intervals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
