<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-08T04:55:22.709Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 40. Combination Sum II</title>
    <link href="http://yoursite.com/2020/06/08/LeetCode-40-Combination-Sum-II/"/>
    <id>http://yoursite.com/2020/06/08/LeetCode-40-Combination-Sum-II/</id>
    <published>2020-06-08T04:54:20.000Z</published>
    <updated>2020-06-08T04:55:22.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">candidates</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum2 = <span class="function"><span class="keyword">function</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">    candidates.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function"><span class="keyword">function</span>(<span class="params">id,n,comb</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// id : index of current element, n : target , comb : path array</span></span><br><span class="line">        <span class="keyword">if</span>(n===<span class="number">0</span>) &#123;</span><br><span class="line">            res.push(comb);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=id;i&lt;candidates.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(candidates[i]&lt;=n) &#123;</span><br><span class="line">                dfs(i+<span class="number">1</span>, n - candidates[i], [...comb, candidates[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(candidates[i+<span class="number">1</span>]===candidates[i]) &#123;</span><br><span class="line">                  i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,target,[]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a collection of candidate numbers (&lt;code&gt;candidates&lt;/code&gt;) and a target number (&lt;code&gt;target&lt;/code&gt;), find all unique
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Data Analysis with R: College Admission</title>
    <link href="http://yoursite.com/2020/06/06/Data-Analysis-with-R-College-Admission/"/>
    <id>http://yoursite.com/2020/06/06/Data-Analysis-with-R-College-Admission/</id>
    <published>2020-06-06T07:14:57.000Z</published>
    <updated>2020-06-07T10:49:49.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Data source : https://www.kaggle.com/samsonqian/college-admissions/data#</p><p>Huge thanks to the provider of the dataset ! üôè</p><p>As a junior student who wanted to apply for American universities this year yet interrupted by the COVID-19 pandemic, I feel very distressed and lost during the past few months.</p><p>I don't know what to do anymore. Everything derails my plans.</p><p>So I thought maybe I should get myself together and gap one or two years.</p><p>Now I have a new start.</p><p>During my gap year at least I can do more research on the admission system (though what I get is undergrad admission data) and prepare myself. That's why I want to write this piece.</p><p>Also I want to practice my R skill in the real world ü•≥</p></blockquote><h4 id="the-most-selective-colleges">The most selective colleges ?</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; data.admission_rate &lt;- data$Admissions.total/data$Applicants.total*<span class="number">100</span></span><br><span class="line">&gt; data.enroll_rate &lt;- data$Enrolled.total/data$Admissions.total*<span class="number">100</span></span><br><span class="line">&gt; ad_en &lt;- data.frame(name = data$Name, ad = data.admission_rate, en = data.enroll_rate)</span><br></pre></td></tr></table></figure><p>Well, I find some <code>NA</code> so I need to clean the data first.</p><p>Filter out all rows has <code>NA</code> :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ad_en &lt;- ad_en[!(is.na(ad_en$ad)|is.na(ad_en$en)),]</span><br></pre></td></tr></table></figure><p><del>Be careful about rows and columns in R, never forget the coma !!! üò≠</del></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ad_top_100 &lt;- ad_en[order(ad_en$ad),]</span><br><span class="line">&gt; ad_top_100 &lt;- ad_top_100[c(<span class="number">1</span>,<span class="number">100</span>),]</span><br></pre></td></tr></table></figure><p>Let's check out the top 100 most admission selective colleges :</p><table><colgroup><col style="width: 4%" /><col style="width: 62%" /><col style="width: 18%" /><col style="width: 14%" /></colgroup><thead><tr class="header"><th style="text-align: left;"></th><th style="text-align: left;">name</th><th style="text-align: left;">Admission rate %</th><th style="text-align: left;">enroll rate %</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">1470</td><td style="text-align: left;">Stanford University</td><td style="text-align: left;">5.686618</td><td style="text-align: left;">75.95109</td></tr><tr class="even"><td style="text-align: left;">545</td><td style="text-align: left;">Harvard University</td><td style="text-align: left;">5.844731</td><td style="text-align: left;">81.04543</td></tr><tr class="odd"><td style="text-align: left;">180</td><td style="text-align: left;">Yale University</td><td style="text-align: left;">7.050419</td><td style="text-align: left;">66.37298</td></tr><tr class="even"><td style="text-align: left;">761</td><td style="text-align: left;">Princeton University</td><td style="text-align: left;">7.407827</td><td style="text-align: left;">65.46103</td></tr><tr class="odd"><td style="text-align: left;">794</td><td style="text-align: left;">Columbia University in the City of New York</td><td style="text-align: left;">7.415780</td><td style="text-align: left;">59.90686</td></tr><tr class="even"><td style="text-align: left;">796</td><td style="text-align: left;">Cooper Union for the Advancement of Science and Art</td><td style="text-align: left;">7.735672</td><td style="text-align: left;">75.30364</td></tr><tr class="odd"><td style="text-align: left;">552</td><td style="text-align: left;">Massachusetts Institute of Technology</td><td style="text-align: left;">8.152088</td><td style="text-align: left;">72.02842</td></tr><tr class="even"><td style="text-align: left;">290</td><td style="text-align: left;">University of Chicago</td><td style="text-align: left;">8.810718</td><td style="text-align: left;">53.40824</td></tr><tr class="odd"><td style="text-align: left;">1173</td><td style="text-align: left;">Brown University</td><td style="text-align: left;">9.177357</td><td style="text-align: left;">58.13866</td></tr><tr class="even"><td style="text-align: left;">735</td><td style="text-align: left;">Dartmouth College</td><td style="text-align: left;">9.779316</td><td style="text-align: left;">48.58407</td></tr><tr class="odd"><td style="text-align: left;">65</td><td style="text-align: left;">California Institute of Technology</td><td style="text-align: left;">10.551039</td><td style="text-align: left;">42.63699</td></tr><tr class="even"><td style="text-align: left;">95</td><td style="text-align: left;">Claremont McKenna College</td><td style="text-align: left;">11.725263</td><td style="text-align: left;">52.08655</td></tr><tr class="odd"><td style="text-align: left;">1141</td><td style="text-align: left;">University of Pennsylvania</td><td style="text-align: left;">12.243463</td><td style="text-align: left;">63.21149</td></tr><tr class="even"><td style="text-align: left;">1258</td><td style="text-align: left;">Vanderbilt University</td><td style="text-align: left;">12.743175</td><td style="text-align: left;">40.70149</td></tr><tr class="odd"><td style="text-align: left;">691</td><td style="text-align: left;">College of the Ozarks</td><td style="text-align: left;">13.007319</td><td style="text-align: left;">91.30435</td></tr><tr class="even"><td style="text-align: left;">911</td><td style="text-align: left;">Duke University</td><td style="text-align: left;">13.422664</td><td style="text-align: left;">42.04072</td></tr><tr class="odd"><td style="text-align: left;">664</td><td style="text-align: left;">Rust College</td><td style="text-align: left;">13.864213</td><td style="text-align: left;">65.67506</td></tr><tr class="even"><td style="text-align: left;">125</td><td style="text-align: left;">Pomona College</td><td style="text-align: left;">13.924228</td><td style="text-align: left;">39.85944</td></tr><tr class="odd"><td style="text-align: left;">523</td><td style="text-align: left;">Amherst College</td><td style="text-align: left;">14.280308</td><td style="text-align: left;">41.16608</td></tr><tr class="even"><td style="text-align: left;">1159</td><td style="text-align: left;">Swarthmore College</td><td style="text-align: left;">14.315949</td><td style="text-align: left;">40.97149</td></tr><tr class="odd"><td style="text-align: left;">123</td><td style="text-align: left;">Pitzer College</td><td style="text-align: left;">14.507898</td><td style="text-align: left;">43.71859</td></tr><tr class="even"><td style="text-align: left;">482</td><td style="text-align: left;">Bowdoin College</td><td style="text-align: left;">14.946115</td><td style="text-align: left;">47.15370</td></tr><tr class="odd"><td style="text-align: left;">321</td><td style="text-align: left;">Northwestern University</td><td style="text-align: left;">15.321273</td><td style="text-align: left;">41.46987</td></tr><tr class="even"><td style="text-align: left;">699</td><td style="text-align: left;">Washington University in St Louis</td><td style="text-align: left;">15.552678</td><td style="text-align: left;">34.37233</td></tr><tr class="odd"><td style="text-align: left;">797</td><td style="text-align: left;">Cornell University</td><td style="text-align: left;">15.555389</td><td style="text-align: left;">51.80006</td></tr><tr class="even"><td style="text-align: left;">1293</td><td style="text-align: left;">Rice University</td><td style="text-align: left;">16.743432</td><td style="text-align: left;">37.89229</td></tr><tr class="odd"><td style="text-align: left;">190</td><td style="text-align: left;">Georgetown University</td><td style="text-align: left;">16.967437</td><td style="text-align: left;">46.00059</td></tr><tr class="even"><td style="text-align: left;">578</td><td style="text-align: left;">Williams College</td><td style="text-align: left;">17.017966</td><td style="text-align: left;">45.46966</td></tr><tr class="odd"><td style="text-align: left;">1349</td><td style="text-align: left;">Middlebury College</td><td style="text-align: left;">17.158359</td><td style="text-align: left;">39.39394</td></tr><tr class="even"><td style="text-align: left;">82</td><td style="text-align: left;">University of California-Berkeley</td><td style="text-align: left;">17.998282</td><td style="text-align: left;">37.46849</td></tr><tr class="odd"><td style="text-align: left;">504</td><td style="text-align: left;">Johns Hopkins University</td><td style="text-align: left;">18.133671</td><td style="text-align: left;">35.92660</td></tr><tr class="even"><td style="text-align: left;">101</td><td style="text-align: left;">Harvey Mudd College</td><td style="text-align: left;">18.168974</td><td style="text-align: left;">33.74806</td></tr><tr class="odd"><td style="text-align: left;">1397</td><td style="text-align: left;">Washington and Lee University</td><td style="text-align: left;">18.434587</td><td style="text-align: left;">41.84830</td></tr><tr class="even"><td style="text-align: left;">571</td><td style="text-align: left;">Tufts University</td><td style="text-align: left;">18.844671</td><td style="text-align: left;">37.85653</td></tr><tr class="odd"><td style="text-align: left;">138</td><td style="text-align: left;">University of Southern California</td><td style="text-align: left;">19.838253</td><td style="text-align: left;">31.10165</td></tr><tr class="even"><td style="text-align: left;">233</td><td style="text-align: left;">Albany State University</td><td style="text-align: left;">19.915152</td><td style="text-align: left;">30.49300</td></tr><tr class="odd"><td style="text-align: left;">787</td><td style="text-align: left;">Barnard College</td><td style="text-align: left;">20.531573</td><td style="text-align: left;">50.39096</td></tr><tr class="even"><td style="text-align: left;">178</td><td style="text-align: left;">Wesleyan University</td><td style="text-align: left;">20.923751</td><td style="text-align: left;">35.77545</td></tr><tr class="odd"><td style="text-align: left;">626</td><td style="text-align: left;">Carleton College</td><td style="text-align: left;">20.951029</td><td style="text-align: left;">35.70461</td></tr><tr class="even"><td style="text-align: left;">325</td><td style="text-align: left;">Robert Morris University Illinois</td><td style="text-align: left;">21.004902</td><td style="text-align: left;">83.89732</td></tr><tr class="odd"><td style="text-align: left;">1372</td><td style="text-align: left;">Liberty University</td><td style="text-align: left;">21.652724</td><td style="text-align: left;">45.07448</td></tr><tr class="even"><td style="text-align: left;">85</td><td style="text-align: left;">University of California-Los Angeles</td><td style="text-align: left;">21.989378</td><td style="text-align: left;">35.16676</td></tr><tr class="odd"><td style="text-align: left;">683</td><td style="text-align: left;">Missouri Valley College</td><td style="text-align: left;">22.181146</td><td style="text-align: left;">86.45833</td></tr><tr class="even"><td style="text-align: left;">148</td><td style="text-align: left;">Colorado College</td><td style="text-align: left;">22.283737</td><td style="text-align: left;">40.52795</td></tr><tr class="odd"><td style="text-align: left;">368</td><td style="text-align: left;">University of Notre Dame</td><td style="text-align: left;">22.304074</td><td style="text-align: left;">52.59146</td></tr><tr class="even"><td style="text-align: left;">661</td><td style="text-align: left;">Mississippi Valley State University</td><td style="text-align: left;">22.716327</td><td style="text-align: left;">34.84099</td></tr><tr class="odd"><td style="text-align: left;">805</td><td style="text-align: left;">CUNY Lehman College</td><td style="text-align: left;">23.276195</td><td style="text-align: left;">15.25471</td></tr><tr class="even"><td style="text-align: left;">1238</td><td style="text-align: left;">Le Moyne-Owen College</td><td style="text-align: left;">23.349436</td><td style="text-align: left;">65.51724</td></tr><tr class="odd"><td style="text-align: left;">1093</td><td style="text-align: left;">Haverford College</td><td style="text-align: left;">23.486750</td><td style="text-align: left;">39.19240</td></tr><tr class="even"><td style="text-align: left;">898</td><td style="text-align: left;">Vassar College</td><td style="text-align: left;">24.114782</td><td style="text-align: left;">36.35371</td></tr><tr class="odd"><td style="text-align: left;">481</td><td style="text-align: left;">Bates College</td><td style="text-align: left;">24.165554</td><td style="text-align: left;">39.46330</td></tr><tr class="even"><td style="text-align: left;">798</td><td style="text-align: left;">CUNY Bernard M Baruch College</td><td style="text-align: left;">24.825052</td><td style="text-align: left;">24.03164</td></tr><tr class="odd"><td style="text-align: left;">1073</td><td style="text-align: left;">Carnegie Mellon University</td><td style="text-align: left;">25.487185</td><td style="text-align: left;">29.96052</td></tr><tr class="even"><td style="text-align: left;">910</td><td style="text-align: left;">Davidson College</td><td style="text-align: left;">25.605901</td><td style="text-align: left;">39.75309</td></tr><tr class="odd"><td style="text-align: left;">483</td><td style="text-align: left;">Colby College</td><td style="text-align: left;">26.040318</td><td style="text-align: left;">34.30398</td></tr><tr class="even"><td style="text-align: left;">842</td><td style="text-align: left;">New York University</td><td style="text-align: left;">26.045466</td><td style="text-align: left;">34.56126</td></tr><tr class="odd"><td style="text-align: left;">245</td><td style="text-align: left;">Emory University</td><td style="text-align: left;">26.334764</td><td style="text-align: left;">29.61756</td></tr><tr class="even"><td style="text-align: left;">792</td><td style="text-align: left;">Colgate University</td><td style="text-align: left;">26.379269</td><td style="text-align: left;">34.35944</td></tr><tr class="odd"><td style="text-align: left;">478</td><td style="text-align: left;">Tulane University of Louisiana</td><td style="text-align: left;">26.429188</td><td style="text-align: left;">20.21103</td></tr><tr class="even"><td style="text-align: left;">817</td><td style="text-align: left;">Hamilton College</td><td style="text-align: left;">27.187562</td><td style="text-align: left;">35.99707</td></tr><tr class="odd"><td style="text-align: left;">200</td><td style="text-align: left;">Edward Waters College</td><td style="text-align: left;">27.320399</td><td style="text-align: left;">39.92322</td></tr><tr class="even"><td style="text-align: left;">931</td><td style="text-align: left;">University of North Carolina at Chapel Hill</td><td style="text-align: left;">27.594331</td><td style="text-align: left;">49.89168</td></tr><tr class="odd"><td style="text-align: left;">45</td><td style="text-align: left;">University of Arkansas at Pine Bluff</td><td style="text-align: left;">27.699072</td><td style="text-align: left;">50.08818</td></tr><tr class="even"><td style="text-align: left;">332</td><td style="text-align: left;">Shimer College</td><td style="text-align: left;">28.571429</td><td style="text-align: left;">100.00000</td></tr><tr class="odd"><td style="text-align: left;">289</td><td style="text-align: left;">Chicago State University</td><td style="text-align: left;">28.645334</td><td style="text-align: left;">18.46154</td></tr><tr class="even"><td style="text-align: left;">572</td><td style="text-align: left;">Wellesley College</td><td style="text-align: left;">29.108080</td><td style="text-align: left;">42.89834</td></tr><tr class="odd"><td style="text-align: left;">1069</td><td style="text-align: left;">Bucknell University</td><td style="text-align: left;">29.507990</td><td style="text-align: left;">39.78678</td></tr><tr class="even"><td style="text-align: left;">803</td><td style="text-align: left;">CUNY Hunter College</td><td style="text-align: left;">29.715846</td><td style="text-align: left;">21.56455</td></tr><tr class="odd"><td style="text-align: left;">1323</td><td style="text-align: left;">Texas Wesleyan University</td><td style="text-align: left;">29.916067</td><td style="text-align: left;">27.35471</td></tr><tr class="even"><td style="text-align: left;">1392</td><td style="text-align: left;">University of Virginia-Main Campus</td><td style="text-align: left;">29.985509</td><td style="text-align: left;">40.50167</td></tr><tr class="odd"><td style="text-align: left;">1501</td><td style="text-align: left;">Trine University-Regional/Non-Traditional Campuses</td><td style="text-align: left;">30.303030</td><td style="text-align: left;">70.00000</td></tr><tr class="even"><td style="text-align: left;">992</td><td style="text-align: left;">Oberlin College</td><td style="text-align: left;">30.411401</td><td style="text-align: left;">34.52697</td></tr><tr class="odd"><td style="text-align: left;">78</td><td style="text-align: left;">California State University-Long Beach</td><td style="text-align: left;">30.818445</td><td style="text-align: left;">25.21821</td></tr><tr class="even"><td style="text-align: left;">1105</td><td style="text-align: left;">Lehigh University</td><td style="text-align: left;">30.836445</td><td style="text-align: left;">30.86038</td></tr><tr class="odd"><td style="text-align: left;">1383</td><td style="text-align: left;">University of Richmond</td><td style="text-align: left;">31.155216</td><td style="text-align: left;">26.29860</td></tr><tr class="even"><td style="text-align: left;">127</td><td style="text-align: left;">San Diego State University</td><td style="text-align: left;">31.213963</td><td style="text-align: left;">25.91735</td></tr><tr class="odd"><td style="text-align: left;">67</td><td style="text-align: left;">California Polytechnic State University-San Luis Obispo</td><td style="text-align: left;">31.230882</td><td style="text-align: left;">31.50732</td></tr><tr class="even"><td style="text-align: left;">177</td><td style="text-align: left;">Trinity College</td><td style="text-align: left;">31.782541</td><td style="text-align: left;">24.83553</td></tr><tr class="odd"><td style="text-align: left;">799</td><td style="text-align: left;">CUNY Brooklyn College</td><td style="text-align: left;">31.981051</td><td style="text-align: left;">18.09014</td></tr><tr class="even"><td style="text-align: left;">529</td><td style="text-align: left;">Boston College</td><td style="text-align: left;">32.215339</td><td style="text-align: left;">28.02024</td></tr><tr class="odd"><td style="text-align: left;">1058</td><td style="text-align: left;">Corban University</td><td style="text-align: left;">32.251381</td><td style="text-align: left;">23.76874</td></tr></tbody></table><p>Well, not every college on the list is a "traditional prestige university". But many elite universities like Stanford, Harvard, Yale are on the list.</p><h4 id="how-about-the-standard-test-scores">How about the standard test scores?</h4><p>First, consider the 75th percentile ‚Äî‚Äî how good are the good students ?</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; per_75 &lt;- data$SAT.Math.75th.percentile.score+data$SAT.Writing.75th.percentile.score+data$SAT.Critical.Reading.75th.percentile.score+data$ACT.Composite.75th.percentile.score</span><br><span class="line">&gt; table_75 &lt;- data.frame(name = data$Name,per_75=per_75)</span><br><span class="line">&gt; table_75 &lt;- table_75[!is.na(table_75$per_75),]</span><br><span class="line">&gt; table_75 &lt;- table_75[order(table_75$per_75,decreasing=<span class="literal">T</span>),]</span><br><span class="line">&gt; table_75 &lt;- table_75[c(<span class="number">1</span>:<span class="number">25</span>),]</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th style="text-align: left;"></th><th style="text-align: left;">name</th><th style="text-align: left;">per_75 = SAT 75% + ACT 75%</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">545</td><td style="text-align: left;">Harvard University</td><td style="text-align: left;">2435</td></tr><tr class="even"><td style="text-align: left;">65</td><td style="text-align: left;">California Institute of Technology</td><td style="text-align: left;">2425</td></tr><tr class="odd"><td style="text-align: left;">180</td><td style="text-align: left;">Yale University</td><td style="text-align: left;">2425</td></tr><tr class="even"><td style="text-align: left;">761</td><td style="text-align: left;">Princeton University</td><td style="text-align: left;">2425</td></tr><tr class="odd"><td style="text-align: left;">290</td><td style="text-align: left;">University of Chicago</td><td style="text-align: left;">2405</td></tr><tr class="even"><td style="text-align: left;">552</td><td style="text-align: left;">Massachusetts Institute of Technology</td><td style="text-align: left;">2385</td></tr><tr class="odd"><td style="text-align: left;">735</td><td style="text-align: left;">Dartmouth College</td><td style="text-align: left;">2384</td></tr><tr class="even"><td style="text-align: left;">794</td><td style="text-align: left;">Columbia University in the City of New York</td><td style="text-align: left;">2384</td></tr><tr class="odd"><td style="text-align: left;">1470</td><td style="text-align: left;">Stanford University</td><td style="text-align: left;">2384</td></tr><tr class="even"><td style="text-align: left;">578</td><td style="text-align: left;">Williams College</td><td style="text-align: left;">2374</td></tr><tr class="odd"><td style="text-align: left;">1258</td><td style="text-align: left;">Vanderbilt University</td><td style="text-align: left;">2374</td></tr><tr class="even"><td style="text-align: left;">911</td><td style="text-align: left;">Duke University</td><td style="text-align: left;">2364</td></tr><tr class="odd"><td style="text-align: left;">101</td><td style="text-align: left;">Harvey Mudd College</td><td style="text-align: left;">2355</td></tr><tr class="even"><td style="text-align: left;">125</td><td style="text-align: left;">Pomona College</td><td style="text-align: left;">2354</td></tr><tr class="odd"><td style="text-align: left;">321</td><td style="text-align: left;">Northwestern University</td><td style="text-align: left;">2354</td></tr><tr class="even"><td style="text-align: left;">699</td><td style="text-align: left;">Washington University in St Louis</td><td style="text-align: left;">2354</td></tr><tr class="odd"><td style="text-align: left;">1141</td><td style="text-align: left;">University of Pennsylvania</td><td style="text-align: left;">2354</td></tr><tr class="even"><td style="text-align: left;">1293</td><td style="text-align: left;">Rice University</td><td style="text-align: left;">2354</td></tr><tr class="odd"><td style="text-align: left;">1173</td><td style="text-align: left;">Brown University</td><td style="text-align: left;">2344</td></tr><tr class="even"><td style="text-align: left;">1159</td><td style="text-align: left;">Swarthmore College</td><td style="text-align: left;">2334</td></tr><tr class="odd"><td style="text-align: left;">523</td><td style="text-align: left;">Amherst College</td><td style="text-align: left;">2324</td></tr><tr class="even"><td style="text-align: left;">571</td><td style="text-align: left;">Tufts University</td><td style="text-align: left;">2323</td></tr><tr class="odd"><td style="text-align: left;">1073</td><td style="text-align: left;">Carnegie Mellon University</td><td style="text-align: left;">2314</td></tr><tr class="even"><td style="text-align: left;">482</td><td style="text-align: left;">Bowdoin College</td><td style="text-align: left;">2313</td></tr><tr class="odd"><td style="text-align: left;">797</td><td style="text-align: left;">Cornell University</td><td style="text-align: left;">2304</td></tr></tbody></table><p>It seems that good grades can get you into prestige universities.</p><p>Then, what about the other side of the spectrum ?</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; per_25 &lt;- data$SAT.Math.25th.percentile.score+data$SAT.Writing.25th.percentile.score+data$ACT.Composite.25th.percentile.score+data$SAT.Critical.Reading.25th.percentile.score</span><br><span class="line">&gt; table_25 &lt;- data.frame(name = data$Name,per_25 = per_25)</span><br><span class="line">&gt; table_25 &lt;- table_25[order(table_25$per_25,decreasing=<span class="literal">T</span>),]</span><br><span class="line">&gt; table_25 &lt;- table_25[c(<span class="number">1</span>:<span class="number">25</span>),]</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th style="text-align: left;"></th><th style="text-align: left;">name</th><th style="text-align: left;">per_25 = SAT 25% + ACT 25%</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">65</td><td style="text-align: left;">California Institute of Technology</td><td style="text-align: left;">2243</td></tr><tr class="even"><td style="text-align: left;">290</td><td style="text-align: left;">University of Chicago</td><td style="text-align: left;">2172</td></tr><tr class="odd"><td style="text-align: left;">552</td><td style="text-align: left;">Massachusetts Institute of Technology</td><td style="text-align: left;">2153</td></tr><tr class="even"><td style="text-align: left;">180</td><td style="text-align: left;">Yale University</td><td style="text-align: left;">2152</td></tr><tr class="odd"><td style="text-align: left;">545</td><td style="text-align: left;">Harvard University</td><td style="text-align: left;">2152</td></tr><tr class="even"><td style="text-align: left;">699</td><td style="text-align: left;">Washington University in St Louis</td><td style="text-align: left;">2152</td></tr><tr class="odd"><td style="text-align: left;">761</td><td style="text-align: left;">Princeton University</td><td style="text-align: left;">2151</td></tr><tr class="even"><td style="text-align: left;">1258</td><td style="text-align: left;">Vanderbilt University</td><td style="text-align: left;">2122</td></tr><tr class="odd"><td style="text-align: left;">321</td><td style="text-align: left;">Northwestern University</td><td style="text-align: left;">2111</td></tr><tr class="even"><td style="text-align: left;">794</td><td style="text-align: left;">Columbia University in the City of New York</td><td style="text-align: left;">2111</td></tr><tr class="odd"><td style="text-align: left;">101</td><td style="text-align: left;">Harvey Mudd College</td><td style="text-align: left;">2102</td></tr><tr class="even"><td style="text-align: left;">125</td><td style="text-align: left;">Pomona College</td><td style="text-align: left;">2101</td></tr><tr class="odd"><td style="text-align: left;">1470</td><td style="text-align: left;">Stanford University</td><td style="text-align: left;">2101</td></tr><tr class="even"><td style="text-align: left;">482</td><td style="text-align: left;">Bowdoin College</td><td style="text-align: left;">2080</td></tr><tr class="odd"><td style="text-align: left;">571</td><td style="text-align: left;">Tufts University</td><td style="text-align: left;">2080</td></tr><tr class="even"><td style="text-align: left;">1141</td><td style="text-align: left;">University of Pennsylvania</td><td style="text-align: left;">2080</td></tr><tr class="odd"><td style="text-align: left;">1293</td><td style="text-align: left;">Rice University</td><td style="text-align: left;">2071</td></tr><tr class="even"><td style="text-align: left;">911</td><td style="text-align: left;">Duke University</td><td style="text-align: left;">2070</td></tr><tr class="odd"><td style="text-align: left;">1159</td><td style="text-align: left;">Swarthmore College</td><td style="text-align: left;">2061</td></tr><tr class="even"><td style="text-align: left;">735</td><td style="text-align: left;">Dartmouth College</td><td style="text-align: left;">2060</td></tr><tr class="odd"><td style="text-align: left;">523</td><td style="text-align: left;">Amherst College</td><td style="text-align: left;">2050</td></tr><tr class="even"><td style="text-align: left;">578</td><td style="text-align: left;">Williams College</td><td style="text-align: left;">2040</td></tr><tr class="odd"><td style="text-align: left;">626</td><td style="text-align: left;">Carleton College</td><td style="text-align: left;">2029</td></tr><tr class="even"><td style="text-align: left;">1173</td><td style="text-align: left;">Brown University</td><td style="text-align: left;">2029</td></tr><tr class="odd"><td style="text-align: left;">1073</td><td style="text-align: left;">Carnegie Mellon University</td><td style="text-align: left;">2020</td></tr></tbody></table><p>Still, the lower boundary of prestige universities is very demanding ...</p><p>Now we can intersect the two lists above to get the most academic-demanding universities :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; prestige &lt;- data.frame(prestige)</span><br><span class="line">&gt; View(prestige)</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th style="text-align: left;"></th><th style="text-align: left;">Name</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">1</td><td style="text-align: left;">California Institute of Technology</td></tr><tr class="even"><td style="text-align: left;">2</td><td style="text-align: left;">University of Chicago</td></tr><tr class="odd"><td style="text-align: left;">3</td><td style="text-align: left;">Massachusetts Institute of Technology</td></tr><tr class="even"><td style="text-align: left;">4</td><td style="text-align: left;">Yale University</td></tr><tr class="odd"><td style="text-align: left;">5</td><td style="text-align: left;">Harvard University</td></tr><tr class="even"><td style="text-align: left;">6</td><td style="text-align: left;">Washington University in St Louis</td></tr><tr class="odd"><td style="text-align: left;">7</td><td style="text-align: left;">Princeton University</td></tr><tr class="even"><td style="text-align: left;">8</td><td style="text-align: left;">Vanderbilt University</td></tr><tr class="odd"><td style="text-align: left;">9</td><td style="text-align: left;">Northwestern University</td></tr><tr class="even"><td style="text-align: left;">10</td><td style="text-align: left;">Columbia University in the City of New York</td></tr><tr class="odd"><td style="text-align: left;">11</td><td style="text-align: left;">Harvey Mudd College</td></tr><tr class="even"><td style="text-align: left;">12</td><td style="text-align: left;">Pomona College</td></tr><tr class="odd"><td style="text-align: left;">13</td><td style="text-align: left;">Stanford University</td></tr><tr class="even"><td style="text-align: left;">14</td><td style="text-align: left;">Bowdoin College</td></tr><tr class="odd"><td style="text-align: left;">15</td><td style="text-align: left;">Tufts University</td></tr><tr class="even"><td style="text-align: left;">16</td><td style="text-align: left;">University of Pennsylvania</td></tr><tr class="odd"><td style="text-align: left;">17</td><td style="text-align: left;">Rice University</td></tr><tr class="even"><td style="text-align: left;">18</td><td style="text-align: left;">Duke University</td></tr><tr class="odd"><td style="text-align: left;">19</td><td style="text-align: left;">Swarthmore College</td></tr><tr class="even"><td style="text-align: left;">20</td><td style="text-align: left;">Dartmouth College</td></tr><tr class="odd"><td style="text-align: left;">21</td><td style="text-align: left;">Amherst College</td></tr><tr class="even"><td style="text-align: left;">22</td><td style="text-align: left;">Williams College</td></tr><tr class="odd"><td style="text-align: left;">23</td><td style="text-align: left;">Brown University</td></tr><tr class="even"><td style="text-align: left;">24</td><td style="text-align: left;">Carnegie Mellon University</td></tr></tbody></table><h4 id="can-you-graduate">Can you graduate ?</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; grad_rate &lt;- data$Graduation.rate...Bachelor.degree.within.4.years..total+data$Graduation.rate...Bachelor.degree.within.5.years..total+data$Graduation.rate...Bachelor.degree.within.6.years..total</span><br><span class="line">&gt; grad_rate_table &lt;- data.frame(name=data$Name,grad_rate=grad_rate)</span><br><span class="line">&gt; grad_rate_table &lt;- grad_rate_table[grad_rate_table$grad_rate&gt;<span class="number">0</span>,]</span><br><span class="line">&gt; boxplot(grad_rate_table$grad_rate/<span class="number">300</span>*<span class="number">100</span>)</span><br><span class="line">&gt; title(main = <span class="string">"Graduation rate box plot"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/3X7pbD2.png" /></p><p>It seems that students better push themselves harder. About 35% ~ 60% students cannot graduate in 6 years ü§î</p><h4 id="the-endowment">The endowment ?</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; FASB &lt;- data.frame(name = data$Name, endow = data$Endowment.assets..year.end..per.FTE.enrollment..FASB.)</span><br><span class="line">&gt; FASB &lt;- FASB[!is.na(FASB$endow),]</span><br><span class="line">&gt; GASB &lt;- data.frame(name = data$Name,endow = data$Endowment.assets..year.end..per.FTE.enrollment..GASB.)</span><br><span class="line">&gt; GASB &lt;- GASB[!is.na(GASB$endow),]</span><br><span class="line">&gt; endowment &lt;- rbind(FASB,GASB)</span><br><span class="line">&gt; endowment &lt;- endowment[order(endowment$endow,decreasing = <span class="literal">T</span>),]</span><br><span class="line">&gt; endowment &lt;- endowment[c(<span class="number">1</span>:<span class="number">25</span>),]</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th style="text-align: left;"></th><th style="text-align: left;">Name</th><th style="text-align: left;">Endowment = FASB + GASB</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">1492</td><td style="text-align: left;">Soka University of America</td><td style="text-align: left;">2505435</td></tr><tr class="even"><td style="text-align: left;">761</td><td style="text-align: left;">Princeton University</td><td style="text-align: left;">2320421</td></tr><tr class="odd"><td style="text-align: left;">180</td><td style="text-align: left;">Yale University</td><td style="text-align: left;">1528324</td></tr><tr class="even"><td style="text-align: left;">545</td><td style="text-align: left;">Harvard University</td><td style="text-align: left;">1392761</td></tr><tr class="odd"><td style="text-align: left;">1470</td><td style="text-align: left;">Stanford University</td><td style="text-align: left;">1215932</td></tr><tr class="even"><td style="text-align: left;">125</td><td style="text-align: left;">Pomona College</td><td style="text-align: left;">1146818</td></tr><tr class="odd"><td style="text-align: left;">1159</td><td style="text-align: left;">Swarthmore College</td><td style="text-align: left;">1034611</td></tr><tr class="even"><td style="text-align: left;">552</td><td style="text-align: left;">Massachusetts Institute of Technology</td><td style="text-align: left;">980404</td></tr><tr class="odd"><td style="text-align: left;">391</td><td style="text-align: left;">Grinnell College</td><td style="text-align: left;">950232</td></tr><tr class="even"><td style="text-align: left;">523</td><td style="text-align: left;">Amherst College</td><td style="text-align: left;">930009</td></tr><tr class="odd"><td style="text-align: left;">578</td><td style="text-align: left;">Williams College</td><td style="text-align: left;">888422</td></tr><tr class="even"><td style="text-align: left;">65</td><td style="text-align: left;">California Institute of Technology</td><td style="text-align: left;">872856</td></tr><tr class="odd"><td style="text-align: left;">1293</td><td style="text-align: left;">Rice University</td><td style="text-align: left;">729227</td></tr><tr class="even"><td style="text-align: left;">796</td><td style="text-align: left;">Cooper Union for the Advancement of Science and Art</td><td style="text-align: left;">704474</td></tr><tr class="odd"><td style="text-align: left;">434</td><td style="text-align: left;">Berea College</td><td style="text-align: left;">623784</td></tr><tr class="even"><td style="text-align: left;">1397</td><td style="text-align: left;">Washington and Lee University</td><td style="text-align: left;">599001</td></tr><tr class="odd"><td style="text-align: left;">572</td><td style="text-align: left;">Wellesley College</td><td style="text-align: left;">593054</td></tr><tr class="even"><td style="text-align: left;">735</td><td style="text-align: left;">Dartmouth College</td><td style="text-align: left;">581104</td></tr><tr class="odd"><td style="text-align: left;">482</td><td style="text-align: left;">Bowdoin College</td><td style="text-align: left;">574151</td></tr><tr class="even"><td style="text-align: left;">368</td><td style="text-align: left;">University of Notre Dame</td><td style="text-align: left;">545295</td></tr><tr class="odd"><td style="text-align: left;">1383</td><td style="text-align: left;">University of Richmond</td><td style="text-align: left;">479753</td></tr><tr class="even"><td style="text-align: left;">566</td><td style="text-align: left;">Smith College</td><td style="text-align: left;">462144</td></tr><tr class="odd"><td style="text-align: left;">1482</td><td style="text-align: left;">Mayo Graduate School</td><td style="text-align: left;">458781</td></tr><tr class="even"><td style="text-align: left;">1068</td><td style="text-align: left;">Bryn Mawr College</td><td style="text-align: left;">458469</td></tr><tr class="odd"><td style="text-align: left;">95</td><td style="text-align: left;">Claremont McKenna College</td><td style="text-align: left;">456319</td></tr></tbody></table><p>A lot of prestige universities also received the largest endowments.</p><h4 id="women-enrolled">Women enrolled ?</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; women &lt;- data$Percent.of.total.enrollment.that.are.women</span><br><span class="line">&gt; women_undergrad &lt;- data$Percent.of.undergraduate.enrollment.that.are.women</span><br><span class="line">&gt; women_grad &lt;- data$Percent.of.graduate.enrollment.that.are.women</span><br><span class="line">&gt; boxplot(women,women_undergrad,women_grad,main=<span class="string">"Percent of enrollment that are women"</span>,names = c(<span class="string">"Total"</span>,<span class="string">"Undergrad"</span>,<span class="string">"Graduate"</span>),notch = <span class="literal">T</span>)</span><br></pre></td></tr></table></figure><figure><img src="https://i.imgur.com/BBqbmAW.png" alt="Imgur" /><figcaption>Imgur</figcaption></figure><p>We can easily tell from the graph above that women enrollment rate in higher education is definitely improving. Female students make up more than 50% in most colleges.</p><h4 id="diversity">Diversity ?</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; american_native &lt;- data$Percent.of.total.enrollment.that.are.Native.Hawaiian.or.Other.Pacific.Islander</span><br><span class="line">&gt; asian &lt;- data$Percent.of.total.enrollment.that.are.Asian</span><br><span class="line">&gt; black &lt;- data$Percent.of.total.enrollment.that.are.Black.or.African.American</span><br><span class="line">&gt; latino &lt;- data$Percent.of.total.enrollment.that.are.Hispanic.Latino</span><br><span class="line">&gt; hawaiian &lt;- data$Percent.of.total.enrollment.that.are.Native.Hawaiian.or.Other.Pacific.Islander</span><br><span class="line">&gt; white &lt;- data$Percent.of.total.enrollment.that.are.White</span><br><span class="line">&gt; unknown &lt;- data$Percent.of.total.enrollment.that.are.Race.ethnicity.unknown</span><br><span class="line">&gt; boxplot(american_native,asian,black,latino,hawaiian,white,unknown,main=<span class="string">"Percent of different races/ethnicity"</span>,notch = <span class="literal">T</span>,names = c(<span class="string">"Native"</span>,<span class="string">"Asian"</span>,<span class="string">"Black"</span>,<span class="string">"Latino"</span>,<span class="string">"Hawaiian"</span>,<span class="string">"White"</span>,<span class="string">"Unknown"</span>))</span><br></pre></td></tr></table></figure><figure><img src="https://i.imgur.com/BgnvXTJ.png" alt="Imgur" /><figcaption>Imgur</figcaption></figure><p>Hmmm ... the data range is a little bit drastic this time ...</p><p>Because I myself is Asian, I am curious to see what universities have the highest percentage of Asian students :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; asian_df &lt;- data.frame(name=data$Name,asian_en=asian)</span><br><span class="line">&gt; asian_df &lt;- asian_df[!is.na(asian_df$asian_en),]</span><br><span class="line">&gt; asian_df &lt;- asian_df[order(asian_df$asian_en,decreasing = <span class="literal">T</span>),]</span><br><span class="line">&gt; asian_df &lt;- asian_df[c(<span class="number">1</span>:<span class="number">25</span>),]</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th style="text-align: left;"></th><th style="text-align: left;">Name</th><th style="text-align: left;">Asian_enrollment_rate</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">277</td><td style="text-align: left;">University of Hawaii-West Oahu</td><td style="text-align: left;">40</td></tr><tr class="even"><td style="text-align: left;">84</td><td style="text-align: left;">University of California-Irvine</td><td style="text-align: left;">39</td></tr><tr class="odd"><td style="text-align: left;">275</td><td style="text-align: left;">University of Hawaii at Manoa</td><td style="text-align: left;">36</td></tr><tr class="even"><td style="text-align: left;">87</td><td style="text-align: left;">University of California-San Diego</td><td style="text-align: left;">35</td></tr><tr class="odd"><td style="text-align: left;">86</td><td style="text-align: left;">University of California-Riverside</td><td style="text-align: left;">33</td></tr><tr class="even"><td style="text-align: left;">121</td><td style="text-align: left;">University of the Pacific</td><td style="text-align: left;">32</td></tr><tr class="odd"><td style="text-align: left;">131</td><td style="text-align: left;">San Jose State University</td><td style="text-align: left;">32</td></tr><tr class="even"><td style="text-align: left;">1486</td><td style="text-align: left;">Remington College-Honolulu Campus</td><td style="text-align: left;">32</td></tr><tr class="odd"><td style="text-align: left;">83</td><td style="text-align: left;">University of California-Davis</td><td style="text-align: left;">31</td></tr><tr class="even"><td style="text-align: left;">798</td><td style="text-align: left;">CUNY Bernard M Baruch College</td><td style="text-align: left;">31</td></tr><tr class="odd"><td style="text-align: left;">82</td><td style="text-align: left;">University of California-Berkeley</td><td style="text-align: left;">30</td></tr><tr class="even"><td style="text-align: left;">85</td><td style="text-align: left;">University of California-Los Angeles</td><td style="text-align: left;">28</td></tr><tr class="odd"><td style="text-align: left;">129</td><td style="text-align: left;">San Francisco State University</td><td style="text-align: left;">27</td></tr><tr class="even"><td style="text-align: left;">273</td><td style="text-align: left;">Chaminade University of Honolulu</td><td style="text-align: left;">27</td></tr><tr class="odd"><td style="text-align: left;">65</td><td style="text-align: left;">California Institute of Technology</td><td style="text-align: left;">26</td></tr><tr class="even"><td style="text-align: left;">72</td><td style="text-align: left;">California State Polytechnic University-Pomona</td><td style="text-align: left;">24</td></tr><tr class="odd"><td style="text-align: left;">77</td><td style="text-align: left;">California State University-East Bay</td><td style="text-align: left;">23</td></tr><tr class="even"><td style="text-align: left;">808</td><td style="text-align: left;">CUNY Queens College</td><td style="text-align: left;">23</td></tr><tr class="odd"><td style="text-align: left;">809</td><td style="text-align: left;">CUNY York College</td><td style="text-align: left;">23</td></tr><tr class="even"><td style="text-align: left;">1487</td><td style="text-align: left;">University of Washington-Bothell Campus</td><td style="text-align: left;">23</td></tr><tr class="odd"><td style="text-align: left;">78</td><td style="text-align: left;">California State University-Long Beach</td><td style="text-align: left;">22</td></tr><tr class="even"><td style="text-align: left;">101</td><td style="text-align: left;">Harvey Mudd College</td><td style="text-align: left;">22</td></tr><tr class="odd"><td style="text-align: left;">572</td><td style="text-align: left;">Wellesley College</td><td style="text-align: left;">22</td></tr><tr class="even"><td style="text-align: left;">765</td><td style="text-align: left;">Rutgers University-New Brunswick</td><td style="text-align: left;">22</td></tr><tr class="odd"><td style="text-align: left;">76</td><td style="text-align: left;">California State University-Fullerton</td><td style="text-align: left;">21</td></tr></tbody></table><h4 id="where-will-you-go">Where will you go ?</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; geo_table &lt;- as.data.frame(table(data$Geographic.region))</span><br><span class="line">&gt; percent &lt;- paste(round(geo_table$Freq*<span class="number">100</span>/sum(geo_table$Freq)),<span class="string">"%"</span>)</span><br><span class="line">&gt; pie(geo_table$Freq,labels=paste(geo_table$Var1,percent),main=<span class="string">"Percent of Locations"</span>,col=rainbow(length(geo_table$Var1)))</span><br></pre></td></tr></table></figure><figure><img src="https://i.imgur.com/nqhhoIp.png" alt="Imgur" /><figcaption>Imgur</figcaption></figure><h4 id="sector-of-institutions">Sector of institutions?</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Data source : https://www.kaggle.com/samsonqian/college-admissions/data#&lt;/p&gt;
&lt;p&gt;Huge thanks to the provider of the dataset !
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 109. Convert Sorted List to Binary Search Tree</title>
    <link href="http://yoursite.com/2020/06/06/LeetCode-109-Convert-Sorted-List-to-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2020/06/06/LeetCode-109-Convert-Sorted-List-to-Binary-Search-Tree/</id>
    <published>2020-06-06T05:28:58.000Z</published>
    <updated>2020-06-06T05:30:22.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p><p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Given the sorted linked list: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     &#x2F; \</span><br><span class="line">   -3   9</span><br><span class="line">   &#x2F;   &#x2F;</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortedListToBST = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> list = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(head) &#123;</span><br><span class="line">        list.push(head.val);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">start,end</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((start+end)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(list[mid]);</span><br><span class="line">        root.left = buildTree(start,mid<span class="number">-1</span>);</span><br><span class="line">        root.right = buildTree(mid+<span class="number">1</span>,end);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> buildTree(<span class="number">0</span>,list.length<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.&lt;/p&gt;
&lt;p&gt;For thi
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 164. Maximum Gap</title>
    <link href="http://yoursite.com/2020/06/05/LeetCode-164-Maximum-Gap/"/>
    <id>http://yoursite.com/2020/06/05/LeetCode-164-Maximum-Gap/</id>
    <published>2020-06-04T18:54:32.000Z</published>
    <updated>2020-06-05T06:35:34.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an unsorted array, find the maximum difference between the successive elements in its sorted form.</p><p>Return 0 if the array contains less than 2 elements.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,6,9,1]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The sorted form of the array is [1,3,6,9], either</span><br><span class="line">             (3,6) or (6,9) has the maximum difference 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [10]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The array contains less than 2 elements, therefore return 0.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.</li><li>Try to solve it in linear time/space.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maximumGap = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...nums);</span><br><span class="line">    <span class="keyword">let</span> min = <span class="built_in">Math</span>.min(...nums);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> bucketSize = <span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="built_in">Math</span>.floor((max - min)/ nums.length - <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> buckets = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> bucketId = <span class="built_in">Math</span>.floor((nums[i] - min) / bucketSize);</span><br><span class="line">        buckets[bucketId] = &#123;</span><br><span class="line">            min: <span class="built_in">Math</span>.min(nums[i], buckets[bucketId] ? buckets[bucketId].min : <span class="literal">Infinity</span>),</span><br><span class="line">            max: <span class="built_in">Math</span>.max(nums[i], buckets[bucketId] ? buckets[bucketId].max : -<span class="literal">Infinity</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prevBucketMax = min, maxGap = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Object</span>.values(buckets).forEach(<span class="function">(<span class="params">b</span>) =&gt;</span> &#123;</span><br><span class="line">maxGap = <span class="built_in">Math</span>.max(maxGap, b.min - prevBucketMax);</span><br><span class="line">            prevBucketMax = b.max;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxGap;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// I don't know what goes wrong but it doesn't pass all test cases</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maximumGap = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums || nums.length &lt; <span class="number">2</span>)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> max = <span class="built_in">Math</span>.max(...nums);</span><br><span class="line">    <span class="keyword">const</span> min = <span class="built_in">Math</span>.min(...nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> gap = <span class="built_in">Math</span>.floor((max - min)/(nums.length - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">let</span> bucketsMIN = <span class="built_in">Array</span>(nums.length<span class="number">-1</span>).fill(<span class="built_in">Number</span>.MAX_SAFE_INTEGER); </span><br><span class="line">    <span class="keyword">let</span> bucketsMAX = <span class="built_in">Array</span>(nums.length<span class="number">-1</span>).fill(<span class="built_in">Number</span>.MIN_SAFE_INTEGER); </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i===min || i===max) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">let</span> idx = <span class="built_in">Math</span>.floor((i-min)/gap);</span><br><span class="line">        bucketsMIN[idx] = <span class="built_in">Math</span>.min(i, bucketsMIN[idx]);</span><br><span class="line">        bucketsMAX[idx] = <span class="built_in">Math</span>.max(i, bucketsMAX[idx]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> maxGap = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line">    <span class="keyword">let</span> pre = min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bucketsMAX[i] === <span class="built_in">Number</span>.MIN_SAFE_INTEGER &amp;&amp; bucketsMIN[i] === <span class="built_in">Number</span>.MAX_SAFE_INTEGER)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        maxGap = <span class="built_in">Math</span>.max(maxGap, bucketsMIN[i] - pre);</span><br><span class="line">        pre = bucketsMAX[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    maxGap = <span class="built_in">Math</span>.max(maxGap, max - pre);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxGap;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an unsorted array, find the maximum difference between the successive elements in its sorted form.&lt;/p&gt;
&lt;p&gt;Return 0 if 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 224. Basic Calculator</title>
    <link href="http://yoursite.com/2020/06/04/LeetCode-224-Basic-Calculator/"/>
    <id>http://yoursite.com/2020/06/04/LeetCode-224-Basic-Calculator/</id>
    <published>2020-06-03T18:33:47.000Z</published>
    <updated>2020-06-03T19:38:32.629Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the plus <code>+</code> or minus sign <code>-</code>, <strong>non-negative</strong> integers and empty spaces ``.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;1 + 1&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot; 2-1 + 2 &quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(1+(4+5+2)-3)+(6+8)&quot;</span><br><span class="line">Output: 23</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>You may assume that the given expression is always valid.</li><li><strong>Do not</strong> use the <code>eval</code> built-in library function.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> stack  = [];</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sign = <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> c = s[i];</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">'0'</span> &amp;&amp; c&lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">            num = num*<span class="number">10</span> + <span class="built_in">parseInt</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c===<span class="string">'+'</span> || c===<span class="string">'-'</span>) &#123;</span><br><span class="line">            res += sign*num;</span><br><span class="line">            sign = (stack[stack.length<span class="number">-1</span>]||<span class="number">1</span>)*(c===<span class="string">'+'</span>?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c===<span class="string">'('</span>) &#123;</span><br><span class="line">            stack.push(sign);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c===<span class="string">')'</span>)&#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res+=sign*num;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Implement a basic calculator to evaluate a simple expression string.&lt;/p&gt;
&lt;p&gt;The expression string may contain open &lt;code&gt;(&lt;/
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 117. Populating Next Right Pointers in Each Node II</title>
    <link href="http://yoursite.com/2020/06/03/LeetCode-117-Populating-Next-Right-Pointers-in-Each-Node-II/"/>
    <id>http://yoursite.com/2020/06/03/LeetCode-117-Populating-Next-Right-Pointers-in-Each-Node-II/</id>
    <published>2020-06-02T19:13:32.000Z</published>
    <updated>2020-06-02T19:47:42.430Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p><p>Initially, all next pointers are set to <code>NULL</code>.</p><p><strong>Follow up:</strong></p><ul><li>You may only use constant extra space.</li><li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li></ul><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/02/15/117_sample.png" alt="img" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,4,5,null,7]</span><br><span class="line">Output: [1,#,2,3,#,4,5,7,#]</span><br><span class="line">Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the given tree is less than <code>6000</code>.</li><li><code>-100 &lt;= node.val &lt;= 100</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val, left, right, next) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val === undefined ? null : val;</span></span><br><span class="line"><span class="comment"> *    this.left = left === undefined ? null : left;</span></span><br><span class="line"><span class="comment"> *    this.right = right === undefined ? null : right;</span></span><br><span class="line"><span class="comment"> *    this.next = next === undefined ? null : next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Node&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connect = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">root, h, isRightMost</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="comment">//Connect</span></span><br><span class="line">            <span class="keyword">if</span> (!isRightMost &amp;&amp; map[h]) &#123;</span><br><span class="line">                root.next = map[h];</span><br><span class="line">            &#125;</span><br><span class="line">            map[h] = root;  </span><br><span class="line">            traverse(root.right, h+<span class="number">1</span>, isRightMost);</span><br><span class="line">            traverse(root.left, h+<span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    traverse(root, <span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 116. Populating Next Right Pointers in Each Node</title>
    <link href="http://yoursite.com/2020/06/03/LeetCode-116-Populating-Next-Right-Pointers-in-Each-Node/"/>
    <id>http://yoursite.com/2020/06/03/LeetCode-116-Populating-Next-Right-Pointers-in-Each-Node/</id>
    <published>2020-06-02T18:23:55.000Z</published>
    <updated>2020-06-02T19:12:53.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p><p>Initially, all next pointers are set to <code>NULL</code>.</p><p><strong>Follow up:</strong></p><ul><li>You may only use constant extra space.</li><li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li></ul><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png" alt="img" /><figcaption>img</figcaption></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,4,5,6,7]</span><br><span class="line">Output: [1,#,2,3,#,4,5,6,7,#]</span><br><span class="line">Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the given tree is less than <code>4096</code>.</li><li><code>-1000 &lt;= node.val &lt;= 1000</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val, left, right, next) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val === undefined ? null : val;</span></span><br><span class="line"><span class="comment"> *    this.left = left === undefined ? null : left;</span></span><br><span class="line"><span class="comment"> *    this.right = right === undefined ? null : right;</span></span><br><span class="line"><span class="comment"> *    this.next = next === undefined ? null : next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Node&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> connect = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root || !root.left || !root.right) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">var</span> levelStartNode = root;</span><br><span class="line">    <span class="keyword">while</span> (levelStartNode.left) &#123;</span><br><span class="line">        <span class="comment">// change level</span></span><br><span class="line">        <span class="keyword">var</span> nextLevelStartNode = levelStartNode.left;</span><br><span class="line">        levelStartNode.left.next = levelStartNode.right;</span><br><span class="line">        <span class="keyword">while</span> (levelStartNode.next) &#123;</span><br><span class="line">            <span class="comment">// loop on the same level</span></span><br><span class="line">            levelStartNode.right.next = levelStartNode.next.left;</span><br><span class="line">            levelStartNode = levelStartNode.next;</span><br><span class="line">            levelStartNode.left.next = levelStartNode.right;</span><br><span class="line">        &#125;</span><br><span class="line">        levelStartNode = nextLevelStartNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You are given a &lt;strong&gt;perfect binary tree&lt;/strong&gt; where all leaves are on the same level, and every parent has two childr
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 77. Combinations</title>
    <link href="http://yoursite.com/2020/06/02/LeetCode-77-Combinations/"/>
    <id>http://yoursite.com/2020/06/02/LeetCode-77-Combinations/</id>
    <published>2020-06-01T17:42:12.000Z</published>
    <updated>2020-06-01T17:47:09.772Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given two integers <em>n</em> and <em>k</em>, return all possible combinations of <em>k</em> numbers out of 1 ‚Ä¶ <em>n</em>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: n &#x3D; 4, k &#x3D; 2</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combine = <span class="function"><span class="keyword">function</span>(<span class="params">n, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="built_in">Array</span>(k).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">        p[i]++;</span><br><span class="line">        <span class="keyword">if</span>(p[i]&gt;n) i--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i===k<span class="number">-1</span>) res.push(p.slice(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            p[i] = p[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given two integers &lt;em&gt;n&lt;/em&gt; and &lt;em&gt;k&lt;/em&gt;, return all possible combinations of &lt;em&gt;k&lt;/em&gt; numbers out of 1 ‚Ä¶ &lt;em&gt;n&lt;/em&gt;.&lt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 36. Valid Sudoku</title>
    <link href="http://yoursite.com/2020/06/01/LeetCode-36-Valid-Sudoku/"/>
    <id>http://yoursite.com/2020/06/01/LeetCode-36-Valid-Sudoku/</id>
    <published>2020-06-01T05:28:01.000Z</published>
    <updated>2020-06-01T10:15:17.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p><ol type="1"><li>Each row must contain the digits <code>1-9</code> without repetition.</li><li>Each column must contain the digits <code>1-9</code> without repetition.</li><li>Each of the 9 <code>3x3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li></ol><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="img" /> A partially filled sudoku which is valid.</p><p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>'.'</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Same as Example 1, except with the 5 in the top left corner being </span><br><span class="line">    modified to 8. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li><li>Only the filled cells need to be validated according to the mentioned rules.</li><li>The given board contain only digits <code>1-9</code> and the character <code>'.'</code>.</li><li>The given board size is always <code>9x9</code>.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">board</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidSudoku = <span class="function"><span class="keyword">function</span>(<span class="params">board</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> row = <span class="keyword">new</span> <span class="built_in">Map</span>(),</span><br><span class="line">        col = <span class="keyword">new</span> <span class="built_in">Map</span>(),</span><br><span class="line">        box = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> _row = board[i][j];</span><br><span class="line">        <span class="comment">// by row</span></span><br><span class="line">      <span class="keyword">let</span> _col = board[j][i];</span><br><span class="line">        <span class="comment">// by col</span></span><br><span class="line">      <span class="keyword">let</span> _box = board[<span class="number">3</span>*<span class="built_in">Math</span>.floor(i/<span class="number">3</span>)+<span class="built_in">Math</span>.floor(j/<span class="number">3</span>)][<span class="number">3</span>*(i%<span class="number">3</span>)+(j%<span class="number">3</span>)];</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (_row != <span class="string">'.'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (row.has(_row)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        row.set(_row);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (_col != <span class="string">'.'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (col.has(_col)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        col.set(_col);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (_box != <span class="string">'.'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (box.has(_box)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        box.set(_box);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">      <span class="built_in">console</span>.log(box);</span><br><span class="line">      <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="built_in">Map</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  <span class="string">'5'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'3'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'6'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'9'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'8'</span> =&gt; <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="built_in">Map</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="string">'7'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'1'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'9'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'5'</span> =&gt; <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="built_in">Map</span>(<span class="number">1</span>) &#123; <span class="string">'6'</span> =&gt; <span class="literal">undefined</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="built_in">Map</span>(<span class="number">3</span>) &#123; <span class="string">'8'</span> =&gt; <span class="literal">undefined</span>, <span class="string">'4'</span> =&gt; <span class="literal">undefined</span>, <span class="string">'7'</span> =&gt; <span class="literal">undefined</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="built_in">Map</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="string">'6'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'8'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'3'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'2'</span> =&gt; <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="built_in">Map</span>(<span class="number">3</span>) &#123; <span class="string">'3'</span> =&gt; <span class="literal">undefined</span>, <span class="string">'1'</span> =&gt; <span class="literal">undefined</span>, <span class="string">'6'</span> =&gt; <span class="literal">undefined</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="built_in">Map</span>(<span class="number">1</span>) &#123; <span class="string">'6'</span> =&gt; <span class="literal">undefined</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="built_in">Map</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="string">'4'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'1'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'9'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'8'</span> =&gt; <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="built_in">Map</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  <span class="string">'2'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'8'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'5'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'7'</span> =&gt; <span class="literal">undefined</span>,</span><br><span class="line">  <span class="string">'9'</span> =&gt; <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated &lt;strong&gt;according to the following rule
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 18. 4Sum</title>
    <link href="http://yoursite.com/2020/06/01/LeetCode-18-4Sum/"/>
    <id>http://yoursite.com/2020/06/01/LeetCode-18-4Sum/</id>
    <published>2020-05-31T16:59:10.000Z</published>
    <updated>2020-05-31T19:18:50.839Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate quadruplets.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given array nums &#x3D; [1, 0, -1, 0, -2, 2], and target &#x3D; 0.</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.length - <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">let</span> low = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> high = nums.length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[i] + nums[j] + nums[low] + nums[high];</span><br><span class="line">                <span class="keyword">if</span>(sum === target) &#123;</span><br><span class="line">                    result.push([nums[i], nums[j], nums[low], nums[high]])</span><br><span class="line">                    <span class="keyword">while</span>(nums[low] === nums[low + <span class="number">1</span>]) low++;</span><br><span class="line">                    <span class="keyword">while</span>(nums[high] === nums[high - <span class="number">1</span>]) high--;</span><br><span class="line">                    low++;</span><br><span class="line">                    high--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target) &#123;</span><br><span class="line">                    low++</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    high--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="keyword">while</span>(nums[j] === nums[j + <span class="number">1</span>]) j++;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">while</span>(nums[i] === nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;em&gt;n&lt;/em&gt; integers and an integer &lt;code&gt;target&lt;/code&gt;, are there elements &lt;em&gt;a&lt;/em&gt;, &lt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 814. Binary Tree Pruning</title>
    <link href="http://yoursite.com/2020/05/31/LeetCode-814-Binary-Tree-Pruning/"/>
    <id>http://yoursite.com/2020/05/31/LeetCode-814-Binary-Tree-Pruning/</id>
    <published>2020-05-30T16:21:14.000Z</published>
    <updated>2020-05-30T16:49:18.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li><p>We are given the head node <code>root</code> of a binary tree, where additionally every node‚Äôs value is either a 0 or a 1.</p><p>Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.</p><p>(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [1,null,0,0,1]</span><br><span class="line">Output: [1,null,0,null,1]</span><br><span class="line"> </span><br><span class="line">Explanation: </span><br><span class="line">Only the red nodes satisfy the property &quot;every subtree not containing a 1&quot;.</span><br><span class="line">The diagram on the right represents the answer.</span><br><span class="line">Example 2:</span><br><span class="line">Input: [1,0,1,0,0,0,1]</span><br><span class="line">Output: [1,null,1,null,1]</span><br><span class="line">Example 3:</span><br><span class="line">Input: [1,1,0,1,1,0,1,0]</span><br><span class="line">Output: [1,1,0,1,1,null,1]</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>The binary tree will have at most <code>100 nodes</code>.</li><li>The value of each node will only be <code>0</code> or <code>1</code>.</li></ul></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// recursive method</span></span><br><span class="line"><span class="keyword">var</span> pruneTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    root.right = root.right &amp;&amp; pruneTree(root.right);</span><br><span class="line">    root.left = root.left &amp;&amp; pruneTree(root.left);</span><br><span class="line">    <span class="keyword">return</span> (root.val === <span class="number">0</span> &amp;&amp; !root.right &amp;&amp; !root.left)?<span class="literal">null</span>:root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We are given the head node &lt;code&gt;root&lt;/code&gt; of a binary tree, where additionally every node‚Äôs value is either a 0
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 535. Encode and Decode TinyURL</title>
    <link href="http://yoursite.com/2020/05/30/LeetCode-535-Encode-and-Decode-TinyURL/"/>
    <id>http://yoursite.com/2020/05/30/LeetCode-535-Encode-and-Decode-TinyURL/</id>
    <published>2020-05-29T18:34:39.000Z</published>
    <updated>2020-05-29T18:45:58.139Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>Note: This is a companion problem to the <a href="https://leetcode.com/discuss/interview-question/system-design/" target="_blank" rel="noopener">System Design</a> problem: <a href="https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/" target="_blank" rel="noopener">Design TinyURL</a>.</p></blockquote><p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>.</p><p>Design the <code>encode</code> and <code>decode</code> methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p></blockquote><p>The accepted version, use current date as the key</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encodes a URL to a shortened URL.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">longUrl</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urls = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encode = <span class="function"><span class="keyword">function</span>(<span class="params">longUrl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> uniqueKey = <span class="built_in">Date</span>.now().toString(<span class="number">36</span>);</span><br><span class="line">    urls[uniqueKey] = longUrl;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"http://tinyurl.com/"</span> + uniqueKey;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decode = <span class="function"><span class="keyword">function</span>(<span class="params">shortUrl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> urls[shortUrl.split(<span class="string">"com/"</span>)[<span class="number">1</span>]];</span><br><span class="line">    <span class="comment">// shortUrl.split("com/")[0] is 'http://tinyurl.com/'</span></span><br><span class="line">    <span class="comment">// shortUrl.split("com/")[1] is '4e9iAk'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decodes a shortened URL to its original URL.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">shortUrl</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your functions will be called as such:</span></span><br><span class="line"><span class="comment"> * decode(encode(url));</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>The another version can works in the browser:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use base64 to encode / decode</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encode = <span class="function"><span class="keyword">function</span>(<span class="params">longUrl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> uniqueKey = btoa(longUrl);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"http://tinyurl.com/"</span> + uniqueKey;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decode = <span class="function"><span class="keyword">function</span>(<span class="params">shortUrl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atob(shortUrl.split(<span class="string">"com/"</span>)[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">decode(encode(<span class="string">"https://leetcode.com/problems/encode-and-decode-tinyurl/"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output : "https://leetcode.com/problems/encode-and-decode-tinyurl/"</span></span><br></pre></td></tr></table></figure><h3 id="why-we-shorten-url">Why we shorten url?</h3><p>See this <a href="https://help.twitter.com/en/using-twitter/url-shortener" target="_blank" rel="noopener">post of Twitter</a></p><blockquote><h3 id="why-does-twitter-have-its-own-link-shortener">Why does Twitter have its own link shortener?</h3><ol type="1"><li>Shortened links allow you to share long URLs in a Tweet while maintaining the maximum number of characters for your message.</li><li>Our link service measures information such as how many times a link has been clicked, which is an important quality signal in determining how relevant and interesting each Tweet is when compared to similar Tweets.</li><li>Having a link shortener protects users from malicious sites that engage in spreading malware, phishing attacks, and other harmful activity. A link converted by Twitter‚Äôs link service is checked against a list of potentially dangerous sites. Users are warned with the error message below when clicking on potentially harmful URLs.</li></ol><p>If the URL of a site you manage has been flagged, please see this help page about <a href="https://help.twitter.com/en/safety-and-security/phishing-spam-and-malware-links" target="_blank" rel="noopener">flagged URLs</a> for more information.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This is a companion problem to the &lt;a href=&quot;https://leetcode.com/discuss/interview-question/system-design
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1302. Deepest Leaves Sum</title>
    <link href="http://yoursite.com/2020/05/30/LeetCode-1302-Deepest-Leaves-Sum/"/>
    <id>http://yoursite.com/2020/05/30/LeetCode-1302-Deepest-Leaves-Sum/</id>
    <published>2020-05-29T16:20:25.000Z</published>
    <updated>2020-05-29T16:56:31.476Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, return the sum of values of its deepest leaves.</p><p><strong>Example 1:</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2019/07/31/1483_ex1.png" alt="img" /></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,4,5,null,6,7,null,null,null,null,8]</span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is between <code>1</code> and <code>10^4</code>.</li><li>The value of nodes is between <code>1</code> and <code>100</code>.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="keyword">var</span> deepestLeavesSum = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> que = [];</span><br><span class="line">    que.push(root);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(que.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> size = que.length;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">let</span> top = que.shift();</span><br><span class="line">              sum+=top.val;</span><br><span class="line">              <span class="keyword">if</span>(top.left) que.push(top.left);</span><br><span class="line">              <span class="keyword">if</span>(top.right) que.push(top.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the sum of values of its deepest leaves.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 621. Task Scheduler</title>
    <link href="http://yoursite.com/2020/05/28/LeetCode-621-Task-Scheduler/"/>
    <id>http://yoursite.com/2020/05/28/LeetCode-621-Task-Scheduler/</id>
    <published>2020-05-28T06:25:26.000Z</published>
    <updated>2020-05-29T10:26:06.886Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.</p><p>However, there is a non-negative cooling interval <strong>n</strong> that means between two <strong>same tasks</strong>, there must be at least n intervals that CPU are doing different tasks or just be idle.</p><p>You need to return the <strong>least</strong> number of intervals the CPU will take to finish all the given tasks.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: tasks &#x3D; [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n &#x3D; 2</span><br><span class="line">Output: 8</span><br><span class="line">Explanation: A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of tasks is in the range <code>[1, 10000]</code>.</li><li>The integer <code>n</code> is in the range <code>[0, 100]</code>.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[]&#125;</span> <span class="variable">tasks</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> leastInterval = <span class="function"><span class="keyword">function</span>(<span class="params">tasks, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> maxValCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxVal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> task <span class="keyword">of</span> tasks) &#123;</span><br><span class="line">        <span class="keyword">let</span> tVal = map.has(task) ? map.get(task)+<span class="number">1</span>: <span class="number">1</span>;</span><br><span class="line">        map.set(task, tVal);</span><br><span class="line">        <span class="keyword">if</span>(tVal &gt; maxVal)&#123;</span><br><span class="line">            maxVal = tVal;</span><br><span class="line">            maxValCount = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(tVal === maxVal)&#123;</span><br><span class="line">            maxValCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(tasks.length, (maxVal<span class="number">-1</span>)*(n+<span class="number">1</span>)+maxValCount);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>See this <a href="https://leetcode.com/problems/task-scheduler/discuss/401103/simple-Javascript-idle-slots-1-pass-with-detailed-description" target="_blank" rel="noopener">post</a> for explanation</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent d
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Discrete math notes: deferred acceptance algorithm</title>
    <link href="http://yoursite.com/2020/05/26/Discrete-math-notes-deferred-acceptance-algorithm/"/>
    <id>http://yoursite.com/2020/05/26/Discrete-math-notes-deferred-acceptance-algorithm/</id>
    <published>2020-05-26T02:42:15.000Z</published>
    <updated>2020-05-28T03:45:21.405Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an equal number of men and women to be paired for marriage, each man ranks all the women in order of his preference and each woman ranks all the men in order of her preference.</p><p>A stable set of engagements for marriage is one where no man prefers a woman over the one he is engaged to, where that other woman <em>also</em> prefers that man over the one she is engaged to. I.e. with consulting marriages, there would be no reason for the engagements between the people to change.</p><p><strong>Task Specifics</strong><br />Given ten males:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abe, bob, col, dan, ed, fred, gav, hal, ian, jon</span><br></pre></td></tr></table></figure><p>And ten females:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abi, bea, cath, dee, eve, fay, gay, hope, ivy, jan</span><br></pre></td></tr></table></figure><p>And a complete list of ranked preferences, where the most liked is to the left:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> abe: abi, eve, cath, ivy, jan, dee, fay, bea, hope, gay</span><br><span class="line"> bob: cath, hope, abi, dee, eve, fay, bea, jan, ivy, gay</span><br><span class="line"> col: hope, eve, abi, dee, bea, fay, ivy, gay, cath, jan</span><br><span class="line"> dan: ivy, fay, dee, gay, hope, eve, jan, bea, cath, abi</span><br><span class="line">  ed: jan, dee, bea, cath, fay, eve, abi, ivy, hope, gay</span><br><span class="line">fred: bea, abi, dee, gay, eve, ivy, cath, jan, hope, fay</span><br><span class="line"> gav: gay, eve, ivy, bea, cath, abi, dee, hope, jan, fay</span><br><span class="line"> hal: abi, eve, hope, fay, ivy, cath, jan, bea, gay, dee</span><br><span class="line"> ian: hope, cath, dee, gay, bea, abi, fay, ivy, jan, eve</span><br><span class="line"> jon: abi, fay, jan, gay, eve, bea, dee, cath, ivy, hope</span><br><span class="line">  </span><br><span class="line"> abi: bob, fred, jon, gav, ian, abe, dan, ed, col, hal</span><br><span class="line"> bea: bob, abe, col, fred, gav, dan, ian, ed, jon, hal</span><br><span class="line">cath: fred, bob, ed, gav, hal, col, ian, abe, dan, jon</span><br><span class="line"> dee: fred, jon, col, abe, ian, hal, gav, dan, bob, ed</span><br><span class="line"> eve: jon, hal, fred, dan, abe, gav, col, ed, ian, bob</span><br><span class="line"> fay: bob, abe, ed, ian, jon, dan, fred, gav, col, hal</span><br><span class="line"> gay: jon, gav, hal, fred, bob, abe, col, ed, dan, ian</span><br><span class="line">hope: gav, jon, bob, abe, ian, dan, hal, ed, col, fred</span><br><span class="line"> ivy: ian, col, hal, gav, fred, bob, abe, ed, jon, dan</span><br><span class="line"> jan: ed, hal, gav, abe, bob, jon, col, ian, fred, dan</span><br></pre></td></tr></table></figure><ol><li>Use the Gale Shapley algorithm to find a stable set of engagements</li><li>Perturb this set of engagements to form an unstable set of engagements then check this new set for stability.</li></ol></blockquote><p>Please see this <a href="http://www.ams.org/publicoutreach/feature-column/fc-2015-03" target="_blank" rel="noopener">post</a> for explanation</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.par = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.candidates = [];</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.rank = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.candidates.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.candidates[i] === p) <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="comment">// return your rank among all the candidates</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.prefers = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rank(p) &lt; <span class="keyword">this</span>.rank(<span class="keyword">this</span>.fiance);</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="comment">// return if this person is preferable than this fiance</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.nextCandidate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.index &gt;= <span class="keyword">this</span>.candidates.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.candidates[<span class="keyword">this</span>.index++];</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="comment">// return the next candidate</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.engageTo = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.fiance) p.fiance.fiance = <span class="literal">null</span>;</span><br><span class="line">        p.fiance = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fiance) <span class="keyword">this</span>.fiance.fiance = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.fiance = p;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="comment">// break up the current relationshaips and bond p with this person</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.swapWith = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"%s &amp; %s swap partners"</span>, <span class="keyword">this</span>.name, p.name);</span><br><span class="line">        <span class="keyword">let</span> thisFiance = <span class="keyword">this</span>.fiance;</span><br><span class="line">        <span class="keyword">let</span>  pFiance = p.fiance;</span><br><span class="line">        <span class="keyword">this</span>.engageTo(pFiance);</span><br><span class="line">        p.engageTo(thisFiance);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// p &amp; p.fiance , this &amp; this.finance =&gt; this &amp; p.fiance &amp; p &amp; this.fiance</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStable</span>(<span class="params">guys, gals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; guys.length; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; gals.length; j++)</span><br><span class="line">            <span class="keyword">if</span> (guys[i].prefers(gals[j]) &amp;&amp; gals[j].prefers(guys[i]))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if the guy's rank is not lower than the gal's current partner and vise versa then they are a stable couple</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">engageEveryone</span>(<span class="params">guys</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> done;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; guys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> guy = guys[i];</span><br><span class="line">            <span class="keyword">if</span> (!guy.fiance) &#123;</span><br><span class="line">                done = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">let</span> gal = guy.nextCandidate();</span><br><span class="line">              <span class="comment">// the guy propose to the next candidate he likes the most no matter whether she is engaged</span></span><br><span class="line">                <span class="keyword">if</span> (!gal.fiance || gal.prefers(guy))</span><br><span class="line">              <span class="comment">// if the gal is single or she prefer the guy than her current partner then she will choose the guy</span></span><br><span class="line">                    guy.engageTo(gal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!done);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doMarriage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> abe  = <span class="keyword">new</span> Person(<span class="string">"Abe"</span>);</span><br><span class="line">    <span class="keyword">let</span> bob  = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>);</span><br><span class="line">    <span class="keyword">let</span> col  = <span class="keyword">new</span> Person(<span class="string">"Col"</span>);</span><br><span class="line">    <span class="keyword">let</span> dan  = <span class="keyword">new</span> Person(<span class="string">"Dan"</span>);</span><br><span class="line">    <span class="keyword">let</span> ed   = <span class="keyword">new</span> Person(<span class="string">"Ed"</span>);</span><br><span class="line">    <span class="keyword">let</span> fred = <span class="keyword">new</span> Person(<span class="string">"Fred"</span>);</span><br><span class="line">    <span class="keyword">let</span> gav  = <span class="keyword">new</span> Person(<span class="string">"Gav"</span>);</span><br><span class="line">    <span class="keyword">let</span> hal  = <span class="keyword">new</span> Person(<span class="string">"Hal"</span>);</span><br><span class="line">    <span class="keyword">let</span> ian  = <span class="keyword">new</span> Person(<span class="string">"Ian"</span>);</span><br><span class="line">    <span class="keyword">let</span> jon  = <span class="keyword">new</span> Person(<span class="string">"Jon"</span>);</span><br><span class="line">    <span class="keyword">let</span> abi  = <span class="keyword">new</span> Person(<span class="string">"Abi"</span>);</span><br><span class="line">    <span class="keyword">let</span> bea  = <span class="keyword">new</span> Person(<span class="string">"Bea"</span>);</span><br><span class="line">    <span class="keyword">let</span> cath = <span class="keyword">new</span> Person(<span class="string">"Cath"</span>);</span><br><span class="line">    <span class="keyword">let</span> dee  = <span class="keyword">new</span> Person(<span class="string">"Dee"</span>);</span><br><span class="line">    <span class="keyword">let</span> eve  = <span class="keyword">new</span> Person(<span class="string">"Eve"</span>);</span><br><span class="line">    <span class="keyword">let</span> fay  = <span class="keyword">new</span> Person(<span class="string">"Fay"</span>);</span><br><span class="line">    <span class="keyword">let</span> gay  = <span class="keyword">new</span> Person(<span class="string">"Gay"</span>);</span><br><span class="line">    <span class="keyword">let</span> hope = <span class="keyword">new</span> Person(<span class="string">"Hope"</span>);</span><br><span class="line">    <span class="keyword">let</span> ivy  = <span class="keyword">new</span> Person(<span class="string">"Ivy"</span>);</span><br><span class="line">    <span class="keyword">let</span> jan  = <span class="keyword">new</span> Person(<span class="string">"Jan"</span>);</span><br><span class="line"></span><br><span class="line">    abe.candidates  = [abi, eve, cath, ivy, jan, dee, fay, bea, hope, gay];</span><br><span class="line">    bob.candidates  = [cath, hope, abi, dee, eve, fay, bea, jan, ivy, gay];</span><br><span class="line">    col.candidates  = [hope, eve, abi, dee, bea, fay, ivy, gay, cath, jan];</span><br><span class="line">    dan.candidates  = [ivy, fay, dee, gay, hope, eve, jan, bea, cath, abi];</span><br><span class="line">    ed.candidates   = [jan, dee, bea, cath, fay, eve, abi, ivy, hope, gay];</span><br><span class="line">    fred.candidates = [bea, abi, dee, gay, eve, ivy, cath, jan, hope, fay];</span><br><span class="line">    gav.candidates  = [gay, eve, ivy, bea, cath, abi, dee, hope, jan, fay];</span><br><span class="line">    hal.candidates  = [abi, eve, hope, fay, ivy, cath, jan, bea, gay, dee];</span><br><span class="line">    ian.candidates  = [hope, cath, dee, gay, bea, abi, fay, ivy, jan, eve];</span><br><span class="line">    jon.candidates  = [abi, fay, jan, gay, eve, bea, dee, cath, ivy, hope];</span><br><span class="line">    abi.candidates  = [bob, fred, jon, gav, ian, abe, dan, ed, col, hal];</span><br><span class="line">    bea.candidates  = [bob, abe, col, fred, gav, dan, ian, ed, jon, hal];</span><br><span class="line">    cath.candidates = [fred, bob, ed, gav, hal, col, ian, abe, dan, jon];</span><br><span class="line">    dee.candidates  = [fred, jon, col, abe, ian, hal, gav, dan, bob, ed];</span><br><span class="line">    eve.candidates  = [jon, hal, fred, dan, abe, gav, col, ed, ian, bob];</span><br><span class="line">    fay.candidates  = [bob, abe, ed, ian, jon, dan, fred, gav, col, hal];</span><br><span class="line">    gay.candidates  = [jon, gav, hal, fred, bob, abe, col, ed, dan, ian];</span><br><span class="line">    hope.candidates = [gav, jon, bob, abe, ian, dan, hal, ed, col, fred];</span><br><span class="line">    ivy.candidates  = [ian, col, hal, gav, fred, bob, abe, ed, jon, dan];</span><br><span class="line">    jan.candidates  = [ed, hal, gav, abe, bob, jon, col, ian, fred, dan];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> guys = [abe, bob, col, dan, ed, fred, gav, hal, ian, jon];</span><br><span class="line">    <span class="keyword">let</span> gals = [abi, bea, cath, dee, eve, fay, gay, hope, ivy, jan];</span><br><span class="line"></span><br><span class="line">    engageEveryone(guys);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; guys.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"%s is engaged to %s"</span>, guys[i].name, guys[i].fiance.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Stable = %s"</span>, isStable(guys, gals) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">    jon.swapWith(fred);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Stable = %s"</span>, isStable(guys, gals) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doMarriage();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">Abe is engaged to Ivy</span><br><span class="line">Bob is engaged to Cath</span><br><span class="line">Col is engaged to Dee</span><br><span class="line">Dan is engaged to Fay</span><br><span class="line">Ed is engaged to Jan</span><br><span class="line">Fred is engaged to Bea</span><br><span class="line">Gav is engaged to Gay</span><br><span class="line">Hal is engaged to Eve</span><br><span class="line">Ian is engaged to Hope</span><br><span class="line">Jon is engaged to Abi</span><br><span class="line">Stable = Yes</span><br><span class="line">Jon &amp; Fred swap partners</span><br><span class="line">Stable = No</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an equal number of men and women to be paired for marriage, each man ranks all the women in order of his preference an
      
    
    </summary>
    
    
    
      <category term="Discrete math" scheme="http://yoursite.com/tags/Discrete-math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 337. House Robber III</title>
    <link href="http://yoursite.com/2020/05/25/LeetCode-337-House-Robber-III/"/>
    <id>http://yoursite.com/2020/05/25/LeetCode-337-House-Robber-III/</id>
    <published>2020-05-25T05:00:17.000Z</published>
    <updated>2020-05-25T05:17:19.784Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the ‚Äúroot.‚Äù Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that ‚Äúall houses in this place forms a binary tree‚Äù. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p><p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,3,null,3,null,1]</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   3</span><br><span class="line">    \   \ </span><br><span class="line">     3   1</span><br><span class="line"></span><br><span class="line">Output: 7 </span><br><span class="line">Explanation: Maximum amount of money the thief can rob &#x3D; 3 + 3 + 1 &#x3D; 7.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,4,5,1,3,null,1]</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    &#x2F; \</span><br><span class="line">   4   5</span><br><span class="line">  &#x2F; \   \ </span><br><span class="line"> 1   3   1</span><br><span class="line"></span><br><span class="line">Output: 9</span><br><span class="line">Explanation: Maximum amount of money the thief can rob &#x3D; 4 + 5 &#x3D; 9.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = robSub(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(res[<span class="number">0</span>],res[<span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> robSub = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> left = robSub(root.left);</span><br><span class="line">    <span class="keyword">const</span> right = robSub(root.right);</span><br><span class="line">    <span class="keyword">let</span> res = [<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">    res[<span class="number">0</span>] = <span class="built_in">Math</span>.max(left[<span class="number">0</span>],left[<span class="number">1</span>])+<span class="built_in">Math</span>.max(right[<span class="number">0</span>],right[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// res[0] means skip the current node and get the node.left and node.right</span></span><br><span class="line">    res[<span class="number">1</span>] = root.val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// res[1] means rob the current nod and get node.next.left &amp; node.next.right</span></span><br><span class="line">    <span class="built_in">console</span>.log(res[<span class="number">0</span>],res[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">    / \</span><br><span class="line">   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">    \   \ </span><br><span class="line">     <span class="number">3</span>   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Output: <span class="number">7</span> </span><br><span class="line">Explanation: Maximum amount <span class="keyword">of</span> money the thief can rob = <span class="number">3</span> + <span class="number">3</span> + <span class="number">1</span> = <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">Your input</span><br><span class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br><span class="line">stdout</span><br><span class="line"><span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line"><span class="number">7</span></span><br><span class="line">Expected</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the ‚Äúroot.‚Äù 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 85. Maximal Rectangle</title>
    <link href="http://yoursite.com/2020/05/24/LeetCode-85-Maximal-Rectangle/"/>
    <id>http://yoursite.com/2020/05/24/LeetCode-85-Maximal-Rectangle/</id>
    <published>2020-05-24T01:54:04.000Z</published>
    <updated>2020-05-24T12:05:42.037Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a 2D binary matrix filled with 0‚Äôs and 1‚Äôs, find the largest rectangle containing only 1‚Äôs and return its area.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maximalRectangle = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!matrix || matrix.length===<span class="number">0</span> || matrix[<span class="number">0</span>].length===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> height = matrix.length;</span><br><span class="line">    <span class="keyword">const</span> width = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">const</span> lefts = matrix[<span class="number">0</span>].map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> rights = matrix[<span class="number">0</span>].map(<span class="function"><span class="params">()</span> =&gt;</span> width);</span><br><span class="line">    <span class="keyword">const</span> heights = lefts.slice();</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; height; row++) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> right = width;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[row][i] === <span class="string">'1'</span>) &#123;</span><br><span class="line">            lefts[i] = <span class="built_in">Math</span>.max(left,lefts[i]);</span><br><span class="line">            heights[i]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lefts[i] = heights[i] = <span class="number">0</span>;</span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> rightIdx = width - <span class="number">1</span> - i;</span><br><span class="line">        <span class="keyword">if</span> (matrix[row][rightIdx] === <span class="string">'1'</span>) &#123;</span><br><span class="line">            rights[rightIdx] = <span class="built_in">Math</span>.min(right, rights[rightIdx])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rights[rightIdx] = width;</span><br><span class="line">            right = rightIdx;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max,(rights[i] - lefts[i]) * heights[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maximalRectangle = <span class="function"><span class="keyword">function</span> (<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = matrix.length;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> m = matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> h = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] === <span class="string">'1'</span>) h[i]++;</span><br><span class="line">            <span class="keyword">else</span> h[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> k1 = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (k1 &gt;= <span class="number">0</span> &amp;&amp; h[i] &lt;= h[k1]) k1--;</span><br><span class="line">            <span class="keyword">let</span> k2 = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (k2 &lt; n &amp;&amp; h[i] &lt;= h[k2]) k2++;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(max, h[i] * (k2 - k1 - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a 2D binary matrix filled with 0‚Äôs and 1‚Äôs, find the largest rectangle containing only 1‚Äôs and return its area.&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 494. Target Sum</title>
    <link href="http://yoursite.com/2020/05/23/LeetCode-494-Target-Sum/"/>
    <id>http://yoursite.com/2020/05/23/LeetCode-494-Target-Sum/</id>
    <published>2020-05-23T07:17:46.000Z</published>
    <updated>2020-05-23T08:44:19.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols <code>+</code> and <code>-</code>. For each integer, you should choose one from <code>+</code> and <code>-</code> as its new symbol.</p><p>Find out how many ways to assign symbols to make sum of integers equal to target S.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: nums is [1, 1, 1, 1, 1], S is 3. </span><br><span class="line">Output: 5</span><br><span class="line">Explanation: </span><br><span class="line"></span><br><span class="line">-1+1+1+1+1 &#x3D; 3</span><br><span class="line">+1-1+1+1+1 &#x3D; 3</span><br><span class="line">+1+1-1+1+1 &#x3D; 3</span><br><span class="line">+1+1+1-1+1 &#x3D; 3</span><br><span class="line">+1+1+1+1-1 &#x3D; 3</span><br><span class="line"></span><br><span class="line">There are 5 ways to assign symbols to make the sum of nums be target 3.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol type="1"><li>The length of the given array is positive and will not exceed 20.</li><li>The sum of elements in the given array will not exceed 1000.</li><li>Your output answer is guaranteed to be fitted in a 32-bit integer.</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">S</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// classic knapsack </span></span><br><span class="line"><span class="keyword">var</span> findTargetSumWays = <span class="function"><span class="keyword">function</span>(<span class="params">nums, S</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    nums.forEach(<span class="function"><span class="params">num</span> =&gt;</span> &#123;sum+=num&#125;);</span><br><span class="line">    <span class="keyword">if</span>(S&lt;-sum || S&gt;sum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> dp = [];</span><br><span class="line">  <span class="comment">// dp[i][j] : the number of ways for first i-th element to reach a sum j</span></span><br><span class="line">  <span class="comment">// dp[i][j] = dp[i-1][j+nums[i]] + dp[i-1][j-nums[i]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=nums.length;i++) &#123;</span><br><span class="line">        dp.push(<span class="built_in">Array</span>(<span class="number">2</span>*sum+<span class="number">1</span>).fill(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>+sum] = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// at 0th step, the solution number to sum = 0 is 1.</span></span><br><span class="line">  <span class="comment">// The range of sum of all elements is [-sum, sum].</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i&lt;=nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * sum + <span class="number">1</span>; j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(j+nums[i<span class="number">-1</span>]&lt;<span class="number">2</span>*sum+<span class="number">1</span>) dp[i][j]+=dp[i<span class="number">-1</span>][j+nums[i<span class="number">-1</span>]];</span><br><span class="line">          <span class="keyword">if</span>(j-nums[i<span class="number">-1</span>]&gt;=<span class="number">0</span>) dp[i][j] += dp[i<span class="number">-1</span>][j-nums[i<span class="number">-1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dp[nums.length][sum + S];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>For explanation, see this <a href="https://leetcode.com/problems/target-sum/discuss/97335/Short-Java-DP-Solution-with-Explanation/101899" target="_blank" rel="noopener">post</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols &lt;code&gt;+&lt;/code&gt; and &lt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 240. Search a 2D Matrix II</title>
    <link href="http://yoursite.com/2020/05/23/LeetCode-240-Search-a-2D-Matrix-II/"/>
    <id>http://yoursite.com/2020/05/23/LeetCode-240-Search-a-2D-Matrix-II/</id>
    <published>2020-05-23T06:23:21.000Z</published>
    <updated>2020-05-23T07:15:51.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p><ul><li>Integers in each row are sorted in ascending from left to right.</li><li>Integers in each column are sorted in ascending from top to bottom.</li></ul><p><strong>Example:</strong></p><p>Consider the following matrix:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Given target = <code>5</code>, return <code>true</code>.</p><p>Given target = <code>20</code>, return <code>false</code>.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// O(m+n)</span></span><br><span class="line"><span class="keyword">var</span> searchMatrix = <span class="function"><span class="keyword">function</span>(<span class="params">matrix, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!matrix || matrix.length===<span class="number">0</span> || matrix[<span class="number">0</span>].length===<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> row = <span class="number">0</span>, col = matrix[<span class="number">0</span>].length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(col&gt;=<span class="number">0</span> &amp;&amp; row&lt;matrix.length) &#123;</span><br><span class="line">        <span class="keyword">if</span>(target===matrix[row][col]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;matrix[row][col]) &#123;</span><br><span class="line">            col--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            row++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Write an efficient algorithm that searches for a value in an &lt;em&gt;m&lt;/em&gt; x &lt;em&gt;n&lt;/em&gt; matrix. This matrix has the following p
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 238. Product of Array Except Self</title>
    <link href="http://yoursite.com/2020/05/22/LeetCode-238-Product-of-Array-Except-Self/"/>
    <id>http://yoursite.com/2020/05/22/LeetCode-238-Product-of-Array-Except-Self/</id>
    <published>2020-05-22T11:04:51.000Z</published>
    <updated>2020-05-23T01:28:42.935Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1, return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure><p><strong>Constraint:</strong> It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.</p><p><strong>Note:</strong> Please solve it <strong>without division</strong> and in O(<em>n</em>).</p><p><strong>Follow up:</strong> Could you solve it with constant space complexity? (The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p></blockquote><p>The thought is :</p><p>divide into two parts the left part and the right part</p><table><thead><tr class="header"><th style="text-align: center;">i</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Left</td><td style="text-align: center;">1(default)</td><td style="text-align: center;">1</td><td style="text-align: center;">1 * 2</td><td style="text-align: center;">1 * 2 * 3</td></tr><tr class="even"><td style="text-align: center;">Right</td><td style="text-align: center;">2 * 3 * 4</td><td style="text-align: center;">3 * 4</td><td style="text-align: center;">4</td><td style="text-align: center;">1(default)</td></tr><tr class="odd"><td style="text-align: center;">Product=left*right</td><td style="text-align: center;">24</td><td style="text-align: center;">12</td><td style="text-align: center;">8</td><td style="text-align: center;">6</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> left = [<span class="number">1</span>], right = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> output = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        left.push(left[i<span class="number">-1</span>]*nums[i<span class="number">-1</span>]);</span><br><span class="line">        right.unshift(right[right.length-i]*nums[nums.length-i]);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;nums.length;j++) &#123;</span><br><span class="line">        output.push(left[j]*right[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// space :O(N)</span></span><br><span class="line"><span class="comment">// time : O(N)</span></span><br></pre></td></tr></table></figure><p>Slightly space improved version :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">1</span>, right = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> output = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        output.push(left);</span><br><span class="line">        left *= nums[i];</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=nums.length<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">        output[j]=right*output[j];</span><br><span class="line">        right *= nums[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;em&gt;n&lt;/em&gt; integers where &lt;em&gt;n&lt;/em&gt; &amp;gt; 1, return an array &lt;code&gt;output&lt;/code&gt; such th
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
