<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-27T15:47:00.440Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Discrete math notes: deferred acceptance algorithm</title>
    <link href="http://yoursite.com/2020/05/26/Discrete-math-notes-deferred-acceptance-algorithm/"/>
    <id>http://yoursite.com/2020/05/26/Discrete-math-notes-deferred-acceptance-algorithm/</id>
    <published>2020-05-26T02:42:15.000Z</published>
    <updated>2020-05-27T15:47:00.440Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an equal number of men and women to be paired for marriage, each man ranks all the women in order of his preference and each woman ranks all the men in order of her preference.</p><p>A stable set of engagements for marriage is one where no man prefers a woman over the one he is engaged to, where that other woman <em>also</em> prefers that man over the one she is engaged to. I.e. with consulting marriages, there would be no reason for the engagements between the people to change.</p><p><strong>Task Specifics</strong> Given ten males:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abe, bob, col, dan, ed, fred, gav, hal, ian, jon</span><br></pre></td></tr></table></figure><p>And ten females:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abi, bea, cath, dee, eve, fay, gay, hope, ivy, jan</span><br></pre></td></tr></table></figure><p>And a complete list of ranked preferences, where the most liked is to the left:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> abe: abi, eve, cath, ivy, jan, dee, fay, bea, hope, gay</span><br><span class="line"> bob: cath, hope, abi, dee, eve, fay, bea, jan, ivy, gay</span><br><span class="line"> col: hope, eve, abi, dee, bea, fay, ivy, gay, cath, jan</span><br><span class="line"> dan: ivy, fay, dee, gay, hope, eve, jan, bea, cath, abi</span><br><span class="line">  ed: jan, dee, bea, cath, fay, eve, abi, ivy, hope, gay</span><br><span class="line">fred: bea, abi, dee, gay, eve, ivy, cath, jan, hope, fay</span><br><span class="line"> gav: gay, eve, ivy, bea, cath, abi, dee, hope, jan, fay</span><br><span class="line"> hal: abi, eve, hope, fay, ivy, cath, jan, bea, gay, dee</span><br><span class="line"> ian: hope, cath, dee, gay, bea, abi, fay, ivy, jan, eve</span><br><span class="line"> jon: abi, fay, jan, gay, eve, bea, dee, cath, ivy, hope</span><br><span class="line">  </span><br><span class="line"> abi: bob, fred, jon, gav, ian, abe, dan, ed, col, hal</span><br><span class="line"> bea: bob, abe, col, fred, gav, dan, ian, ed, jon, hal</span><br><span class="line">cath: fred, bob, ed, gav, hal, col, ian, abe, dan, jon</span><br><span class="line"> dee: fred, jon, col, abe, ian, hal, gav, dan, bob, ed</span><br><span class="line"> eve: jon, hal, fred, dan, abe, gav, col, ed, ian, bob</span><br><span class="line"> fay: bob, abe, ed, ian, jon, dan, fred, gav, col, hal</span><br><span class="line"> gay: jon, gav, hal, fred, bob, abe, col, ed, dan, ian</span><br><span class="line">hope: gav, jon, bob, abe, ian, dan, hal, ed, col, fred</span><br><span class="line"> ivy: ian, col, hal, gav, fred, bob, abe, ed, jon, dan</span><br><span class="line"> jan: ed, hal, gav, abe, bob, jon, col, ian, fred, dan</span><br></pre></td></tr></table></figure><ol type="1"><li>Use the Gale Shapley algorithm to find a stable set of engagements</li><li>Perturb this set of engagements to form an unstable set of engagements then check this new set for stability.</li></ol></blockquote><p>Please see this <a href="http://www.matrix67.com/blog/archives/2976" target="_blank" rel="noopener">post</a> for explanation</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.par = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.candidates = [];</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.rank = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.candidates.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.candidates[i] === p) <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.prefers = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rank(p) &lt; <span class="keyword">this</span>.rank(<span class="keyword">this</span>.fiance);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.nextCandidate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.index &gt;= <span class="keyword">this</span>.candidates.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.candidates[<span class="keyword">this</span>.index++];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.engageTo = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.fiance) p.fiance.fiance = <span class="literal">null</span>;</span><br><span class="line">        p.fiance = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fiance) <span class="keyword">this</span>.fiance.fiance = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.fiance = p;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.swapWith = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"%s &amp; %s swap partners"</span>, <span class="keyword">this</span>.name, p.name);</span><br><span class="line">        <span class="keyword">let</span> thisFiance = <span class="keyword">this</span>.fiance;</span><br><span class="line">        <span class="keyword">let</span>  pFiance = p.fiance;</span><br><span class="line">        <span class="keyword">this</span>.engageTo(pFiance);</span><br><span class="line">        p.engageTo(thisFiance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStable</span>(<span class="params">guys, gals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; guys.length; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; gals.length; j++)</span><br><span class="line">            <span class="keyword">if</span> (guys[i].prefers(gals[j]) &amp;&amp; gals[j].prefers(guys[i]))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">engageEveryone</span>(<span class="params">guys</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> done;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; guys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> guy = guys[i];</span><br><span class="line">            <span class="keyword">if</span> (!guy.fiance) &#123;</span><br><span class="line">                done = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">let</span> gal = guy.nextCandidate();</span><br><span class="line">                <span class="keyword">if</span> (!gal.fiance || gal.prefers(guy))</span><br><span class="line">                    guy.engageTo(gal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!done);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doMarriage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> abe  = <span class="keyword">new</span> Person(<span class="string">"Abe"</span>);</span><br><span class="line">    <span class="keyword">let</span> bob  = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>);</span><br><span class="line">    <span class="keyword">let</span> col  = <span class="keyword">new</span> Person(<span class="string">"Col"</span>);</span><br><span class="line">    <span class="keyword">let</span> dan  = <span class="keyword">new</span> Person(<span class="string">"Dan"</span>);</span><br><span class="line">    <span class="keyword">let</span> ed   = <span class="keyword">new</span> Person(<span class="string">"Ed"</span>);</span><br><span class="line">    <span class="keyword">let</span> fred = <span class="keyword">new</span> Person(<span class="string">"Fred"</span>);</span><br><span class="line">    <span class="keyword">let</span> gav  = <span class="keyword">new</span> Person(<span class="string">"Gav"</span>);</span><br><span class="line">    <span class="keyword">let</span> hal  = <span class="keyword">new</span> Person(<span class="string">"Hal"</span>);</span><br><span class="line">    <span class="keyword">let</span> ian  = <span class="keyword">new</span> Person(<span class="string">"Ian"</span>);</span><br><span class="line">    <span class="keyword">let</span> jon  = <span class="keyword">new</span> Person(<span class="string">"Jon"</span>);</span><br><span class="line">    <span class="keyword">let</span> abi  = <span class="keyword">new</span> Person(<span class="string">"Abi"</span>);</span><br><span class="line">    <span class="keyword">let</span> bea  = <span class="keyword">new</span> Person(<span class="string">"Bea"</span>);</span><br><span class="line">    <span class="keyword">let</span> cath = <span class="keyword">new</span> Person(<span class="string">"Cath"</span>);</span><br><span class="line">    <span class="keyword">let</span> dee  = <span class="keyword">new</span> Person(<span class="string">"Dee"</span>);</span><br><span class="line">    <span class="keyword">let</span> eve  = <span class="keyword">new</span> Person(<span class="string">"Eve"</span>);</span><br><span class="line">    <span class="keyword">let</span> fay  = <span class="keyword">new</span> Person(<span class="string">"Fay"</span>);</span><br><span class="line">    <span class="keyword">let</span> gay  = <span class="keyword">new</span> Person(<span class="string">"Gay"</span>);</span><br><span class="line">    <span class="keyword">let</span> hope = <span class="keyword">new</span> Person(<span class="string">"Hope"</span>);</span><br><span class="line">    <span class="keyword">let</span> ivy  = <span class="keyword">new</span> Person(<span class="string">"Ivy"</span>);</span><br><span class="line">    <span class="keyword">let</span> jan  = <span class="keyword">new</span> Person(<span class="string">"Jan"</span>);</span><br><span class="line"></span><br><span class="line">    abe.candidates  = [abi, eve, cath, ivy, jan, dee, fay, bea, hope, gay];</span><br><span class="line">    bob.candidates  = [cath, hope, abi, dee, eve, fay, bea, jan, ivy, gay];</span><br><span class="line">    col.candidates  = [hope, eve, abi, dee, bea, fay, ivy, gay, cath, jan];</span><br><span class="line">    dan.candidates  = [ivy, fay, dee, gay, hope, eve, jan, bea, cath, abi];</span><br><span class="line">    ed.candidates   = [jan, dee, bea, cath, fay, eve, abi, ivy, hope, gay];</span><br><span class="line">    fred.candidates = [bea, abi, dee, gay, eve, ivy, cath, jan, hope, fay];</span><br><span class="line">    gav.candidates  = [gay, eve, ivy, bea, cath, abi, dee, hope, jan, fay];</span><br><span class="line">    hal.candidates  = [abi, eve, hope, fay, ivy, cath, jan, bea, gay, dee];</span><br><span class="line">    ian.candidates  = [hope, cath, dee, gay, bea, abi, fay, ivy, jan, eve];</span><br><span class="line">    jon.candidates  = [abi, fay, jan, gay, eve, bea, dee, cath, ivy, hope];</span><br><span class="line">    abi.candidates  = [bob, fred, jon, gav, ian, abe, dan, ed, col, hal];</span><br><span class="line">    bea.candidates  = [bob, abe, col, fred, gav, dan, ian, ed, jon, hal];</span><br><span class="line">    cath.candidates = [fred, bob, ed, gav, hal, col, ian, abe, dan, jon];</span><br><span class="line">    dee.candidates  = [fred, jon, col, abe, ian, hal, gav, dan, bob, ed];</span><br><span class="line">    eve.candidates  = [jon, hal, fred, dan, abe, gav, col, ed, ian, bob];</span><br><span class="line">    fay.candidates  = [bob, abe, ed, ian, jon, dan, fred, gav, col, hal];</span><br><span class="line">    gay.candidates  = [jon, gav, hal, fred, bob, abe, col, ed, dan, ian];</span><br><span class="line">    hope.candidates = [gav, jon, bob, abe, ian, dan, hal, ed, col, fred];</span><br><span class="line">    ivy.candidates  = [ian, col, hal, gav, fred, bob, abe, ed, jon, dan];</span><br><span class="line">    jan.candidates  = [ed, hal, gav, abe, bob, jon, col, ian, fred, dan];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> guys = [abe, bob, col, dan, ed, fred, gav, hal, ian, jon];</span><br><span class="line">    <span class="keyword">let</span> gals = [abi, bea, cath, dee, eve, fay, gay, hope, ivy, jan];</span><br><span class="line"></span><br><span class="line">    engageEveryone(guys);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; guys.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"%s is engaged to %s"</span>, guys[i].name, guys[i].fiance.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Stable = %s"</span>, isStable(guys, gals) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">    jon.swapWith(fred);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Stable = %s"</span>, isStable(guys, gals) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doMarriage();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an equal number of men and women to be paired for marriage, each man ranks all the women in order of his preference an
      
    
    </summary>
    
    
    
      <category term="Discrete math" scheme="http://yoursite.com/tags/Discrete-math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 337. House Robber III</title>
    <link href="http://yoursite.com/2020/05/25/LeetCode-337-House-Robber-III/"/>
    <id>http://yoursite.com/2020/05/25/LeetCode-337-House-Robber-III/</id>
    <published>2020-05-25T05:00:17.000Z</published>
    <updated>2020-05-25T05:17:19.784Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that “all houses in this place forms a binary tree”. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p><p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,3,null,3,null,1]</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   3</span><br><span class="line">    \   \ </span><br><span class="line">     3   1</span><br><span class="line"></span><br><span class="line">Output: 7 </span><br><span class="line">Explanation: Maximum amount of money the thief can rob &#x3D; 3 + 3 + 1 &#x3D; 7.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,4,5,1,3,null,1]</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    &#x2F; \</span><br><span class="line">   4   5</span><br><span class="line">  &#x2F; \   \ </span><br><span class="line"> 1   3   1</span><br><span class="line"></span><br><span class="line">Output: 9</span><br><span class="line">Explanation: Maximum amount of money the thief can rob &#x3D; 4 + 5 &#x3D; 9.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = robSub(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(res[<span class="number">0</span>],res[<span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> robSub = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> left = robSub(root.left);</span><br><span class="line">    <span class="keyword">const</span> right = robSub(root.right);</span><br><span class="line">    <span class="keyword">let</span> res = [<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">    res[<span class="number">0</span>] = <span class="built_in">Math</span>.max(left[<span class="number">0</span>],left[<span class="number">1</span>])+<span class="built_in">Math</span>.max(right[<span class="number">0</span>],right[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// res[0] means skip the current node and get the node.left and node.right</span></span><br><span class="line">    res[<span class="number">1</span>] = root.val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// res[1] means rob the current nod and get node.next.left &amp; node.next.right</span></span><br><span class="line">    <span class="built_in">console</span>.log(res[<span class="number">0</span>],res[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">    / \</span><br><span class="line">   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">    \   \ </span><br><span class="line">     <span class="number">3</span>   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Output: <span class="number">7</span> </span><br><span class="line">Explanation: Maximum amount <span class="keyword">of</span> money the thief can rob = <span class="number">3</span> + <span class="number">3</span> + <span class="number">1</span> = <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">Your input</span><br><span class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br><span class="line">stdout</span><br><span class="line"><span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line"><span class="number">7</span></span><br><span class="line">Expected</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 85. Maximal Rectangle</title>
    <link href="http://yoursite.com/2020/05/24/LeetCode-85-Maximal-Rectangle/"/>
    <id>http://yoursite.com/2020/05/24/LeetCode-85-Maximal-Rectangle/</id>
    <published>2020-05-24T01:54:04.000Z</published>
    <updated>2020-05-24T12:05:42.037Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing only 1’s and return its area.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maximalRectangle = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!matrix || matrix.length===<span class="number">0</span> || matrix[<span class="number">0</span>].length===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> height = matrix.length;</span><br><span class="line">    <span class="keyword">const</span> width = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">const</span> lefts = matrix[<span class="number">0</span>].map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> rights = matrix[<span class="number">0</span>].map(<span class="function"><span class="params">()</span> =&gt;</span> width);</span><br><span class="line">    <span class="keyword">const</span> heights = lefts.slice();</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; height; row++) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> right = width;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[row][i] === <span class="string">'1'</span>) &#123;</span><br><span class="line">            lefts[i] = <span class="built_in">Math</span>.max(left,lefts[i]);</span><br><span class="line">            heights[i]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lefts[i] = heights[i] = <span class="number">0</span>;</span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> rightIdx = width - <span class="number">1</span> - i;</span><br><span class="line">        <span class="keyword">if</span> (matrix[row][rightIdx] === <span class="string">'1'</span>) &#123;</span><br><span class="line">            rights[rightIdx] = <span class="built_in">Math</span>.min(right, rights[rightIdx])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rights[rightIdx] = width;</span><br><span class="line">            right = rightIdx;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max,(rights[i] - lefts[i]) * heights[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maximalRectangle = <span class="function"><span class="keyword">function</span> (<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = matrix.length;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> m = matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> h = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] === <span class="string">'1'</span>) h[i]++;</span><br><span class="line">            <span class="keyword">else</span> h[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> k1 = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (k1 &gt;= <span class="number">0</span> &amp;&amp; h[i] &lt;= h[k1]) k1--;</span><br><span class="line">            <span class="keyword">let</span> k2 = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (k2 &lt; n &amp;&amp; h[i] &lt;= h[k2]) k2++;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(max, h[i] * (k2 - k1 - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing only 1’s and return its area.&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 494. Target Sum</title>
    <link href="http://yoursite.com/2020/05/23/LeetCode-494-Target-Sum/"/>
    <id>http://yoursite.com/2020/05/23/LeetCode-494-Target-Sum/</id>
    <published>2020-05-23T07:17:46.000Z</published>
    <updated>2020-05-23T08:44:19.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols <code>+</code> and <code>-</code>. For each integer, you should choose one from <code>+</code> and <code>-</code> as its new symbol.</p><p>Find out how many ways to assign symbols to make sum of integers equal to target S.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: nums is [1, 1, 1, 1, 1], S is 3. </span><br><span class="line">Output: 5</span><br><span class="line">Explanation: </span><br><span class="line"></span><br><span class="line">-1+1+1+1+1 &#x3D; 3</span><br><span class="line">+1-1+1+1+1 &#x3D; 3</span><br><span class="line">+1+1-1+1+1 &#x3D; 3</span><br><span class="line">+1+1+1-1+1 &#x3D; 3</span><br><span class="line">+1+1+1+1-1 &#x3D; 3</span><br><span class="line"></span><br><span class="line">There are 5 ways to assign symbols to make the sum of nums be target 3.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol type="1"><li>The length of the given array is positive and will not exceed 20.</li><li>The sum of elements in the given array will not exceed 1000.</li><li>Your output answer is guaranteed to be fitted in a 32-bit integer.</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">S</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// classic knapsack </span></span><br><span class="line"><span class="keyword">var</span> findTargetSumWays = <span class="function"><span class="keyword">function</span>(<span class="params">nums, S</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    nums.forEach(<span class="function"><span class="params">num</span> =&gt;</span> &#123;sum+=num&#125;);</span><br><span class="line">    <span class="keyword">if</span>(S&lt;-sum || S&gt;sum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> dp = [];</span><br><span class="line">  <span class="comment">// dp[i][j] : the number of ways for first i-th element to reach a sum j</span></span><br><span class="line">  <span class="comment">// dp[i][j] = dp[i-1][j+nums[i]] + dp[i-1][j-nums[i]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=nums.length;i++) &#123;</span><br><span class="line">        dp.push(<span class="built_in">Array</span>(<span class="number">2</span>*sum+<span class="number">1</span>).fill(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>+sum] = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// at 0th step, the solution number to sum = 0 is 1.</span></span><br><span class="line">  <span class="comment">// The range of sum of all elements is [-sum, sum].</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i&lt;=nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * sum + <span class="number">1</span>; j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(j+nums[i<span class="number">-1</span>]&lt;<span class="number">2</span>*sum+<span class="number">1</span>) dp[i][j]+=dp[i<span class="number">-1</span>][j+nums[i<span class="number">-1</span>]];</span><br><span class="line">          <span class="keyword">if</span>(j-nums[i<span class="number">-1</span>]&gt;=<span class="number">0</span>) dp[i][j] += dp[i<span class="number">-1</span>][j-nums[i<span class="number">-1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dp[nums.length][sum + S];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>For explanation, see this <a href="https://leetcode.com/problems/target-sum/discuss/97335/Short-Java-DP-Solution-with-Explanation/101899" target="_blank" rel="noopener">post</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols &lt;code&gt;+&lt;/code&gt; and &lt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 240. Search a 2D Matrix II</title>
    <link href="http://yoursite.com/2020/05/23/LeetCode-240-Search-a-2D-Matrix-II/"/>
    <id>http://yoursite.com/2020/05/23/LeetCode-240-Search-a-2D-Matrix-II/</id>
    <published>2020-05-23T06:23:21.000Z</published>
    <updated>2020-05-23T07:15:51.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p><ul><li>Integers in each row are sorted in ascending from left to right.</li><li>Integers in each column are sorted in ascending from top to bottom.</li></ul><p><strong>Example:</strong></p><p>Consider the following matrix:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Given target = <code>5</code>, return <code>true</code>.</p><p>Given target = <code>20</code>, return <code>false</code>.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// O(m+n)</span></span><br><span class="line"><span class="keyword">var</span> searchMatrix = <span class="function"><span class="keyword">function</span>(<span class="params">matrix, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!matrix || matrix.length===<span class="number">0</span> || matrix[<span class="number">0</span>].length===<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> row = <span class="number">0</span>, col = matrix[<span class="number">0</span>].length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(col&gt;=<span class="number">0</span> &amp;&amp; row&lt;matrix.length) &#123;</span><br><span class="line">        <span class="keyword">if</span>(target===matrix[row][col]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;matrix[row][col]) &#123;</span><br><span class="line">            col--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            row++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Write an efficient algorithm that searches for a value in an &lt;em&gt;m&lt;/em&gt; x &lt;em&gt;n&lt;/em&gt; matrix. This matrix has the following p
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 238. Product of Array Except Self</title>
    <link href="http://yoursite.com/2020/05/22/LeetCode-238-Product-of-Array-Except-Self/"/>
    <id>http://yoursite.com/2020/05/22/LeetCode-238-Product-of-Array-Except-Self/</id>
    <published>2020-05-22T11:04:51.000Z</published>
    <updated>2020-05-23T01:28:42.935Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1, return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure><p><strong>Constraint:</strong> It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.</p><p><strong>Note:</strong> Please solve it <strong>without division</strong> and in O(<em>n</em>).</p><p><strong>Follow up:</strong> Could you solve it with constant space complexity? (The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p></blockquote><p>The thought is :</p><p>divide into two parts the left part and the right part</p><table><thead><tr class="header"><th style="text-align: center;">i</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Left</td><td style="text-align: center;">1(default)</td><td style="text-align: center;">1</td><td style="text-align: center;">1 * 2</td><td style="text-align: center;">1 * 2 * 3</td></tr><tr class="even"><td style="text-align: center;">Right</td><td style="text-align: center;">2 * 3 * 4</td><td style="text-align: center;">3 * 4</td><td style="text-align: center;">4</td><td style="text-align: center;">1(default)</td></tr><tr class="odd"><td style="text-align: center;">Product=left*right</td><td style="text-align: center;">24</td><td style="text-align: center;">12</td><td style="text-align: center;">8</td><td style="text-align: center;">6</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> left = [<span class="number">1</span>], right = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> output = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        left.push(left[i<span class="number">-1</span>]*nums[i<span class="number">-1</span>]);</span><br><span class="line">        right.unshift(right[right.length-i]*nums[nums.length-i]);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;nums.length;j++) &#123;</span><br><span class="line">        output.push(left[j]*right[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// space :O(N)</span></span><br><span class="line"><span class="comment">// time : O(N)</span></span><br></pre></td></tr></table></figure><p>Slightly space improved version :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">1</span>, right = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> output = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        output.push(left);</span><br><span class="line">        left *= nums[i];</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=nums.length<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">        output[j]=right*output[j];</span><br><span class="line">        right *= nums[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;em&gt;n&lt;/em&gt; integers where &lt;em&gt;n&lt;/em&gt; &amp;gt; 1, return an array &lt;code&gt;output&lt;/code&gt; such th
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 416. Partition Equal Subset Sum</title>
    <link href="http://yoursite.com/2020/05/22/LeetCode-416-Partition-Equal-Subset-Sum/"/>
    <id>http://yoursite.com/2020/05/22/LeetCode-416-Partition-Equal-Subset-Sum/</id>
    <published>2020-05-22T04:20:45.000Z</published>
    <updated>2020-05-22T04:51:44.660Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <strong>non-empty</strong> array containing <strong>only positive integers</strong>, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p><p><strong>Note:</strong></p><ol type="1"><li>Each of the array element will not exceed 100.</li><li>The array size will not exceed 200.</li></ol><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [1, 5, 11, 5]</span><br><span class="line"></span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Explanation: The array can be partitioned as [1, 5, 5] and [11].</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canPartition = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    nums.forEach(<span class="function"><span class="params">num</span> =&gt;</span> &#123;sum+=num&#125;);</span><br><span class="line">    <span class="keyword">if</span> ((sum &amp; <span class="number">1</span>) === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// the sum is even or odd ? if the sum is odd then this definately won't happen!</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum /= <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// the sum is sum/2 because it is a partition equal!!!</span></span><br><span class="line">    <span class="keyword">let</span> dp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=nums.length;i++) &#123;</span><br><span class="line">        dp.push(<span class="built_in">Array</span>(sum+<span class="number">1</span>).fill(<span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// dp[i][j] whether in the first i elements we can get sum j</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;=nums.length; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;=nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;=sum; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= nums[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                dp[i][j] = (dp[i][j] || dp[i<span class="number">-1</span>][j-nums[i<span class="number">-1</span>]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[nums.length][sum];</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; array containing &lt;strong&gt;only positive integers&lt;/strong&gt;, find if the array can be partit
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 208. Implement Trie (Prefix Tree)</title>
    <link href="http://yoursite.com/2020/05/22/LeetCode-208-Implement-Trie-Prefix-Tree/"/>
    <id>http://yoursite.com/2020/05/22/LeetCode-208-Implement-Trie-Prefix-Tree/</id>
    <published>2020-05-22T03:50:39.000Z</published>
    <updated>2020-05-22T03:52:26.266Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Trie trie &#x3D; new Trie();</span><br><span class="line"></span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   &#x2F;&#x2F; returns true</span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; returns false</span><br><span class="line">trie.startsWith(&quot;app&quot;); &#x2F;&#x2F; returns true</span><br><span class="line">trie.insert(&quot;app&quot;);   </span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; returns true</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>You may assume that all inputs are consist of lowercase letters <code>a-z</code>.</li><li>All inputs are guaranteed to be non-empty strings.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Trie = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.root = &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts a word into the trie. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">word</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Trie.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">this</span>.root;</span><br><span class="line">    word.split(<span class="string">''</span>).forEach(<span class="function">(<span class="params">c</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node[c]) node[c]=&#123;&#125;;</span><br><span class="line">        node = node[c];</span><br><span class="line">    &#125;)</span><br><span class="line">    node.isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if the word is in the trie. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">word</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Trie.prototype.search = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">this</span>.searchNode(word);</span><br><span class="line">    <span class="keyword">return</span> node!==<span class="literal">null</span>?node.isEnd===<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if there is any word in the trie that starts with the given prefix. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">prefix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Trie.prototype.startsWith = <span class="function"><span class="keyword">function</span>(<span class="params">prefix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">this</span>.searchNode(prefix);</span><br><span class="line">    <span class="keyword">return</span> node!==<span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new Trie()</span></span><br><span class="line"><span class="comment"> * obj.insert(word)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.search(word)</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.startsWith(prefix)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">Trie.prototype.searchNode = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">this</span>.root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> c <span class="keyword">of</span> word.split(<span class="string">''</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node[c]) &#123;</span><br><span class="line">            node = node[c];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Implement a trie with &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;, and &lt;code&gt;startsWith&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 57. Insert Interval</title>
    <link href="http://yoursite.com/2020/05/21/LeetCode-57-Insert-Interval/"/>
    <id>http://yoursite.com/2020/05/21/LeetCode-57-Insert-Interval/</id>
    <published>2020-05-21T06:01:31.000Z</published>
    <updated>2020-05-21T06:01:31.286Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    <summary type="html">
    
      
      
        

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode 309. Best Time to Buy and Sell Stock with Cooldown</title>
    <link href="http://yoursite.com/2020/05/21/LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown/"/>
    <id>http://yoursite.com/2020/05/21/LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown/</id>
    <published>2020-05-21T02:56:23.000Z</published>
    <updated>2020-05-21T04:30:40.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p><ul><li>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li><li>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</li></ul><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,0,2]</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: transactions &#x3D; [buy, sell, cooldown, buy, sell]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// state machine DP</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hold = -<span class="literal">Infinity</span>, sold = <span class="number">0</span>, rest = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> nextHold = <span class="built_in">Math</span>.max(hold, rest - prices[i]);</span><br><span class="line">        <span class="keyword">let</span> nextSold = hold + prices[i];</span><br><span class="line">        <span class="keyword">let</span> nextRest = <span class="built_in">Math</span>.max(rest, sold);</span><br><span class="line">        hold = nextHold;</span><br><span class="line">        sold = nextSold;</span><br><span class="line">        rest = nextRest;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hold:'</span>,hold,<span class="string">'sold:'</span>,sold,<span class="string">'rest:'</span>,rest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(sold, rest);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Explanation : see this <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75928/Share-my-DP-solution-(By-State-Machine-Thinking)" target="_blank" rel="noopener">post</a></p><p>Process :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Your input</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">stdout</span><br><span class="line">hold: <span class="number">-1</span> sold: -<span class="literal">Infinity</span> rest: <span class="number">0</span></span><br><span class="line">hold: <span class="number">-1</span> sold: <span class="number">1</span> rest: <span class="number">0</span></span><br><span class="line">hold: <span class="number">-1</span> sold: <span class="number">2</span> rest: <span class="number">1</span></span><br><span class="line">hold: <span class="number">1</span> sold: <span class="number">-1</span> rest: <span class="number">2</span></span><br><span class="line">hold: <span class="number">1</span> sold: <span class="number">3</span> rest: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Expected</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Say you have an array for which the &lt;em&gt;i&lt;/em&gt;th element is the price of a given stock on day &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Design an a
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 221. Maximal Square</title>
    <link href="http://yoursite.com/2020/05/20/LeetCode-221-Maximal-Square/"/>
    <id>http://yoursite.com/2020/05/20/LeetCode-221-Maximal-Square/</id>
    <published>2020-05-20T05:20:51.000Z</published>
    <updated>2020-05-20T05:22:16.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line"></span><br><span class="line">1 0 1 0 0</span><br><span class="line">1 0 1 1 1</span><br><span class="line">1 1 1 1 1</span><br><span class="line">1 0 0 1 0</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maximalSquare = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dp = [];</span><br><span class="line">    <span class="keyword">let</span> max =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(matrix.length===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;matrix.length;i++) &#123;</span><br><span class="line">        dp.push(<span class="built_in">Array</span>(matrix[<span class="number">0</span>].length).fill(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;matrix[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j]===<span class="string">'1'</span>) max=<span class="number">1</span>; </span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>]=<span class="built_in">parseInt</span>(matrix[i][<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            dp[i][j]=<span class="built_in">parseInt</span>(matrix[i][j]);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;matrix.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;matrix[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j]===<span class="string">'1'</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">Math</span>.min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])+<span class="number">1</span>;</span><br><span class="line">                <span class="comment">// consider the left / top / diagonal top</span></span><br><span class="line">            &#125;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(max,dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(dp);</span><br><span class="line">    <span class="keyword">return</span> max*max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.&lt;/p&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 146. LRU Cache</title>
    <link href="http://yoursite.com/2020/05/20/LeetCode-146-LRU-Cache/"/>
    <id>http://yoursite.com/2020/05/20/LeetCode-146-LRU-Cache/</id>
    <published>2020-05-19T17:15:45.000Z</published>
    <updated>2020-05-20T04:37:25.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Design and implement a data structure for <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU" target="_blank" rel="noopener">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.</p><p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br /><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p><p>The cache is initialized with a <strong>positive</strong> capacity.</p><p><strong>Follow up:</strong><br />Could you do both operations in <strong>O(1)</strong> time complexity?</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LRUCache cache &#x3D; new LRUCache( 2 &#x2F;* capacity *&#x2F; );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       &#x2F;&#x2F; returns 1</span><br><span class="line">cache.put(3, 3);    &#x2F;&#x2F; evicts key 2</span><br><span class="line">cache.get(2);       &#x2F;&#x2F; returns -1 (not found)</span><br><span class="line">cache.put(4, 4);    &#x2F;&#x2F; evicts key 1</span><br><span class="line">cache.get(1);       &#x2F;&#x2F; returns -1 (not found)</span><br><span class="line">cache.get(3);       &#x2F;&#x2F; returns 3</span><br><span class="line">cache.get(4);       &#x2F;&#x2F; returns 4</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">capacity</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">get</span>(key) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.cache.has(key)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">const</span> v = <span class="keyword">this</span>.cache.get(key);</span><br><span class="line">        <span class="keyword">this</span>.cache.delete(key);</span><br><span class="line">        <span class="keyword">this</span>.cache.set(key,v);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    put(key,value) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.cache.has(key)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cache.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.cache.set(key,value);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.cache.size&gt;<span class="keyword">this</span>.capacity) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cache.delete(<span class="keyword">this</span>.cache.keys().next().value);</span><br><span class="line">            <span class="comment">// keys().next().value returns first item's key</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use a cache map to store all the elements</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Design and implement a data structure for &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU&quot; target=&quot;_bl
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 152. Maximum Product Subarray</title>
    <link href="http://yoursite.com/2020/05/19/LeetCode-152-Maximum-Product-Subarray/"/>
    <id>http://yoursite.com/2020/05/19/LeetCode-152-Maximum-Product-Subarray/</id>
    <published>2020-05-19T02:31:35.000Z</published>
    <updated>2020-05-19T03:01:35.117Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an integer array <code>nums</code>, find the contiguous subarray within an array (containing at least one number) which has the largest product.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,3,-2,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [2,3] has the largest product 6.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,0,-1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The result cannot be 2, because [-2,-1] is not a subarray.</span><br></pre></td></tr></table></figure></blockquote><p>The tricky part is you have to take negative numbers into consideration</p><p>So we create two variables to store max and min respectively</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProduct = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!nums) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> prevMax = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> prevMin = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> curMax = <span class="built_in">Math</span>.max(prevMax*nums[i],nums[i],prevMin*nums[i]);</span><br><span class="line">        <span class="keyword">let</span> curMin = <span class="built_in">Math</span>.min(prevMin*nums[i],nums[i],prevMax*nums[i]);</span><br><span class="line">        prevMax = curMax ; prevMin = curMin;</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max,prevMax);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>DP version :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProduct = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min = [nums[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">let</span> max = [nums[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">let</span> res = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        min.push(<span class="built_in">Math</span>.min(nums[i],min[i<span class="number">-1</span>]*nums[i],max[i<span class="number">-1</span>]*nums[i]));</span><br><span class="line">        max.push(<span class="built_in">Math</span>.max(nums[i],min[i<span class="number">-1</span>]*nums[i],max[i<span class="number">-1</span>]*nums[i]));</span><br><span class="line">        res=<span class="built_in">Math</span>.max(res,max[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, find the contiguous subarray within an array (containing at least one number) whic
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 124. Binary Tree Maximum Path Sum</title>
    <link href="http://yoursite.com/2020/05/18/LeetCode-124-Binary-Tree-Maximum-Path-Sum/"/>
    <id>http://yoursite.com/2020/05/18/LeetCode-124-Binary-Tree-Maximum-Path-Sum/</id>
    <published>2020-05-18T04:41:41.000Z</published>
    <updated>2020-05-18T04:43:32.131Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <strong>non-empty</strong> binary tree, find the maximum path sum.</p><p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <strong>at least one node</strong> and does not need to go through the root.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line"></span><br><span class="line">       1</span><br><span class="line">      &#x2F; \</span><br><span class="line">     2   3</span><br><span class="line"></span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: [-10,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">   -10</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line"></span><br><span class="line">Output: 42</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> maxVal = root.val;</span><br><span class="line">    <span class="keyword">let</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="built_in">Math</span>.max(helper(root.left),<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> right =  <span class="built_in">Math</span>.max(helper(root.right),<span class="number">0</span>);</span><br><span class="line">    maxVal =  <span class="built_in">Math</span>.max(maxVal,left+right+root.val);</span><br><span class="line">      <span class="comment">// either you keep going from the current node or not</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(left,right)+root.val;</span><br><span class="line">&#125;</span><br><span class="line">    helper(root);</span><br><span class="line">    <span class="keyword">return</span> maxVal;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; binary tree, find the maximum path sum.&lt;/p&gt;
&lt;p&gt;For this problem, a path is defined as any
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 239. Sliding Window Maximum</title>
    <link href="http://yoursite.com/2020/05/17/LeetCode-239-Sliding-Window-Maximum/"/>
    <id>http://yoursite.com/2020/05/17/LeetCode-239-Sliding-Window-Maximum/</id>
    <published>2020-05-17T06:54:38.000Z</published>
    <updated>2020-05-17T08:17:42.628Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array <em>nums</em>, there is a sliding window of size <em>k</em> which is moving from the very left of the array to the very right. You can only see the <em>k</em> numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.</p><p><strong>Follow up:</strong><br />Could you solve it in linear time?</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,3,-1,-3,5,3,6,7], and k &#x3D; 3</span><br><span class="line">Output: [3,3,5,5,6,7] </span><br><span class="line">Explanation: </span><br><span class="line"></span><br><span class="line">Window position                Max</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul></blockquote><p>Regular O(N^2) :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSlidingWindow = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length-k+<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> max = nums[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;k;j++) &#123;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(max,nums[j+i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>O(N) method</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSlidingWindow = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> q = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (q.length - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt; q[q.length - <span class="number">1</span>]) q.pop();</span><br><span class="line">    <span class="comment">// if the next element is bigger then all elements in the queue , refresh the queue</span></span><br><span class="line">    q.push(nums[i]);</span><br><span class="line">    <span class="comment">// refresh the queue</span></span><br><span class="line">    <span class="keyword">const</span> j = i + <span class="number">1</span> - k;</span><br><span class="line">    <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// i+1&gt;=k</span></span><br><span class="line">      res.push(q[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">if</span> (nums[j] === q[<span class="number">0</span>]) q.shift();  </span><br><span class="line">      <span class="comment">// if the former first element is already the biggest in the queue, pop it out</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Explanation :</p><p>Monotonic queue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Your input</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="number">3</span></span><br><span class="line">stdout</span><br><span class="line">q: [ <span class="number">1</span> ]</span><br><span class="line">q: [ <span class="number">3</span> ]</span><br><span class="line">q: [ <span class="number">3</span>, <span class="number">-1</span> ]</span><br><span class="line">q: [ <span class="number">3</span>, <span class="number">-1</span>, <span class="number">-3</span> ]</span><br><span class="line">q: [ <span class="number">5</span> ]</span><br><span class="line">q: [ <span class="number">5</span>, <span class="number">3</span> ]</span><br><span class="line">q: [ <span class="number">6</span> ]</span><br><span class="line">q: [ <span class="number">7</span> ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array &lt;em&gt;nums&lt;/em&gt;, there is a sliding window of size &lt;em&gt;k&lt;/em&gt; which is moving from the very left of the array t
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 139. Word Break</title>
    <link href="http://yoursite.com/2020/05/17/LeetCode-139-Word-Break/"/>
    <id>http://yoursite.com/2020/05/17/LeetCode-139-Word-Break/</id>
    <published>2020-05-17T03:38:45.000Z</published>
    <updated>2020-05-17T03:47:07.266Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, determine if <em>s</em> can be segmented into a space-separated sequence of one or more dictionary words.</p><p><strong>Note:</strong></p><ul><li>The same word in the dictionary may be reused multiple times in the segmentation.</li><li>You may assume the dictionary does not contain duplicate words.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;leetcode&quot;, wordDict &#x3D; [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;applepenapple&quot;, wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.</span><br><span class="line">             Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;catsandog&quot;, wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">wordDict</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> wordBreak = <span class="function"><span class="keyword">function</span>(<span class="params">s, wordDict</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="built_in">Array</span>(s.length).fill(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> w <span class="keyword">of</span> wordDict) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(w,s.slice(i-w.length+<span class="number">1</span>,i+<span class="number">1</span> ))</span><br><span class="line">            <span class="keyword">if</span>(w===s.slice(i-w.length+<span class="number">1</span>,i+<span class="number">1</span>) &amp;&amp; (dp[i-w.length] || i-w.length===<span class="number">-1</span>) )</span><br><span class="line">                dp[i]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(dp);</span><br><span class="line">    <span class="keyword">return</span> dp[dp.length<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BFS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">wordDict</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> wordBreak = <span class="function"><span class="keyword">function</span>(<span class="params">s, wordDict</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dict = <span class="keyword">new</span> <span class="built_in">Set</span>(wordDict);</span><br><span class="line">    <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">const</span> q = [<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span>(q.length) &#123;</span><br><span class="line">        <span class="keyword">const</span> start = q.shift();</span><br><span class="line">        <span class="keyword">if</span>(!visited.has(start)) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> end = start+<span class="number">1</span>;end&lt;=s.length;end++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dict.has(s.slice(start,end))) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(end===s.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    q.push(end);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            visited.add(start);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; string &lt;em&gt;s&lt;/em&gt; and a dictionary &lt;em&gt;wordDict&lt;/em&gt; containing a list of &lt;strong&gt;non-emp
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 84. Largest Rectangle in Histogram</title>
    <link href="http://yoursite.com/2020/05/16/LeetCode-84-Largest-Rectangle-in-Histogram/"/>
    <id>http://yoursite.com/2020/05/16/LeetCode-84-Largest-Rectangle-in-Histogram/</id>
    <published>2020-05-16T10:51:31.000Z</published>
    <updated>2020-05-17T02:12:06.541Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given <em>n</em> non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/histogram.png" alt="img" /> Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/histogram_area.png" alt="img" /> The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,1,5,6,2,3]</span><br><span class="line">Output: 10</span><br></pre></td></tr></table></figure></blockquote><p>The thought is simple :</p><p>if the next pillar is shorter then</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">heights</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> largestRectangleArea = <span class="function"><span class="keyword">function</span>(<span class="params">heights</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> maxArea = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    heights = [<span class="number">0</span>].concat(heights).concat([<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;heights.length;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(stack &amp;&amp; heights[stack[stack.length<span class="number">-1</span>]]&gt;heights[i]) &#123;</span><br><span class="line">            <span class="keyword">const</span> j = stack.pop();</span><br><span class="line">             maxArea = <span class="built_in">Math</span>.max((i - stack[stack.length - <span class="number">1</span>] - <span class="number">1</span>) * heights[j], maxArea);</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; non-negative integers representing the histogram&#39;s bar height where the width of each bar is 1, find the ar
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Google校园空中宣讲会笔记：简历如何准备</title>
    <link href="http://yoursite.com/2020/05/15/Google%E6%A0%A1%E5%9B%AD%E7%A9%BA%E4%B8%AD%E5%AE%A3%E8%AE%B2%E4%BC%9A%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/05/15/Google%E6%A0%A1%E5%9B%AD%E7%A9%BA%E4%B8%AD%E5%AE%A3%E8%AE%B2%E4%BC%9A%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-15T12:23:49.000Z</published>
    <updated>2020-05-15T13:33:09.984Z</updated>
    
    <content type="html"><![CDATA[<p>HR和面试官关于简历的部分</p><p><strong>最好是中英双语版本的简历</strong></p><p><img src="https://i.imgur.com/1lCpqQV.png" alt="教育背景怎么写" /></p><p><img src="https://i.imgur.com/dtP9P96.png" alt="牢记XYZ法则" /></p><p><img src="https://i.imgur.com/sagyCgH.png" alt="领导力玄学（学校活动）" /></p><p><img src="https://i.imgur.com/GsAu20k.png" alt="学校活动怎么写" /></p><p><img src="https://i.imgur.com/VSpG8OV.png" alt="项目经历" /></p><p><img src="https://i.imgur.com/keetipb.png" alt="打工经历" /></p><p><img src="https://i.imgur.com/PaO7CyN.png" alt="打工经历怎么写" /></p><p><img src="https://i.imgur.com/V2WaNO0.png" alt="奖项/奖学金" /></p><p><img src="https://i.imgur.com/oINBzXw.png" alt="final tips" /></p><hr /><p>通过KS后的面试流程</p><p><img src="https://i.imgur.com/TLG9rGG.png" alt="形式" /></p><p><img src="https://i.imgur.com/heebKCm.png" alt="一共45分钟" /></p><p><img src="https://i.imgur.com/6DdZNZx.png" alt="技术部分" /></p><p>面试官说严肃正式的面试不会有brain teaser 然后那些个语言其实也没啥 自己拿自己最熟悉的就行 数据结构和算法不会要求全部掌握的 不会是ACM难度 课本难度 如果是别的专业的话没关系 会考虑到专业背景的 反正进去是大类SDE让你干啥你干啥…… 所以语言和技术栈不那么重要</p><p><img src="https://i.imgur.com/ZEIqNq4.png" alt="面试交流技巧" /></p><p>brute force 也要说出来</p><p>看到你进步更重要哈 毕竟好不容易面一个 都是想抓住你的闪光点的</p><p><img src="https://i.imgur.com/fXTHy9c.png" alt="重要的考核点" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HR和面试官关于简历的部分&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最好是中英双语版本的简历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/1lCpqQV.png&quot; alt=&quot;教育背景怎么写&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ht
      
    
    </summary>
    
    
    
      <category term="Career" scheme="http://yoursite.com/tags/Career/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript : a classic interview question</title>
    <link href="http://yoursite.com/2020/05/14/Javascript-a-classic-interview-question/"/>
    <id>http://yoursite.com/2020/05/14/Javascript-a-classic-interview-question/</id>
    <published>2020-05-14T09:13:33.000Z</published>
    <updated>2020-05-15T02:24:58.549Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">1</span>); &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">2</span>);&#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">3</span>);&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">5</span>);&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// what are the ouput of these commands?</span></span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br></pre></td></tr></table></figure><p>While here are the answers ( yeah I run them in the browser )</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Foo.getName();</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>Well , it has been defined as <code>Foo.getName = function () { alert (2);};</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getName();</span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><strong>Surprise</strong> it is NOT 5 !</p><p>Remainder :</p><p>Hoisting is JavaScript's default behavior of moving declarations to the top.</p><p>JavaScript only hoists declarations, not initializations.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">5</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this equals to :</span></span><br><span class="line"></span><br><span class="line">getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;; </span><br><span class="line"><span class="comment">// the alert 5 declaration gets hoisted </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">5</span>);&#125;</span><br><span class="line"><span class="keyword">var</span> getName;</span><br><span class="line"><span class="comment">// then the alert 4 overrides</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Foo().getName();</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>Still hosting problem :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">1</span>); &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="comment">// still first alert 4 declaration gets hoisted</span></span><br><span class="line"><span class="comment">// then the alert 1 overrides</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//window.Foo().getName();</span></span><br><span class="line"><span class="comment">//-&gt;window.getName();</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getName();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">//-&gt;window.getName(); &amp; alert 1 overrides</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>This is about the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">operator precedence rule of JavaScript</a></p><p>20 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener"><code>new</code></a> (with argument list) &gt; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener"><code>new</code></a> (without argument list)</p><p>So this is what actually happens :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> (Foo.getName)()</span><br></pre></td></tr></table></figure><p>Here <code>getName()</code> is a constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><code>(new Foo()).getName()</code></p><p>And the constructor has a return value <code>this</code></p><p>So it equals to <code>this.getName()</code></p><p>Because there is no getName property in Foo for a new instance so JS will look into the prototype</p><p><code>Foo.prototype.getName = function () { alert (3);};</code> =&gt; alert 3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>Same thing with the opertator precedence rule</p><p><code>new (new (Foo().getName()))</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode N-Queens</title>
    <link href="http://yoursite.com/2020/05/14/LeetCode-N-Queens/"/>
    <id>http://yoursite.com/2020/05/14/LeetCode-N-Queens/</id>
    <published>2020-05-14T02:40:47.000Z</published>
    <updated>2020-05-14T09:11:46.099Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>×<em>n</em> chessboard such that no two queens attack each other.</p><figure><img src="https://assets.leetcode.com/uploads/2018/10/12/8-queens.png" alt="img" /><figcaption>img</figcaption></figure><p>Given an integer <em>n</em>, return all distinct solutions to the <em>n</em>-queens puzzle.</p><p>Each solution contains a distinct board configuration of the <em>n</em>-queens' placement, where <code>'Q'</code> and <code>'.'</code> both indicate a queen and an empty space respectively.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: [</span><br><span class="line"> [&quot;.Q..&quot;,  &#x2F;&#x2F; Solution 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  &#x2F;&#x2F; Solution 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br><span class="line">Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.</span><br></pre></td></tr></table></figure></blockquote><p>Prerequisite:</p><blockquote><p>The <code>some()</code> method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> solveNQueens = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    backtrack(res, n);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params">res, n, board = [], r = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r === n) &#123;</span><br><span class="line">        res.push(board.map(<span class="function"><span class="params">c</span> =&gt;</span> <span class="string">'.'</span>.repeat(c) + <span class="string">'Q'</span> + <span class="string">'.'</span>.repeat(n - c - <span class="number">1</span>)));</span><br><span class="line">        <span class="built_in">console</span>.log(board);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; n; c++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!board.some(<span class="function">(<span class="params">bc, br</span>) =&gt;</span> bc === c || <span class="built_in">Math</span>.abs(bc-c)===<span class="built_in">Math</span>.abs(br-r))) &#123;</span><br><span class="line">            <span class="comment">// Math.abs(bc-c)===Math.abs(br-r) collide on the diagonal</span></span><br><span class="line">            <span class="comment">// bc === c  collide on the same column</span></span><br><span class="line">            board.push(c);</span><br><span class="line">            backtrack(res, n, board, r + <span class="number">1</span>);</span><br><span class="line">            board.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;n&lt;/em&gt;-queens puzzle is the problem of placing &lt;em&gt;n&lt;/em&gt; queens on an &lt;em&gt;n&lt;/em&gt;×&lt;em&gt;n&lt;/em&gt; chessboard such that no
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
