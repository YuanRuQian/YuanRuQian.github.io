<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-18T13:28:18.569Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>R programming : Covid-19 data visualization</title>
    <link href="http://yoursite.com/2020/04/18/R-programming-Covid-19-data-visualization/"/>
    <id>http://yoursite.com/2020/04/18/R-programming-Covid-19-data-visualization/</id>
    <published>2020-04-18T11:39:25.000Z</published>
    <updated>2020-04-18T13:28:18.569Z</updated>
    
    <content type="html"><![CDATA[<p>Here is the raw data :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt; china</span><br><span class="line">            日期 新增确诊病例 新增死亡病例 新增治愈出院病例 新增疑似病例</span><br><span class="line"><span class="number">1</span>  <span class="number">2020</span>年<span class="number">1</span>月<span class="number">29</span>日         <span class="number">1737</span>           <span class="number">38</span>               <span class="number">21</span>         <span class="number">4148</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2020</span>年<span class="number">1</span>月<span class="number">30</span>日         <span class="number">1982</span>           <span class="number">43</span>               <span class="number">47</span>         <span class="number">4812</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2020</span>年<span class="number">1</span>月<span class="number">31</span>日         <span class="number">2102</span>           <span class="number">46</span>               <span class="number">73</span>         <span class="number">5019</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">1</span>日         <span class="number">2590</span>           <span class="number">46</span>               <span class="number">85</span>         <span class="number">4562</span></span><br><span class="line"><span class="number">5</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">2</span>日         <span class="number">2829</span>           <span class="number">57</span>              <span class="number">147</span>         <span class="number">5173</span></span><br><span class="line"><span class="number">6</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">3</span>日         <span class="number">3235</span>           <span class="number">64</span>              <span class="number">157</span>         <span class="number">5072</span></span><br><span class="line"><span class="number">7</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">4</span>日         <span class="number">3887</span>           <span class="number">65</span>              <span class="number">262</span>         <span class="number">3971</span></span><br><span class="line"><span class="number">8</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">5</span>日         <span class="number">3694</span>           <span class="number">73</span>              <span class="number">261</span>         <span class="number">5328</span></span><br><span class="line"><span class="number">9</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">6</span>日         <span class="number">3143</span>           <span class="number">73</span>              <span class="number">387</span>         <span class="number">4833</span></span><br><span class="line"><span class="number">10</span>  <span class="number">2020</span>年<span class="number">2</span>月<span class="number">7</span>日         <span class="number">3399</span>           <span class="number">86</span>              <span class="number">510</span>         <span class="number">4214</span></span><br><span class="line"><span class="number">11</span>  <span class="number">2020</span>年<span class="number">2</span>月<span class="number">8</span>日         <span class="number">2656</span>           <span class="number">89</span>              <span class="number">600</span>         <span class="number">3916</span></span><br><span class="line"><span class="number">12</span>  <span class="number">2020</span>年<span class="number">2</span>月<span class="number">9</span>日         <span class="number">3062</span>           <span class="number">97</span>              <span class="number">632</span>         <span class="number">4008</span></span><br><span class="line"><span class="number">13</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">10</span>日         <span class="number">2478</span>          <span class="number">108</span>              <span class="number">716</span>         <span class="number">3536</span></span><br><span class="line"><span class="number">14</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">11</span>日         <span class="number">2015</span>           <span class="number">97</span>              <span class="number">744</span>         <span class="number">3342</span></span><br><span class="line"><span class="number">15</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">12</span>日        <span class="number">15152</span>          <span class="number">254</span>             <span class="number">1171</span>         <span class="number">2807</span></span><br><span class="line"><span class="number">16</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">13</span>日         <span class="number">5090</span>          <span class="number">121</span>             <span class="number">1081</span>         <span class="number">2450</span></span><br><span class="line"><span class="number">17</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">14</span>日         <span class="number">2641</span>          <span class="number">143</span>             <span class="number">1373</span>         <span class="number">2277</span></span><br><span class="line"><span class="number">18</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">15</span>日         <span class="number">2009</span>          <span class="number">142</span>             <span class="number">1323</span>         <span class="number">1918</span></span><br><span class="line"><span class="number">19</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">16</span>日         <span class="number">2048</span>          <span class="number">105</span>             <span class="number">1425</span>         <span class="number">1563</span></span><br><span class="line"><span class="number">20</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">17</span>日         <span class="number">1886</span>           <span class="number">98</span>             <span class="number">1701</span>         <span class="number">1432</span></span><br><span class="line"><span class="number">21</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">18</span>日         <span class="number">1749</span>          <span class="number">136</span>             <span class="number">1824</span>         <span class="number">1185</span></span><br><span class="line"><span class="number">22</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">19</span>日          <span class="number">394</span>          <span class="number">114</span>             <span class="number">1779</span>         <span class="number">1277</span></span><br><span class="line"><span class="number">23</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">20</span>日          <span class="number">889</span>          <span class="number">118</span>             <span class="number">2109</span>         <span class="number">1614</span></span><br><span class="line">&gt; usa</span><br><span class="line">            地区 累计确诊 累计死亡</span><br><span class="line"><span class="number">1</span>       New York   <span class="number">223691</span>    <span class="number">12248</span></span><br><span class="line"><span class="number">2</span>     New Jersey    <span class="number">75317</span>     <span class="number">3518</span></span><br><span class="line"><span class="number">3</span>  Massachusetts    <span class="number">32181</span>     <span class="number">1245</span></span><br><span class="line"><span class="number">4</span>       Michigan    <span class="number">29263</span>     <span class="number">2093</span></span><br><span class="line"><span class="number">5</span>     California    <span class="number">28036</span>      <span class="number">965</span></span><br><span class="line"><span class="number">6</span>   Pennsylvania    <span class="number">27735</span>      <span class="number">707</span></span><br><span class="line"><span class="number">7</span>       Illinois    <span class="number">25734</span>     <span class="number">1072</span></span><br><span class="line"><span class="number">8</span>        Florida    <span class="number">23340</span>      <span class="number">668</span></span><br><span class="line"><span class="number">9</span>      Louisiana    <span class="number">22532</span>     <span class="number">1156</span></span><br><span class="line"><span class="number">10</span>         Texas    <span class="number">17216</span>      <span class="number">424</span></span><br></pre></td></tr></table></figure><p>Dealing with the Chinese date data :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; as.Date(china$日期, format = <span class="string">"%Y年%m月%d日"</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"2020-01-29"</span> <span class="string">"2020-01-30"</span> <span class="string">"2020-01-31"</span> <span class="string">"2020-02-01"</span> <span class="string">"2020-02-02"</span> <span class="string">"2020-02-03"</span></span><br><span class="line"> [<span class="number">7</span>] <span class="string">"2020-02-04"</span> <span class="string">"2020-02-05"</span> <span class="string">"2020-02-06"</span> <span class="string">"2020-02-07"</span> <span class="string">"2020-02-08"</span> <span class="string">"2020-02-09"</span></span><br><span class="line">[<span class="number">13</span>] <span class="string">"2020-02-10"</span> <span class="string">"2020-02-11"</span> <span class="string">"2020-02-12"</span> <span class="string">"2020-02-13"</span> <span class="string">"2020-02-14"</span> <span class="string">"2020-02-15"</span></span><br><span class="line">[<span class="number">19</span>] <span class="string">"2020-02-16"</span> <span class="string">"2020-02-17"</span> <span class="string">"2020-02-18"</span> <span class="string">"2020-02-19"</span> <span class="string">"2020-02-20"</span></span><br></pre></td></tr></table></figure><p>Bummer ! Chinese characters cannot be displayed in the graph !</p><p>As a OS X user, I put a Chinese-frendly font in the system font folder then load into the working environment .</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; font_files()</span><br><span class="line">            path                       file                    family    face</span><br><span class="line"><span class="number">1</span> /Library/Fonts          Arial Unicode.ttf          Arial Unicode MS Regular</span><br><span class="line"><span class="number">2</span> /Library/Fonts  TaipeiSansTCBeta-Bold.ttf       Taipei Sans TC Beta    Bold</span><br><span class="line"><span class="number">3</span> /Library/Fonts TaipeiSansTCBeta-Light.ttf Taipei Sans TC Beta Light Regular</span><br><span class="line"><span class="number">4</span> /Library/Fonts       TaipeiSansTCBeta.ttf       Taipei Sans TC Beta Regular</span><br><span class="line">        version                  ps_name</span><br><span class="line"><span class="number">1</span> Version <span class="number">1.</span>01x           ArialUnicodeMS</span><br><span class="line"><span class="number">2</span> Version <span class="number">1.000</span>    TaipeiSansTCBeta-Bold</span><br><span class="line"><span class="number">3</span> Version <span class="number">1.000</span>   TaipeiSansTCBeta-Light</span><br><span class="line"><span class="number">4</span> Version <span class="number">1.000</span> TaipeiSansTCBeta-Regular</span><br><span class="line">&gt; par(family=<span class="string">'Taipei Sans TC Beta'</span>)</span><br></pre></td></tr></table></figure><p>Start to draw the first graph :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(china$新增确诊病例~as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),type=<span class="string">'b'</span>,col=<span class="string">'#f94f5b'</span>,pch=<span class="number">2</span>,xlab=<span class="string">'日期'</span>,ylab=<span class="string">'病例数目'</span>,main=<span class="string">'国内疫情数据'</span>)</span><br><span class="line">&gt; points(as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),china$新增死亡病例,col=<span class="string">'#df9f9f'</span>,pch=<span class="number">4</span>,type = <span class="string">'b'</span>)</span><br><span class="line">&gt; points(as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),china$新增治愈出院病例,col=<span class="string">'#9a3e3e'</span>,pch=<span class="number">6</span>,type=<span class="string">'b'</span>)</span><br><span class="line">&gt; points(as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),china$新增疑似病例,col=<span class="string">'#ce7676'</span>,pch=<span class="number">8</span>,type=<span class="string">'b'</span>)</span><br><span class="line">&gt; legend(<span class="string">'topright'</span>,c(<span class="string">'新增确诊病例'</span>,<span class="string">'新增死亡病例'</span>,<span class="string">'新增治愈出院病例'</span>,<span class="string">'新增疑似病例'</span>),col=c(<span class="string">'#f94f5b'</span>,<span class="string">'#df9f9f'</span>,<span class="string">'#9a3e3e'</span>,<span class="string">'#ce7676'</span>),pch=c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><img src="https://imgur.com/3kwUfRu" /></p><p>Now draw two pie charts with fancy percent legend :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; percent&lt;-round(<span class="number">100</span>*usa$累计确诊/sum(usa$累计确诊),<span class="number">2</span>) </span><br><span class="line">&gt; percent &lt;-paste(percent, <span class="string">"%"</span>, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent &lt;-paste(usa$地区,<span class="string">' '</span>,percent, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"New York 44.29%"</span>     <span class="string">"New Jersey 14.91%"</span>   <span class="string">"Massachusetts 6.37%"</span></span><br><span class="line"> [<span class="number">4</span>] <span class="string">"Michigan 5.79%"</span>      <span class="string">"California 5.55%"</span>    <span class="string">"Pennsylvania 5.49%"</span> </span><br><span class="line"> [<span class="number">7</span>] <span class="string">"Illinois 5.1%"</span>       <span class="string">"Florida 4.62%"</span>       <span class="string">"Louisiana 4.46%"</span>    </span><br><span class="line">[<span class="number">10</span>] <span class="string">"Texas 3.41%"</span>  </span><br><span class="line">&gt; pie(usa$累计确诊,labels = percent,col = rainbow(length(usa$地区)))</span><br><span class="line">&gt; title(<span class="string">'美国各大州累计确诊数目'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgur.com/FdkQ5q9" /></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; percent&lt;-round(<span class="number">100</span>*usa$累计死亡/sum(usa$累计死亡),<span class="number">2</span>) </span><br><span class="line">&gt; percent &lt;-paste(percent, <span class="string">"%"</span>, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent &lt;-paste(usa$地区,<span class="string">' '</span>,percent, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"New York 50.83%"</span>     <span class="string">"New Jersey 14.6%"</span>    <span class="string">"Massachusetts 5.17%"</span></span><br><span class="line"> [<span class="number">4</span>] <span class="string">"Michigan 8.69%"</span>      <span class="string">"California 4%"</span>       <span class="string">"Pennsylvania 2.93%"</span> </span><br><span class="line"> [<span class="number">7</span>] <span class="string">"Illinois 4.45%"</span>      <span class="string">"Florida 2.77%"</span>       <span class="string">"Louisiana 4.8%"</span>     </span><br><span class="line">[<span class="number">10</span>] <span class="string">"Texas 1.76%"</span></span><br></pre></td></tr></table></figure><p><img src="https://imgur.com/undefined" /></p><p>Now bar plot :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; us &lt;- t(usa[,c(<span class="number">2</span>:<span class="number">3</span>)])</span><br><span class="line">&gt; us</span><br><span class="line">           [,<span class="number">1</span>]  [,<span class="number">2</span>]  [,<span class="number">3</span>]  [,<span class="number">4</span>]  [,<span class="number">5</span>]  [,<span class="number">6</span>]  [,<span class="number">7</span>]  [,<span class="number">8</span>]  [,<span class="number">9</span>] [,<span class="number">10</span>]</span><br><span class="line">累计确诊 <span class="number">223691</span> <span class="number">75317</span> <span class="number">32181</span> <span class="number">29263</span> <span class="number">28036</span> <span class="number">27735</span> <span class="number">25734</span> <span class="number">23340</span> <span class="number">22532</span> <span class="number">17216</span></span><br><span class="line">累计死亡  <span class="number">12248</span>  <span class="number">3518</span>  <span class="number">1245</span>  <span class="number">2093</span>   <span class="number">965</span>   <span class="number">707</span>  <span class="number">1072</span>   <span class="number">668</span>  <span class="number">1156</span>   <span class="number">424</span></span><br><span class="line">&gt; bp &lt;- barplot(us,beside=<span class="literal">TRUE</span>,names.arg = usa$地区,col=c(<span class="string">'#3b5998'</span>,<span class="string">'#8b9dc3'</span>),legend.text = c(<span class="string">'累计确诊'</span>,<span class="string">'累计死亡'</span>),main = <span class="string">'美国各大州累计确诊与死亡数据'</span>,ylim = c(<span class="number">0</span>,<span class="number">250000</span>))</span><br><span class="line">??? 怎么标数值？？？</span><br></pre></td></tr></table></figure><p><img src="" /></p><p>Now box plot :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; boxplot(usa$累计确诊,usa$累计死亡,col=c(<span class="string">'#ffcc66'</span>),names = c(<span class="string">'累计确诊'</span>,<span class="string">'累计死亡'</span>))</span><br><span class="line">&gt; title(<span class="string">'美国累计确诊与累计死亡数据'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imgur.com/B6C52sU" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Here is the raw data :&lt;/p&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 230. Kth Smallest Element in a BST</title>
    <link href="http://yoursite.com/2020/04/18/LeetCode-230-Kth-Smallest-Element-in-a-BST/"/>
    <id>http://yoursite.com/2020/04/18/LeetCode-230-Kth-Smallest-Element-in-a-BST/</id>
    <published>2020-04-18T02:28:58.000Z</published>
    <updated>2020-04-18T03:13:01.393Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <strong>k</strong>th smallest element in it.</p><p><strong>Note:</strong> You may assume k is always valid, 1 ≤ k ≤ BST's total elements.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [5,3,6,2,4,null,null,1], k &#x3D; 3</span><br><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">     3   6</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   4</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong> What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kthSmallest = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> record = [];</span><br><span class="line">    <span class="keyword">let</span> traverse = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        record.push(root.val);</span><br><span class="line">        traverse(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    traverse(root);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> record[k<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Optimized version :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kthSmallest = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> current = root,result=<span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span>(current)&#123;</span><br><span class="line">          <span class="keyword">if</span>(!current.left)&#123;</span><br><span class="line">              --k;</span><br><span class="line">              <span class="keyword">if</span>(k===<span class="number">0</span>)&#123;</span><br><span class="line">                  result = current.val;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              current = current.right</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">let</span> prede = current.left;</span><br><span class="line">              <span class="keyword">while</span>(prede.right &amp;&amp; prede.right !== current)&#123;</span><br><span class="line">                  prede = prede.right</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(prede.right)&#123;</span><br><span class="line">                  prede.right = <span class="literal">null</span>;</span><br><span class="line">                  --k;</span><br><span class="line">                  <span class="keyword">if</span>(k===<span class="number">0</span>)&#123;result = current.val;<span class="keyword">break</span>;&#125;</span><br><span class="line">                  current = current.right;</span><br><span class="line"></span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  prede.right = current;</span><br><span class="line">                  current = current.left</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Judge while running the process , quit if k=0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary search tree, write a function &lt;code&gt;kthSmallest&lt;/code&gt; to find the &lt;strong&gt;k&lt;/strong&gt;th smallest element in i
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 104. Maximum Depth of Binary Tree</title>
    <link href="http://yoursite.com/2020/04/18/LeetCode-104-Maximum-Depth-of-Binary-Tree/"/>
    <id>http://yoursite.com/2020/04/18/LeetCode-104-Maximum-Depth-of-Binary-Tree/</id>
    <published>2020-04-18T02:24:06.000Z</published>
    <updated>2020-04-18T02:26:42.980Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><strong>Note:</strong> A leaf is a node with no children.</p><p><strong>Example:</strong></p><p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its depth = 3.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> getDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(getDepth(root.left),getDepth(root.right))+<span class="number">1</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getDepth(root);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>And it could be shortened like this :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root, depth = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> depth;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(maxDepth(root.left, depth + <span class="number">1</span>), maxDepth(root.right, depth + <span class="number">1</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, find its maximum depth.&lt;/p&gt;
&lt;p&gt;The maximum depth is the number of nodes along the longest path from the
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 121. Best Time to Buy and Sell Stock</title>
    <link href="http://yoursite.com/2020/04/17/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>http://yoursite.com/2020/04/17/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2020-04-17T06:19:06.000Z</published>
    <updated>2020-04-17T06:25:13.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ay you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find  the maximum profit.</p><p>Note that you cannot sell a stock before you buy one.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-1 &#x3D; 5.</span><br><span class="line">             Not 7-1 &#x3D; 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> high = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">  <span class="comment">// Notice : low needs to be Number.MAX_SAFE_INTEGER or some element will be missed</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;prices.length;i++) &#123;</span><br><span class="line">        low = <span class="built_in">Math</span>.min(low,prices[i]);</span><br><span class="line">        high = <span class="built_in">Math</span>.max(high,prices[i]-low);</span><br><span class="line">      <span class="comment">// It's very clever to put low first then calculate high </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> high;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ay you have an array for which the &lt;em&gt;i&lt;/em&gt;th element is the price of a given stock on day &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you were 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 53. Maximum Subarray</title>
    <link href="http://yoursite.com/2020/04/17/LeetCode-53-Maximum-Subarray/"/>
    <id>http://yoursite.com/2020/04/17/LeetCode-53-Maximum-Subarray/</id>
    <published>2020-04-17T02:35:56.000Z</published>
    <updated>2020-04-17T03:05:38.548Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum &#x3D; 6.</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> smax = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        sum += num;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;smax) smax=sum;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;<span class="number">0</span>) sum=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> smax;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, find the contiguous subarray (containing at least one number) which has the larges
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 136. Single Number</title>
    <link href="http://yoursite.com/2020/04/17/LeetCode-136-Single-Number/"/>
    <id>http://yoursite.com/2020/04/17/LeetCode-136-Single-Number/</id>
    <published>2020-04-17T02:22:42.000Z</published>
    <updated>2020-04-17T02:34:21.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></blockquote><p>Well it directly says <strong>no extra memory</strong></p><p>So I thought : maybe using XOR bitwise trick 😉</p><p>XOR means <code>1^0=1</code> <code>1^1=0</code> <code>0^0=1</code> , only two different elements will get <code>TRUE</code></p><p>It either twice or once</p><p>So if the element appears twice XOR it will be reduced to a string of zeros</p><p>Or it will be the way it is</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;nums.length;i++ ) &#123;</span><br><span class="line">        nums[<span class="number">0</span>] = nums[<span class="number">0</span>]^nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; array of integers, every element appears &lt;em&gt;twice&lt;/em&gt; except for one. Find that single 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 98. Validate Binary Search Tree</title>
    <link href="http://yoursite.com/2020/04/16/LeetCode-98-Validate-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2020/04/16/LeetCode-98-Validate-Binary-Search-Tree/</id>
    <published>2020-04-16T03:44:59.000Z</published>
    <updated>2020-04-16T04:37:43.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><ul><li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li><li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line"></span><br><span class="line">Input: [2,1,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line"></span><br><span class="line">Input: [5,1,4,null,null,3,6]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The root node&#39;s value is 5 but its right child&#39;s value is 4.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span>(<span class="params">root,min=null,max=null</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(min &amp;&amp; root.val&lt;=min.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(max &amp;&amp; root.val&gt;=max.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> isValidBST(root.left,min,root) &amp;&amp; isValidBST(root.right,root,max);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, determine if it is a valid binary search tree (BST).&lt;/p&gt;
&lt;p&gt;Assume a BST is defined as follows:&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 34. Find First and Last Position of Element in Sorted Array</title>
    <link href="http://yoursite.com/2020/04/15/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
    <id>http://yoursite.com/2020/04/15/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</id>
    <published>2020-04-15T03:50:51.000Z</published>
    <updated>2020-04-15T07:51:41.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>Your algorithm's runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure></blockquote><p>Well obviously it's not brutal force log(N)</p><p><em>O</em>(log <em>n</em>) means binary search</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchRange = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right) &#123;</span><br><span class="line">           mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]===target) &#123;</span><br><span class="line">               left = right = mid;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&lt;target) &#123;</span><br><span class="line">               left = mid+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&gt;target) &#123;</span><br><span class="line">              right = mid<span class="number">-1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(left&gt;right) &#123;</span><br><span class="line">               <span class="comment">// if not in the array</span></span><br><span class="line">               <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (nums[left<span class="number">-1</span>] === target) left--;</span><br><span class="line">    <span class="keyword">while</span> (nums[right+<span class="number">1</span>] === target) right++;</span><br><span class="line">    <span class="keyword">return</span> [left,right];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; sorted in ascending order, find the starting and ending position of a given &lt;co
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 56. Merge Intervals</title>
    <link href="http://yoursite.com/2020/04/14/LeetCode-56-Merge-Intervals/"/>
    <id>http://yoursite.com/2020/04/14/LeetCode-56-Merge-Intervals/</id>
    <published>2020-04-14T10:29:54.000Z</published>
    <updated>2020-04-14T15:41:10.657Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a collection of intervals, merge all overlapping intervals.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">intervals</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(intervals.length&lt;<span class="number">2</span>) <span class="keyword">return</span> intervals;</span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>(a[<span class="number">0</span>]-b[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// first ascending sort</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;intervals.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> pre = intervals[i];</span><br><span class="line">        <span class="keyword">let</span> lat = intervals[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(pre[<span class="number">1</span>]&gt;=lat[<span class="number">0</span>]) &#123;</span><br><span class="line">            intervals[i+<span class="number">1</span>]=[<span class="built_in">Math</span>.min(pre[<span class="number">0</span>],lat[<span class="number">0</span>]),<span class="built_in">Math</span>.max(pre[<span class="number">1</span>],lat[<span class="number">1</span>])];</span><br><span class="line">            intervals.splice(i,<span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intervals;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a collection of intervals, merge all overlapping intervals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>R visualization : ordered dot chart</title>
    <link href="http://yoursite.com/2020/04/14/R-visualization-ordered-dot-chart/"/>
    <id>http://yoursite.com/2020/04/14/R-visualization-ordered-dot-chart/</id>
    <published>2020-04-14T06:01:22.000Z</published>
    <updated>2020-04-14T06:43:44.728Z</updated>
    
    <content type="html"><![CDATA[<p>According to <a href="student_score.csv">the csv file</a> , draw the dot chart of the total scores of the students.</p><p>Load the csv data:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; data</span><br><span class="line">              ID gender math english chemistry</span><br><span class="line">Davis    <span class="number">2017001</span>   Male  <span class="number">192</span>      <span class="number">93</span>        <span class="number">55</span></span><br><span class="line">Williams <span class="number">2017002</span>   Male  <span class="number">178</span>      <span class="number">86</span>        <span class="number">32</span></span><br><span class="line">Jones    <span class="number">2017003</span> Female  <span class="number">158</span>      <span class="number">65</span>        <span class="number">52</span></span><br><span class="line">Cushing  <span class="number">2017004</span>   Male  <span class="number">189</span>      <span class="number">72</span>        <span class="number">28</span></span><br><span class="line">Ytzrhak  <span class="number">2017005</span> Female  <span class="number">193</span>      <span class="number">87</span>        <span class="number">45</span></span><br><span class="line">Knox     <span class="number">2017006</span>   Male  <span class="number">167</span>      <span class="number">76</span>        <span class="number">60</span></span><br><span class="line">Rayburm  <span class="number">2017007</span>   Male  <span class="number">176</span>      <span class="number">79</span>        <span class="number">47</span></span><br><span class="line">England  <span class="number">2017008</span>   Male  <span class="number">185</span>      <span class="number">67</span>        <span class="number">42</span></span><br><span class="line">Tmac     <span class="number">2017009</span> Female  <span class="number">174</span>      <span class="number">69</span>        <span class="number">52</span></span><br><span class="line">Mcgrady  <span class="number">2017010</span> Female  <span class="number">182</span>      <span class="number">81</span>        <span class="number">38</span></span><br></pre></td></tr></table></figure><p>Add <code>total</code> to the data</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; data$total &lt;- apply(data[,c(<span class="number">3</span>:<span class="number">5</span>)],<span class="number">1</span>,sum)</span><br><span class="line">&gt; data</span><br><span class="line">              ID gender math english chemistry total</span><br><span class="line">Davis    <span class="number">2017001</span>   Male  <span class="number">192</span>      <span class="number">93</span>        <span class="number">55</span>   <span class="number">340</span></span><br><span class="line">Williams <span class="number">2017002</span>   Male  <span class="number">178</span>      <span class="number">86</span>        <span class="number">32</span>   <span class="number">296</span></span><br><span class="line">Jones    <span class="number">2017003</span> Female  <span class="number">158</span>      <span class="number">65</span>        <span class="number">52</span>   <span class="number">275</span></span><br><span class="line">Cushing  <span class="number">2017004</span>   Male  <span class="number">189</span>      <span class="number">72</span>        <span class="number">28</span>   <span class="number">289</span></span><br><span class="line">Ytzrhak  <span class="number">2017005</span> Female  <span class="number">193</span>      <span class="number">87</span>        <span class="number">45</span>   <span class="number">325</span></span><br><span class="line">Knox     <span class="number">2017006</span>   Male  <span class="number">167</span>      <span class="number">76</span>        <span class="number">60</span>   <span class="number">303</span></span><br><span class="line">Rayburm  <span class="number">2017007</span>   Male  <span class="number">176</span>      <span class="number">79</span>        <span class="number">47</span>   <span class="number">302</span></span><br><span class="line">England  <span class="number">2017008</span>   Male  <span class="number">185</span>      <span class="number">67</span>        <span class="number">42</span>   <span class="number">294</span></span><br><span class="line">Tmac     <span class="number">2017009</span> Female  <span class="number">174</span>      <span class="number">69</span>        <span class="number">52</span>   <span class="number">295</span></span><br><span class="line">Mcgrady  <span class="number">2017010</span> Female  <span class="number">182</span>      <span class="number">81</span>        <span class="number">38</span>   <span class="number">301</span></span><br></pre></td></tr></table></figure><p>Use <code>order()</code> to organize the data</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; data[order(data$total),]</span><br><span class="line">              ID gender math english chemistry total</span><br><span class="line">Jones    <span class="number">2017003</span> Female  <span class="number">158</span>      <span class="number">65</span>        <span class="number">52</span>   <span class="number">275</span></span><br><span class="line">Cushing  <span class="number">2017004</span>   Male  <span class="number">189</span>      <span class="number">72</span>        <span class="number">28</span>   <span class="number">289</span></span><br><span class="line">England  <span class="number">2017008</span>   Male  <span class="number">185</span>      <span class="number">67</span>        <span class="number">42</span>   <span class="number">294</span></span><br><span class="line">Tmac     <span class="number">2017009</span> Female  <span class="number">174</span>      <span class="number">69</span>        <span class="number">52</span>   <span class="number">295</span></span><br><span class="line">Williams <span class="number">2017002</span>   Male  <span class="number">178</span>      <span class="number">86</span>        <span class="number">32</span>   <span class="number">296</span></span><br><span class="line">Mcgrady  <span class="number">2017010</span> Female  <span class="number">182</span>      <span class="number">81</span>        <span class="number">38</span>   <span class="number">301</span></span><br><span class="line">Rayburm  <span class="number">2017007</span>   Male  <span class="number">176</span>      <span class="number">79</span>        <span class="number">47</span>   <span class="number">302</span></span><br><span class="line">Knox     <span class="number">2017006</span>   Male  <span class="number">167</span>      <span class="number">76</span>        <span class="number">60</span>   <span class="number">303</span></span><br><span class="line">Ytzrhak  <span class="number">2017005</span> Female  <span class="number">193</span>      <span class="number">87</span>        <span class="number">45</span>   <span class="number">325</span></span><br><span class="line">Davis    <span class="number">2017001</span>   Male  <span class="number">192</span>      <span class="number">93</span>        <span class="number">55</span>   <span class="number">340</span></span><br></pre></td></tr></table></figure><p>Draw the chart :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dotchart(data[order(data$total),]$total,labels = rownames(data[order(data$total),]),main = <span class="string">"simple dot chart"</span>,pch=<span class="number">18</span>,col=<span class="string">"blue"</span>,xlab = <span class="string">"score"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Ge61xJI.png" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;According to &lt;a href=&quot;student_score.csv&quot;&gt;the csv file&lt;/a&gt; , draw the dot chart of the total scores of the students.&lt;/p&gt;
&lt;p&gt;Load the csv d
      
    
    </summary>
    
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 22. Generate Parentheses</title>
    <link href="http://yoursite.com/2020/04/13/LeetCode-22-Generate-Parentheses/"/>
    <id>http://yoursite.com/2020/04/13/LeetCode-22-Generate-Parentheses/</id>
    <published>2020-04-13T02:42:53.000Z</published>
    <updated>2020-04-13T04:01:19.125Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><p>For example, given <em>n</em> = 3, a solution set is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><p>DP solution :</p><p>Generate 0 pair () then generate n pair afterwards</p><p>Generate 1 pair () then generate n-1 pair afterwards</p><p>Generate 2 pairs () then generate n-2 pair afterwards</p><p>…</p><p>Generate n-1 pairs () then 1 pair afterwards</p><p>Here is the process:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">2</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">2</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">3</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="function">(<span class="params">left,right,part</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(!left &amp;&amp; !right) res.push(part);</span><br><span class="line">        <span class="keyword">if</span>(left&gt;<span class="number">0</span>) dp(left<span class="number">-1</span>,right,part+<span class="string">'('</span>);</span><br><span class="line">        <span class="keyword">if</span>(right&gt;<span class="number">0</span>) dp(left,right<span class="number">-1</span>,part+<span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dp(n,n,<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; pairs of parentheses, write a function to generate all combinations of well-formed parentheses.&lt;/p&gt;
&lt;p&gt;For 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 394. Decode String</title>
    <link href="http://yoursite.com/2020/04/12/LeetCode-394-Decode-String/"/>
    <id>http://yoursite.com/2020/04/12/LeetCode-394-Decode-String/</id>
    <published>2020-04-12T02:03:41.000Z</published>
    <updated>2020-04-12T02:46:43.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: <code>k[encoded_string]</code>, where the <em>encoded_string</em> inside the square brackets is being repeated exactly <em>k</em> times. Note that <em>k</em> is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <em>k</em>. For example, there won't be input like <code>3a</code> or <code>2[4]</code>.</p><p><strong>Examples:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; &quot;3[a]2[bc]&quot;, return &quot;aaabcbc&quot;.</span><br><span class="line">s &#x3D; &quot;3[a2[c]]&quot;, return &quot;accaccacc&quot;.</span><br><span class="line">s &#x3D; &quot;2[abc]3[cd]ef&quot;, return &quot;abcabccdcdcdef&quot;.</span><br></pre></td></tr></table></figure></blockquote><p>Obviously we should use stack to tackle the problem.</p><p>Read the string from left to right , if you meet a '[' , push the string into the stack , if you meet a ']' , pop the string out of the stack.</p><p>Also keep a length keeper for each string in the stack , slightly upper than the letters.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> decodeString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (char !== <span class="string">"]"</span>) &#123; stack.push(char); <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="keyword">let</span> cur = stack.pop();</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur !== <span class="string">'['</span>) &#123;</span><br><span class="line">      str = cur + str;</span><br><span class="line">      cur = stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="string">''</span>;</span><br><span class="line">    cur = stack.pop();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>(cur))) &#123;</span><br><span class="line">        <span class="comment">// if the current element is a digit</span></span><br><span class="line">      num = cur + num;</span><br><span class="line">      cur = stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    stack.push(cur);</span><br><span class="line">    stack.push(str.repeat(<span class="built_in">Number</span>(num)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an encoded string, return its decoded string.&lt;/p&gt;
&lt;p&gt;The encoding rule is: &lt;code&gt;k[encoded_string]&lt;/code&gt;, where the &lt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 200. Number of Islands</title>
    <link href="http://yoursite.com/2020/04/11/LeetCode-200-Number-of-Islands/"/>
    <id>http://yoursite.com/2020/04/11/LeetCode-200-Number-of-Islands/</id>
    <published>2020-04-11T02:20:42.000Z</published>
    <updated>2020-04-11T02:54:58.065Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a 2d grid map of <code>'1'</code>s (land) and <code>'0'</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">11110</span><br><span class="line">11010</span><br><span class="line">11000</span><br><span class="line">00000</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">11000</span><br><span class="line">11000</span><br><span class="line">00100</span><br><span class="line">00011</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// trivial DFS method</span></span><br><span class="line"><span class="keyword">var</span> numIslands = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// judge before jump into the further mess of recursion</span></span><br><span class="line">        <span class="keyword">if</span> (grid[x][y] === <span class="string">'1'</span>) &#123;</span><br><span class="line">            grid[x][y] = <span class="string">'0'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; grid.length - <span class="number">1</span>) &#123;</span><br><span class="line">            dfs(x+<span class="number">1</span>, y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (y &lt; grid[x].length - <span class="number">1</span>) &#123;</span><br><span class="line">            dfs(x, y+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; grid.length) &#123;</span><br><span class="line">            dfs(x<span class="number">-1</span>, y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; y &lt; grid[x].length) &#123;</span><br><span class="line">            dfs(x, y<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] === <span class="string">'1'</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                dfs(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a 2d grid map of &lt;code&gt;&#39;1&#39;&lt;/code&gt;s (land) and &lt;code&gt;&#39;0&#39;&lt;/code&gt;s (water), count the number of islands. An island is sur
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 102. Binary Tree Level Order Traversal</title>
    <link href="http://yoursite.com/2020/04/10/LeetCode-102-Binary-Tree-Level-Order-Traversal/"/>
    <id>http://yoursite.com/2020/04/10/LeetCode-102-Binary-Tree-Level-Order-Traversal/</id>
    <published>2020-04-10T07:40:26.000Z</published>
    <updated>2020-04-10T08:09:05.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br />Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><p>Intuitive recursive method :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">levelOrder</span>(<span class="params">root, level=<span class="number">0</span>, result=[]</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root) &#123;</span><br><span class="line"><span class="comment">// init subarray if it doesn't exist</span></span><br><span class="line">    <span class="keyword">let</span> arr = (result[level] = (result[level] || []));</span><br><span class="line">arr.push(root.val);</span><br><span class="line">levelOrder(root.left, level+<span class="number">1</span>, result);</span><br><span class="line">levelOrder(root.right, level+<span class="number">1</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then the BFS method</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">levelOrder</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (queue.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> len = queue.length;</span><br><span class="line">        <span class="keyword">let</span> level = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = queue.pop();</span><br><span class="line">            level.push(temp.val);</span><br><span class="line">            <span class="keyword">if</span>(temp.left) queue.unshift(temp.left);</span><br><span class="line">            <span class="keyword">if</span>(temp.right) queue.unshift(temp.right);</span><br><span class="line">            <span class="comment">// The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.push(level);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the &lt;em&gt;level order&lt;/em&gt; traversal of its nodes’ values. (ie, from left to right, level by level
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 739. Daily Temperatures</title>
    <link href="http://yoursite.com/2020/04/09/LeetCode-739-Daily-Temperatures/"/>
    <id>http://yoursite.com/2020/04/09/LeetCode-739-Daily-Temperatures/</id>
    <published>2020-04-09T06:36:41.000Z</published>
    <updated>2020-04-09T07:59:02.407Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a list of daily temperatures <code>T</code>, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put <code>0</code> instead.</p><p>For example, given the list of temperatures <code>T = [73, 74, 75, 71, 69, 72, 76, 73]</code>, your output should be <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>.</p><p><strong>Note:</strong> The length of <code>temperatures</code> will be in the range <code>[1, 30000]</code>. Each temperature will be an integer in the range <code>[30, 100]</code>.</p></blockquote><p>Use stack to store the temporary ready-to-compare elements</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">T</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> dailyTemperatures = <span class="function"><span class="keyword">function</span>(<span class="params">T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T===<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> temp = []; <span class="comment">// stack</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="built_in">Array</span>(T.length).fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;T.length;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (temp.length&gt;<span class="number">0</span> &amp;&amp; T[i]&gt;T[temp[temp.length<span class="number">-1</span>]])  &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// if meet the right element pop out the one in the stack , record the index and move on</span></span><br><span class="line">            <span class="keyword">let</span> index = temp.pop();</span><br><span class="line">            res[index] = i - index;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.push(i);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a list of daily temperatures &lt;code&gt;T&lt;/code&gt;, return a list such that, for each day in the input, tells you how many da
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 75. Sort Colors</title>
    <link href="http://yoursite.com/2020/04/08/LeetCode-75-Sort-Colors/"/>
    <id>http://yoursite.com/2020/04/08/LeetCode-75-Sort-Colors/</id>
    <published>2020-04-08T03:05:36.000Z</published>
    <updated>2020-04-08T04:49:50.168Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array with <em>n</em> objects colored red, white or blue, sort them <strong><a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p><p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p><p><strong>Note:</strong> You are not suppose to use the library’s sort function for this problem.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,0,2,1,1,0]</span><br><span class="line">Output: [0,0,1,1,2,2]</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><ul><li>A rather straight forward solution is a two-pass algorithm using counting sort.<br />First, iterate the array counting number of 0’s, 1’s, and 2’s, then  overwrite array with total number of 0’s, then 1’s and followed by 2’s.</li><li>Could you come up with a one-pass algorithm using only constant space?</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortColors = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = nums.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// [0...][1...][2...]</span></span><br><span class="line">  <span class="comment">// [0...] move 0 to the start , start ++ , i++ </span></span><br><span class="line">  <span class="comment">// [1...] i++ </span></span><br><span class="line">  <span class="comment">// [2...] move 2 to the end , end--</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i&lt;=end) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]===<span class="number">0</span>) &#123;</span><br><span class="line">            temp = nums[i];</span><br><span class="line">            nums[i] = nums[start];</span><br><span class="line">            nums[start++] = temp;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[i]===<span class="number">1</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[i]===<span class="number">2</span>) &#123;</span><br><span class="line">            temp = nums[i];</span><br><span class="line">            nums[i] = nums[end];</span><br><span class="line">            nums[end--] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array with &lt;em&gt;n&lt;/em&gt; objects colored red, white or blue, sort them &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 114. Flatten Binary Tree to Linked List</title>
    <link href="http://yoursite.com/2020/04/07/LeetCode-114-Flatten-Binary-Tree-to-Linked-List/"/>
    <id>http://yoursite.com/2020/04/07/LeetCode-114-Flatten-Binary-Tree-to-Linked-List/</id>
    <published>2020-04-07T09:53:46.000Z</published>
    <updated>2020-04-07T10:47:15.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, flatten it to a linked list in-place.</p><p>For example, given the following tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   5</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">3   4   6</span><br></pre></td></tr></table></figure><p>The flattened tree should look like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line">   \</span><br><span class="line">    3</span><br><span class="line">     \</span><br><span class="line">      4</span><br><span class="line">       \</span><br><span class="line">        5</span><br><span class="line">         \</span><br><span class="line">          6</span><br></pre></td></tr></table></figure></blockquote><p>The trivial recursive method</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">    temp = root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(temp) &#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.left) &#123;</span><br><span class="line">            pre = temp.left;</span><br><span class="line">            <span class="keyword">while</span>(pre.right) &#123;</span><br><span class="line">                pre = pre.right;</span><br><span class="line">            &#125;</span><br><span class="line">            pre.right = temp.right;</span><br><span class="line">            temp.right = temp.left;</span><br><span class="line">            temp.left = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, flatten it to a linked list in-place.&lt;/p&gt;
&lt;p&gt;For example, given the following tree:&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 78. Subsets</title>
    <link href="http://yoursite.com/2020/04/06/LeetCode-78-Subsets/"/>
    <id>http://yoursite.com/2020/04/06/LeetCode-78-Subsets/</id>
    <published>2020-04-06T06:24:04.000Z</published>
    <updated>2020-04-06T10:02:29.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p><p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><h4 id="section"></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subsets= <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    generateSubsets([],<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">generateSubsets</span>(<span class="params">temp,index</span>) </span>&#123;</span><br><span class="line">        res.push(temp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=index;i&lt;nums.length;i++) &#123;</span><br><span class="line">            generateSubsets([...temp,nums[i]],i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then I found a more concise version:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subsets = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> res = [[]]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">res.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">res.push([...item, nums[i]])</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a set of &lt;strong&gt;distinct&lt;/strong&gt; integers, &lt;em&gt;nums&lt;/em&gt;, return all possible subsets (the power set).&lt;/p&gt;
&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 791. Custom Sort String</title>
    <link href="http://yoursite.com/2020/04/04/LeetCode-791-Custom-Sort-String/"/>
    <id>http://yoursite.com/2020/04/04/LeetCode-791-Custom-Sort-String/</id>
    <published>2020-04-04T12:50:50.000Z</published>
    <updated>2020-04-05T04:01:12.611Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>S</code> and <code>T</code> are strings composed of lowercase letters. In <code>S</code>, no letter occurs more than once.</p><p><code>S</code> was sorted in some custom order previously. We want to permute the characters of <code>T</code> so that they match the order that <code>S</code> was sorted. More specifically, if <code>x</code> occurs before <code>y</code> in <code>S</code>, then <code>x</code> should occur before <code>y</code> in the returned string.</p><p>Return any permutation of <code>T</code> (as a string) that satisfies this property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example :</span><br><span class="line">Input: </span><br><span class="line">S &#x3D; &quot;cba&quot;</span><br><span class="line">T &#x3D; &quot;abcd&quot;</span><br><span class="line">Output: &quot;cbad&quot;</span><br><span class="line">Explanation: </span><br><span class="line">&quot;a&quot;, &quot;b&quot;, &quot;c&quot; appear in S, so the order of &quot;a&quot;, &quot;b&quot;, &quot;c&quot; should be &quot;c&quot;, &quot;b&quot;, and &quot;a&quot;. </span><br><span class="line">Since &quot;d&quot; does not appear in S, it can be at any position in T. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; are also valid outputs.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>S</code> has length at most <code>26</code>, and no character is repeated in <code>S</code>.</li><li><code>T</code> has length at most <code>200</code>.</li><li><code>S</code> and <code>T</code> consist of lowercase letters only.</li></ul></blockquote><p>Well there is the no loop no set solution :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customSortString = <span class="function"><span class="keyword">function</span>(<span class="params">S, T</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// break S &amp; T into array of chars</span></span><br><span class="line">    <span class="keyword">let</span> first = S.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> second = T.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(first.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> index = second.indexOf(first[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// if the element exists</span></span><br><span class="line">            res.push(second[index]);</span><br><span class="line">            second.splice(index,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.shift();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125; </span><br><span class="line">    res.push(...second);</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>First my program was like this and it failed :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customSortString = <span class="function"><span class="keyword">function</span>(<span class="params">S, T</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// break S &amp; T into array of chars</span></span><br><span class="line">    <span class="keyword">let</span> first = S.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> second = T.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(first.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> index = second.indexOf(first[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// if the element exists</span></span><br><span class="line">            res.push(second[index]);</span><br><span class="line">            second.splice(index,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.shift();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125; </span><br><span class="line">    res.push(second);</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The failed case is :</p><blockquote><p>Input</p><p>"disqyr" "iwyrysqrdj"</p><p>Output</p><p>"disqyyrrw,j"</p><p>Expected</p><p>"disqyyrrjw"</p></blockquote><p>So I wrote a testing program :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="string">"disqyr"</span>;</span><br><span class="line">T = <span class="string">"iwyrysqrdj"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customSortString = <span class="function"><span class="keyword">function</span>(<span class="params">S, T</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// break S &amp; T into array of chars</span></span><br><span class="line">    <span class="keyword">let</span> first = S.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> second = T.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(first.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> index = second.indexOf(first[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// if the element exists</span></span><br><span class="line">            res.push(second[index]);</span><br><span class="line">            second.splice(index,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>,second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.shift();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>,first)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.push(second);</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(customSortString(S,T));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> [</span><br><span class="line">  <span class="string">'i'</span>, <span class="string">'w'</span>, <span class="string">'y'</span>,</span><br><span class="line">  <span class="string">'r'</span>, <span class="string">'y'</span>, <span class="string">'s'</span>,</span><br><span class="line">  <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'j'</span></span><br><span class="line">]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'i'</span>, <span class="string">'s'</span>, <span class="string">'q'</span>, <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [</span><br><span class="line">  <span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>,</span><br><span class="line">  <span class="string">'y'</span>, <span class="string">'s'</span>, <span class="string">'q'</span>,</span><br><span class="line">  <span class="string">'r'</span>, <span class="string">'j'</span></span><br><span class="line">]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'s'</span>, <span class="string">'q'</span>, <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [</span><br><span class="line">  <span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>,</span><br><span class="line">  <span class="string">'y'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>,</span><br><span class="line">  <span class="string">'j'</span></span><br><span class="line">]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'q'</span>, <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'r'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">1</span> []</span><br><span class="line">disqyyrrw,j</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Now it's clear that the rest of second array needs to be turned into a string.</p><p>And <code>Three dots ( … ) in JavaScript</code> occurs in a function call or alike, it's called a "spread operator" and expands an array into a list.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; are strings composed of lowercase letters. In &lt;code&gt;S&lt;/code&gt;, no letter occurs more than o
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 33. Search in Rotated Sorted Array</title>
    <link href="http://yoursite.com/2020/04/04/LeetCode-33-Search-in-Rotated-Sorted-Array/"/>
    <id>http://yoursite.com/2020/04/04/LeetCode-33-Search-in-Rotated-Sorted-Array/</id>
    <published>2020-04-04T07:27:28.000Z</published>
    <updated>2020-04-04T12:03:13.497Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm's runtime complexity must be in the order of <strong><em>O</em>(log <em>n</em>).</strong></p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></blockquote><p>Well it already says O(log n) so we must take divide and conquer into consideration .</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((left+right)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums[mid]===target) <span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums[left]&lt;=nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left]&lt;=target &amp;&amp; target &lt;=nums[mid]) &#123;</span><br><span class="line">                right = mid<span class="number">-1</span>;</span><br><span class="line">                <span class="comment">// target must be in the left part</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                <span class="comment">// target must be in the right part</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., &lt;code&gt;[0,1,2,4,
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
