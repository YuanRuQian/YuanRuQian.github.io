<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-12-05T12:33:05.145Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现 Array.prototype.reduce</title>
    <link href="http://yoursite.com/2020/12/05/%E5%AE%9E%E7%8E%B0-Array-prototype-reduce/"/>
    <id>http://yoursite.com/2020/12/05/%E5%AE%9E%E7%8E%B0-Array-prototype-reduce/</id>
    <published>2020-12-05T10:30:33.000Z</published>
    <updated>2020-12-05T12:33:05.145Z</updated>
    
    <content type="html"><![CDATA[<p>昨天面试 面试官问我还记得 <code>reduce</code> 吗 我不太记得了 好尴尬 😅</p><p>本来是要我手撕一个的</p><p>哎 面试后补救一下 🚑</p><p>还是先看 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">MDN</a></p><p>The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.</p><p>基本格式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback( accumulator, currentValue, [, index[, array]] )[, initialValue])</span><br></pre></td></tr></table></figure><p>下面开始手撕</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback, initial = undefined</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果是箭头函数的话 this 会指向外界而不是 调 reduce 方法的那个 Array 本身</span></span><br><span class="line">    <span class="keyword">let</span> acc = initial;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(acc) &#123;</span><br><span class="line">            acc = callback.call(<span class="literal">undefined</span>, acc, <span class="built_in">this</span>[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            acc = <span class="built_in">this</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>就相当于 <code>for</code> 或者 <code>forEach</code> 方法吧</p><p>测试一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue;</span><br><span class="line"><span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback, initial = undefined</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> acc = initial;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(acc) &#123;</span><br><span class="line">            acc = callback.call(<span class="literal">undefined</span>, acc, <span class="built_in">this</span>[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            acc = <span class="built_in">this</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(reducer));</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(reducer, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天面试 面试官问我还记得 &lt;code&gt;reduce&lt;/code&gt; 吗 我不太记得了 好尴尬 😅&lt;/p&gt;
&lt;p&gt;本来是要我手撕一个的&lt;/p&gt;
&lt;p&gt;哎 面试后补救一下 🚑&lt;/p&gt;
&lt;p&gt;还是先看 &lt;a href=&quot;https://developer.mozilla.or
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现 Promise.all 和 Promoise.race</title>
    <link href="http://yoursite.com/2020/12/05/%E5%AE%9E%E7%8E%B0-Promise-all-%E5%92%8C-Promoise-race/"/>
    <id>http://yoursite.com/2020/12/05/%E5%AE%9E%E7%8E%B0-Promise-all-%E5%92%8C-Promoise-race/</id>
    <published>2020-12-05T07:50:52.000Z</published>
    <updated>2020-12-05T09:52:11.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="promise.all">Promise.all</h3><p>首先还是先来看定义 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all">Promise.all</a></p><p>Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中 promise 有一个失败（rejected），此实例回调失败（reject），失败的原因是第一个失败 promise 的结果。</p><p>它通常在启动多个异步任务并发运行并为其结果创建承诺之后使用，以便人们可以等待所有任务完成。</p><p>为啥我会想实现一下它呢 因为我在 <code>vetur</code> 的源码里看到了这一段</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> packages = (<span class="keyword">await</span> <span class="built_in">Promise</span>.all(nodeModulesPaths.map(<span class="function"><span class="params">path</span> =&gt;</span> getPackage(path)))).filter(<span class="function"><span class="params">info</span> =&gt;</span> info) <span class="keyword">as</span> <span class="built_in">Array</span>&lt;&#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  dir: <span class="built_in">string</span>;</span><br><span class="line">  version: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">module</span>: unknown;</span><br><span class="line">&#125;&gt;;</span><br></pre></td></tr></table></figure><p>很明显 作者的意思是 如果拿到了所有符合 path 的 package 那么就将它们作为 Array 返回</p><p>下面来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先 既然是返回 Promise 而且又是原生方法 那么就在 prototype 上实现吧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数：一个可迭代对象，如 Array 或 String</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [], len = promises.length;</span><br><span class="line">  <span class="keyword">let</span> currentIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> p <span class="keyword">of</span> promises) &#123;</span><br><span class="line">          <span class="built_in">Promise</span>.resolve(p).then(</span><br><span class="line">              <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">                  res.push(val);</span><br><span class="line">                  <span class="keyword">if</span>(++currentIndex === len) &#123;</span><br><span class="line">                      <span class="keyword">return</span> res;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">// 如果是最后一个 返回所有结果</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> reject(err);</span><br><span class="line">              &#125;</span><br><span class="line">          )</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [], len = promises.length;</span><br><span class="line">  <span class="keyword">let</span> currentIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> p <span class="keyword">of</span> promises) &#123;</span><br><span class="line">          <span class="built_in">Promise</span>.resolve(p).then(</span><br><span class="line">              <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">                  res.push(val);</span><br><span class="line">                  <span class="keyword">if</span>(++currentIndex === len) &#123;</span><br><span class="line">                      <span class="keyword">return</span> res;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">// 如果是最后一个 返回所有结果</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> reject(err);</span><br><span class="line">              &#125;</span><br><span class="line">          )</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(values);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出： Array [3, 42, &quot;foo&quot;]</span></span><br><span class="line"><span class="comment">// 其实不难 就是理清思路就好 🎉</span></span><br></pre></td></tr></table></figure><h3 id="promise.race">Promise.race</h3><p><code>race</code> 也是一个很有意思的方法 先看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race">MDN</a></p><p>Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</p><p>所以说 和上面 Promise.all 的思路差不多 只不过现在只考虑传入 iterable 的第一个元素 🤔</p><p>下面实现一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!promises.length) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// Promise.race([]) 返回一个 pending 的 Promise 永远等待中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> p <span class="keyword">of</span> promises) &#123;</span><br><span class="line">            <span class="built_in">Promise</span>.resolve(p).then(</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 不管是 resolve 还是 reject</span></span><br><span class="line">                <span class="comment">// 只要完成就直接返回</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!promises.length) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// Promise.race([]) 返回一个 pending 的 Promise 永远等待中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> p <span class="keyword">of</span> promises) &#123;</span><br><span class="line">            <span class="built_in">Promise</span>.resolve(p).then(</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 不管是 resolve 还是 reject</span></span><br><span class="line">                <span class="comment">// 只要完成就直接返回</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([promise1, promise2]).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出 &quot;two&quot; 说明 promise2 更快</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>⚠️ 注意： 一开始我想直接用 <code>promise[0]</code> 解决问题 但是 promise 不一定都是同步执行的 比如测试里的 <code>setTimeout</code> 所以还是要所有元素都得考虑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;promise.all&quot;&gt;Promise.all&lt;/h3&gt;
&lt;p&gt;首先还是先来看定义 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现 JSON.stringify</title>
    <link href="http://yoursite.com/2020/11/01/%E5%AE%9E%E7%8E%B0-JSON-stringify/"/>
    <id>http://yoursite.com/2020/11/01/%E5%AE%9E%E7%8E%B0-JSON-stringify/</id>
    <published>2020-11-01T12:37:47.000Z</published>
    <updated>2020-11-01T14:31:11.975Z</updated>
    
    <content type="html"><![CDATA[<p><code>JSON.stringify</code> 是可以进行深拷贝的方法之一 先来看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">MDN</a> 上的描述 <code>JSON.stringify()</code> 方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性。 不过这里我就先只实现最简单的功能吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Lily&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(student));</span><br><span class="line"><span class="comment">// &#123;&quot;name&quot;:&quot;Lily&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is a function&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(fn));</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>由于函数不是标准的 json 所以无法正常解析为字符串</p><p>下面来实现 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringify</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> type = <span class="keyword">typeof</span> obj;</span><br><span class="line">    <span class="keyword">if</span>(type !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/string|function|undefined/</span>.test(type)) &#123;</span><br><span class="line">            obj = <span class="string">&#x27;&quot;&#x27;</span> + obj + <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> json = [];</span><br><span class="line">        <span class="keyword">let</span> arr = <span class="built_in">Array</span>.isArray(obj);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">let</span> value = obj[key];</span><br><span class="line">            <span class="keyword">let</span> type = <span class="keyword">typeof</span> value;</span><br><span class="line">            <span class="keyword">if</span>(<span class="regexp">/string|function|undefined/</span>.test(type)) &#123;</span><br><span class="line">                value = <span class="string">`<span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                value = stringify(value);</span><br><span class="line">            &#125;</span><br><span class="line">            json.push(arr ? <span class="string">&quot;&quot;</span> : <span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (arr ? <span class="string">&quot;[&quot;</span> : <span class="string">&quot;&#123;&quot;</span>) + <span class="built_in">String</span>(json) + (arr ? <span class="string">&quot;]&quot;</span> : <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 测试一下 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Lily&#x27;</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(stringify(obj));</span><br><span class="line"><span class="comment">//  &quot;&#123;name:Lily,fn:function() &#123;</span></span><br><span class="line"><span class="comment">//        console.log(this.name);</span></span><br><span class="line"><span class="comment">//    &#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;JSON.stringify&lt;/code&gt; 是可以进行深拷贝的方法之一 先来看 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/J
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS实现一个类</title>
    <link href="http://yoursite.com/2020/10/16/JS%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%B1%BB/"/>
    <id>http://yoursite.com/2020/10/16/JS%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%B1%BB/</id>
    <published>2020-10-16T02:02:58.000Z</published>
    <updated>2020-10-16T11:48:19.289Z</updated>
    
    <content type="html"><![CDATA[<p>首先 搞清楚怎么直接继承 ⬇️</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params">family</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.family = family;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params">parent</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mom = <span class="keyword">new</span> parent(<span class="string">&#x27;Smith&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> daughter = <span class="keyword">new</span> child(mom);</span><br><span class="line">daughter.prototype = mom.prototype;</span><br><span class="line">daughter.prototype.name = <span class="string">&#x27;Lily&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(mon.prototype.name)</span><br></pre></td></tr></table></figure><p>先去 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">MDN</a> 复习一下 <code>Object.defineProperty</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params">parent, props</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    Fn.prototype = parent;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">new</span> Fn();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(fn,key,&#123;</span><br><span class="line">            ...props[key],</span><br><span class="line">            enumerable:<span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>const front = new Set([’(’,’{’,’[’])</p><pre><code>let stack = [];let line = '&#123;[()]([])&#125;()[]'.split('');for(let letter of line) &#123;    let flag = true;    if(front.has(letter)) &#123;        stack.push(letter);    &#125; else &#123;        let top = stack.pop();        if(top!==letter) &#123;            flag = false;            break;        &#125;    &#125;&#125;(!flag || stack.length&gt;0) ? print('No') : print('Yes');let stack = [];let line = '&#123;[()]([])&#125;()[]'.split('');let flag = true;for(let letter of line) &#123;    flag = true;    if(front.has(letter)) &#123;        stack.push(letter);    &#125; else &#123;        let top = stack.pop();        if(top!==letter) &#123;            flag = false;            break;        &#125;    &#125;&#125;(!flag || stack.length&gt;0) ? print('No') : print('Yes');</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先 搞清楚怎么直接继承 ⬇️&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现组合函数</title>
    <link href="http://yoursite.com/2020/10/11/%E5%AE%9E%E7%8E%B0%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/10/11/%E5%AE%9E%E7%8E%B0%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0/</id>
    <published>2020-10-11T14:23:13.000Z</published>
    <updated>2020-10-11T15:14:13.371Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个可以组合合成多个函数的函数 <code>compose</code><br />实现效果 ⬇️</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sqrt = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> doubleThenSqrt = compose(sqrt, double);</span><br><span class="line"></span><br><span class="line">doubleThenSqrt(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>如果是两个参数 当然可以直接套娃</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">f,g</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> doubleThenSqrt = compose(sqrt, double);</span><br><span class="line"></span><br><span class="line">doubleThenSqrt(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>那么下面改进一下 考虑多个参数的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">res</span> =&gt;</span> [...args]</span><br><span class="line">    .reduce(</span><br><span class="line">        (res, fn) =&gt; fn(res), res</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> doubleThenSqrtThenDouble = compose(double, sqrt, double);</span><br><span class="line">doubleThenSqrtThenDouble(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> doubleThenSqrt = compose(double,sqrt);</span><br><span class="line">doubleThenSqrt(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现一个可以组合合成多个函数的函数 &lt;code&gt;compose&lt;/code&gt;&lt;br /&gt;
实现效果 ⬇️&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一些关于React的小细节</title>
    <link href="http://yoursite.com/2020/10/08/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8EReact%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/"/>
    <id>http://yoursite.com/2020/10/08/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8EReact%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/</id>
    <published>2020-10-08T02:23:02.000Z</published>
    <updated>2020-11-06T03:30:47.209Z</updated>
    
    <content type="html"><![CDATA[<p>主要是今天读到了这一篇文章 <a href="https://medium.com/@baphemot/a-react-job-interview-recruiter-perspective-f1096f54dd16">A React job interview — recruiter perspective.</a> 个人觉得写的挺好 那就整理一些文章里提到的问题吧</p><h3 id="为什么虽然没有明确使用-react-但是还是需要-import-react-from-react">为什么虽然没有明确使用 React 但是还是需要 <code>import React from 'react'</code></h3><p>考古官网文档 <a href="https://reactjs.org/docs/jsx-in-depth.html">JSX in depth</a> 就可以找到答案</p><p>看下这个在线的 <a href="https://babeljs.io/repl/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=react&amp;prettier=false&amp;targets=&amp;version=7.11.6&amp;externalPlugins=">Babel 编译器的例子</a> 就很明显叻</p><p>JSX 例子： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyButton color=<span class="string">&quot;blue&quot;</span> shadowSize=&#123;<span class="number">2</span>&#125;&gt;</span><br><span class="line">  Click Me</span><br><span class="line">&lt;/MyButton&gt;</span><br></pre></td></tr></table></figure> 编译后得到的是： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*#__PURE__*/</span></span><br><span class="line">React.createElement(MyButton, &#123;</span><br><span class="line">  color: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">  shadowSize: <span class="number">2</span></span><br><span class="line">&#125;, <span class="string">&quot;Click Me&quot;</span>);</span><br></pre></td></tr></table></figure> 可见 JSX 支持 <code>React.createElement(component, props, ...children)</code> 的语法糖 虽然看起来写得像 HTML 编译一下 但还是需要 React</p><h3 id="为什么-jsx-写的组件需要首字母大写">为什么 JSX 写的组件需要首字母大写</h3><p>以下摘自官网： &gt; Capitalized types indicate that the JSX tag is referring to a React component. These tags get compiled into a direct reference to the named variable, so if you use the JSX <Foo /> expression, Foo must be in scope.</p><p>所以只有大写就是说明“我是 React 组件” 小写就认为是 HTML 标签 🏷️ 会直接编译成对应名字变量的引用</p><p>不妨来作死 试一试小写的结果 <a href="https://codepen.io/minae/pen/omwMpZ?editors=0010">看看这个 codepen 上面的例子</a></p><p>如果把 <code>instructorsList</code> 改成 <code>InstructorsList</code> 就可以渲染成功</p><h3 id="react-组件的两种声明形式分别什么时候用哪一种">React 组件的两种声明形式？分别什么时候用哪一种？</h3><p>可以看看 <a href="https://reactjs.org/docs/components-and-props.html">Components and Props</a> 复习一下 一种是函数式 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 一种是 ES6 class 形式 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> class 主要是可以进行状态管理 （<code>state</code>）和 可以生命周期函数 官网上的时钟例子很明显： 函数式： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clock</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;It is &#123;props.date.toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;Clock date=&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125; /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure> class 形式： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">this</span>.timerID = <span class="built_in">setInterval</span>(</span><br><span class="line">      () =&gt; <span class="built_in">this</span>.tick(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;It is &#123;<span class="built_in">this</span>.state.date.toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="有状态的组件的挂载过程">有状态的组件的挂载过程</h3><p>根据 <a href="https://reactjs.org/docs/react-component.html">React Component</a> 可知挂载过程顺序是 - constructor() - static getDerivedStateFromProps() - render() - componentDidMount()</p><h3 id="如果你需要从-api-异步请求数据你会用哪个生命周期函数为什么">如果你需要从 API 异步请求数据，你会用哪个生命周期函数？为什么？</h3><p><code>componentDidMount()</code> 在组件挂载后立刻执行（向树中插入） 需要 DOM 节点的初始化行为需要放在这里 如果这里订阅了 那么在 <code>componentWillUnmount()</code> 里也不要忘记接触订阅</p><p>因为当数据被获取之后，你可以在这里使用 <code>setState()</code> 来更新组件。此时 <code>setState()</code> 会再次触发渲染，但是 UI 更新只会发生一次，所以用户不会看到中间的状态。</p><p>比如 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="built_in">this</span>._asyncRequest = loadMyAsyncData().then(</span><br><span class="line">    externalData =&gt; &#123;</span><br><span class="line">      <span class="built_in">this</span>._asyncRequest = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;externalData&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 关于这个问题 还可以看看 <a href="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html">Update on Async Rendering</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要是今天读到了这一篇文章 &lt;a href=&quot;https://medium.com/@baphemot/a-react-job-interview-recruiter-perspective-f1096f54dd16&quot;&gt;A React job interview — rec
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>实现 call, apply, bind</title>
    <link href="http://yoursite.com/2020/10/07/%E5%AE%9E%E7%8E%B0-call-bind-apply/"/>
    <id>http://yoursite.com/2020/10/07/%E5%AE%9E%E7%8E%B0-call-bind-apply/</id>
    <published>2020-10-07T06:33:06.000Z</published>
    <updated>2020-10-07T12:30:08.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="call"><a class="markdownIt-Anchor" href="#call"></a> call</h3><p>先复习 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">MDN</a><br /><code>func.call([thisArg[, arg1, arg2, ...argN]])</code><br />所以需要传入指定的 <code>this</code> 和一个参数列表<br />返回的就是函数执行本身的返回结果</p><p>同时复习一下 <code>arguments</code> 参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyMax</span>(<span class="params">...arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line">&#125;</span><br><span class="line">MyMax(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>);</span><br><span class="line"><span class="comment">/* Arguments(5) [1, 3, 5, 7, 9, callee: (...), Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"><span class="comment">0: 1</span></span><br><span class="line"><span class="comment">1: 3</span></span><br><span class="line"><span class="comment">2: 5</span></span><br><span class="line"><span class="comment">3: 7</span></span><br><span class="line"><span class="comment">4: 9</span></span><br><span class="line"><span class="comment">callee: (...)</span></span><br><span class="line"><span class="comment">length: 5</span></span><br><span class="line"><span class="comment">Symbol(Symbol.iterator): ƒ values()</span></span><br><span class="line"><span class="comment">get callee: ƒ ()</span></span><br><span class="line"><span class="comment">set callee: ƒ ()</span></span><br><span class="line"><span class="comment">__proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IntoMyMax</span>(<span class="params">...arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(args).slice(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line">&#125;</span><br><span class="line">IntoMyMax(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>);</span><br><span class="line"><span class="comment">// (5) [1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure><p>可见通过 <code>arguments</code> 即可得到函数传入的参数</p><p>下面开始实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [thisArg, ...args] = [...arguments];</span><br><span class="line">    <span class="keyword">if</span>(!thisArg) &#123;</span><br><span class="line">        thisArg = <span class="built_in">window</span> || globalThis;</span><br><span class="line">    &#125;</span><br><span class="line">    thisArg.func = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">let</span> res = thisArg.func(...args);</span><br><span class="line">    <span class="keyword">delete</span> thisArg.func;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintAllOfThese</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> a <span class="keyword">of</span> args) <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">PrintAllOfThese.myCall(<span class="built_in">this</span>,<span class="string">&#x27;this&#x27;</span>,<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;my&#x27;</span>,<span class="string">&#x27;call&#x27;</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">is</span></span><br><span class="line"><span class="comment">my</span></span><br><span class="line"><span class="comment">call</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure><h3 id="apply"><a class="markdownIt-Anchor" href="#apply"></a> apply</h3><p>先复习 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">MDN</a><br />可见就是 <code>call</code> 第二个参数从参数列表变成数组罢了 改改就成</p><p>下面开始实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [thisArg, args] = [...arguments];</span><br><span class="line">    <span class="keyword">if</span>(!thisArg) &#123;</span><br><span class="line">        thisArg = <span class="built_in">window</span> || globalThis;</span><br><span class="line">    &#125;</span><br><span class="line">    thisArg.func = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">let</span> res = thisArg.func(args);</span><br><span class="line">    <span class="keyword">delete</span> thisArg.func;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintAllOfThese</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> a <span class="keyword">of</span> args) <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">PrintAllOfThese.myApply(<span class="built_in">this</span>,[<span class="string">&#x27;this&#x27;</span>,<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;my&#x27;</span>,<span class="string">&#x27;apply&#x27;</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">is</span></span><br><span class="line"><span class="comment">my</span></span><br><span class="line"><span class="comment">apply</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="bind"><a class="markdownIt-Anchor" href="#bind"></a> bind</h3><p>再来复习下 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind">MDN</a><br />对于返回值 MDN 这么说<br /><code>A copy of the given function with the specified this value, and initial arguments (if provided).</code></p><p>所以说是返回一个函数<br />柯里化套娃 这样（？）</p><p>下来来实现一下 ⬇️</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 第一个参数应该是 this 所以从第二个开始</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newArgs = [...arguments];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> self.apply(context,args.concat(newArgs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintAllOfThese</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> a <span class="keyword">of</span> args) <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> print = PrintAllOfThese.bind(<span class="built_in">this</span>,[<span class="string">&#x27;this&#x27;</span>,<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;my&#x27;</span>,<span class="string">&#x27;bind&#x27;</span>]);</span><br><span class="line">print();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this</span></span><br><span class="line"><span class="comment">is</span></span><br><span class="line"><span class="comment">my</span></span><br><span class="line"><span class="comment">bind</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;call&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#call&quot;&gt;&lt;/a&gt; call&lt;/h3&gt;
&lt;p&gt;先复习 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScri
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>instanceof 的原理与实现</title>
    <link href="http://yoursite.com/2020/10/06/instanceof-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/10/06/instanceof-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-10-06T00:53:11.000Z</published>
    <updated>2020-10-06T02:01:02.001Z</updated>
    
    <content type="html"><![CDATA[<p>先复习一下 <code>instanceof</code> 的背景：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof">MDN instanceof</a> &gt; The instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value.</p><p>所以就是原型链回溯 看看一路上是否有相等的 constructor 叻 🤔</p><p>下面是实现（<code>__proto__</code> 有点坑 不推荐这种直接拿私有属性的写法！！！请看最后） ⬇️ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyInstanceof = <span class="function">(<span class="params">left, right</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> leftPro = left.__proto__;</span><br><span class="line">    <span class="keyword">let</span> rightPro = right.prototype;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(leftPro === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(leftPro === rightPro) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        leftPro = leftPro.__proto__;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 测试一下 ⬇️ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">make, model, year</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.make = make;</span><br><span class="line">  <span class="built_in">this</span>.model = model;</span><br><span class="line">  <span class="built_in">this</span>.year = year;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> auto = <span class="keyword">new</span> Car(<span class="string">&#x27;Honda&#x27;</span>, <span class="string">&#x27;Accord&#x27;</span>, <span class="number">1998</span>);</span><br><span class="line"><span class="built_in">console</span>.log(MyInstanceof(auto, Car));</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure> ### ⚠️ <code>__proto__</code> 我看 <a href="Object.getPrototypeOf(left);">MDN</a> 的时候发现 <code>__proto__</code> 不再被推荐叻 所以我觉得 是不是改用 <code>Object.getPrototypeOf</code> 好点？？？ 毕竟 <code>left.__proto === Object.getPrototypeOf(left)</code> 结果是 <code>true</code></p><p>下面是改动后的实现 ⬇️ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyUpdatedInstanceof = <span class="function">(<span class="params">left, right</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> leftPro = <span class="built_in">Object</span>.getPrototypeOf(left);</span><br><span class="line">    <span class="keyword">let</span> rightPro = right.prototype;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(leftPro === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(leftPro === rightPro) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        leftPro = <span class="built_in">Object</span>.getPrototypeOf(left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 测试一下 ⬇️ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">make, model, year</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.make = make;</span><br><span class="line">  <span class="built_in">this</span>.model = model;</span><br><span class="line">  <span class="built_in">this</span>.year = year;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newAuto = <span class="keyword">new</span> Car(<span class="string">&#x27;Honda&#x27;</span>, <span class="string">&#x27;Accord&#x27;</span>, <span class="number">1998</span>);</span><br><span class="line"><span class="built_in">console</span>.log(MyUpdatedInstanceof(newAuto, Car));</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先复习一下 &lt;code&gt;instanceof&lt;/code&gt; 的背景：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof&quot;&gt;MDN in
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现debounce/throttle</title>
    <link href="http://yoursite.com/2020/10/04/%E5%AE%9E%E7%8E%B0debounce-throttle/"/>
    <id>http://yoursite.com/2020/10/04/%E5%AE%9E%E7%8E%B0debounce-throttle/</id>
    <published>2020-10-04T10:00:57.000Z</published>
    <updated>2020-10-05T01:46:44.234Z</updated>
    
    <content type="html"><![CDATA[<h3 id="防抖-debounce">防抖 debounce</h3><p><code>debounce</code> 即防抖 常见于频繁操作 <code>resize</code>, <code>mousemove</code>, <code>scroll</code>, <code>keypress</code> 等行为的场景</p><p>对于多次的连续动作 等到平息后 只提交一次 下面来手撕 ⬇️ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, delay</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写个测试 ⬇️ 一个显示鼠标位置的小 demo <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;playground&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#playground</span> &#123;</span></span><br><span class="line">  width: 100vh;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  background: yellow;</span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> playground = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;playground&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getUserAction = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">    playground.innerHTML = event.clientX + <span class="string">&#x27;, &#x27;</span> + event.clientY;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="javascript"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, delay</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> context = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            func.apply(context, args);</span><br><span class="line"><span class="javascript">            <span class="comment">// 考虑到需要传入 event 的情况 需要绑定 对应对象的 this 并且传入参数</span></span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">playground.onmousemove = debounce(getUserAction</span><br><span class="line">,1000);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure> codepen 直通车 🚗 ： <a href="https://codepen.io/yuanruqian/pen/ZEWgMaM">Debounce demo test</a> 测试显示 确实是停下后一秒再显示</p><h3 id="节流-throttle">节流 throttle</h3><p><code>throttle</code> 即节流 就是每隔段时间只执行一次 很显然 要么是记录一下时间看当前时间有没有超过 或者 直接用定时器解决</p><h4 id="时间比较法">时间比较法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> throttleByTime = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>((curr - prev)&gt;delay) &#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时器法">定时器法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> throttleByInterval = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>(!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续写个测试 ⬇️ <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;manual&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;automatic&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line">  display: grid;</span><br><span class="line">  grid-column-gap: 10vh;</span><br><span class="line">  grid-template-columns: auto auto;</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#2196F3</span>;</span></span><br><span class="line">  padding: 10vh;</span><br><span class="line">  height: 50vh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#manual</span> &#123;</span></span><br><span class="line">  background: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#automatic</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#66ccff</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> playground = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;playground&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getUserAction = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">    playground.innerHTML = event.clientX + <span class="string">&#x27;, &#x27;</span> + event.clientY;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="javascript"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, delay</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> context = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            func.apply(context, args);</span><br><span class="line"><span class="javascript">            <span class="comment">// 考虑到需要传入 event 的情况 需要绑定 对应对象的 this 并且传入参数</span></span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">playground.onmousemove = debounce(getUserAction</span><br><span class="line">,1000);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>codepen 直通车 🚗： <a href="https://codepen.io/yuanruqian/pen/bGpXJoW">Throttle demo test</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;防抖-debounce&quot;&gt;防抖 debounce&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;debounce&lt;/code&gt; 即防抖 常见于频繁操作 &lt;code&gt;resize&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;scroll&lt;/code&gt;,
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现柯里化</title>
    <link href="http://yoursite.com/2020/10/04/%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>http://yoursite.com/2020/10/04/%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</id>
    <published>2020-10-04T02:29:05.000Z</published>
    <updated>2020-10-04T04:35:22.980Z</updated>
    
    <content type="html"><![CDATA[<p>今天把之前刷题的记录都删掉了 就 感觉博客还是不应该单纯刷题 不如手撕 API 这样 🤔 不太后悔 也不心疼 （说明我之前搞得真的没有价值 😭</p><p>好了不说了 开始手撕 这是需要达成的样子 ⬇️ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> curriedSum = curry(sum);</span><br><span class="line"></span><br><span class="line">alert( curriedSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) ); <span class="comment">// 6, still callable normally</span></span><br><span class="line">alert( curriedSum(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>) ); <span class="comment">// 6, currying of 1st arg</span></span><br><span class="line">alert( curriedSum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) ); <span class="comment">// 6, full currying</span></span><br></pre></td></tr></table></figure> 既然是“连贯的” 返回的肯定也是一个函数</p><p>先来看下 一个函数 如何获取它的参数等基本信息 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);  </span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line">sum.length;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br></pre></td></tr></table></figure> 所以可以通过内部调用 <code>argumemts.length</code> 获取传入的参数个数 可以通过 <code>fn.length</code> 获取需要的参数个数 由上面的例子可以看出来 如果 <code>fn.length</code> 大于 <code>arguments.length</code> 需要返回一个函数以供之后调用 即 <code>curriedSum(1)(2,3)</code> 如果 <code>fn.length</code> 等于 <code>arguments.length</code> 立即执行即可 即 <code>curriedSum(1,2,3)</code> 下面开始实现 ⬇️ <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="params">fn</span> =&gt;</span></span><br><span class="line">    judge = <span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">        args.length === fn.length</span><br><span class="line">            ? fn(...args)</span><br><span class="line">            <span class="comment">// 直接立刻执行</span></span><br><span class="line">            : <span class="function">(<span class="params">arg</span>) =&gt;</span> judge(...args, arg)</span><br><span class="line">            <span class="comment">// 本次参数和上次的 ...args 合并 递归</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> curriedSum = curry(sum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(curriedSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(curriedSum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天把之前刷题的记录都删掉了 就 感觉博客还是不应该单纯刷题 不如手撕 API 这样 🤔 不太后悔 也不心疼 （说明我之前搞得真的没有价值 😭&lt;/p&gt;
&lt;p&gt;好了不说了 开始手撕 这是需要达成的样子 ⬇️ &lt;figure class=&quot;highlight javascr
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现深拷贝</title>
    <link href="http://yoursite.com/2020/10/03/%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/10/03/%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-10-03T00:58:03.000Z</published>
    <updated>2020-10-03T02:51:48.322Z</updated>
    
    <content type="html"><![CDATA[<p>深拷贝的实现也是笔试很常见的题目叻</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepClone = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span> || target === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">        clone[key] = deepClone(target[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候先不考虑循环引用的问题 先来测试下 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        c: <span class="number">2</span>,</span><br><span class="line">        d: &#123;</span><br><span class="line">            e:<span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(deepClone(test));</span><br><span class="line"><span class="comment">// &#123;a: 1, b: &#123;…&#125;&#125; 👌</span></span><br></pre></td></tr></table></figure> 接下来该考虑 循环引用的问题 比如 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">test.b = test;</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br></pre></td></tr></table></figure> 直接用上面的 <code>deepClone</code> 会爆栈…… 提示 <code>Uncaught RangeError: Maximum call stack size exceeded</code> 那么自然是需要一个暂时的储存去储存已经复制的 key-value 来看看新的 key 是否在这个 key-value 集合中出现过 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepClone = <span class="function">(<span class="params">target, map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span> || target === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.get(target)) <span class="keyword">return</span> map.get(target);</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">    map.set(target,clone);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">        clone[key] = deepClone(target[key],map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 再来测试下 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">test.b = test;</span><br><span class="line"><span class="built_in">console</span>.log(deepClone(test));</span><br><span class="line"><span class="comment">// &#123;a: 1, b: &#123;…&#125;&#125; 正常叻 😄</span></span><br></pre></td></tr></table></figure> 再接着考虑 <code>Date</code> 和 <code>RegExp</code> 的问题 因为这两类还是有些问题 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test2 = &#123;</span><br><span class="line">    a: <span class="regexp">/\d&#123;2&#125;/</span>,</span><br><span class="line">    b: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2020-8-15&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> clone = deepClone(test2);</span><br><span class="line"><span class="built_in">console</span>.log(clone.a,clone.b);</span><br><span class="line"><span class="comment">// &#123;&#125; &#123;&#125; 输出两个空对象 🤔</span></span><br></pre></td></tr></table></figure> 再改改 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepClone = <span class="function">(<span class="params">target, map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span> || target === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.get(target)) <span class="keyword">return</span> map.get(target);</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">    map.set(target,clone);</span><br><span class="line">    <span class="keyword">if</span>(target <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(target);</span><br><span class="line">    <span class="keyword">if</span>(target <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(target);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">        clone[key] = deepClone(target[key],map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 继续测试 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test2 = &#123;</span><br><span class="line">    a: <span class="regexp">/\d&#123;2&#125;/</span>,</span><br><span class="line">    b: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2020-8-15&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> clone = deepClone(test2);</span><br><span class="line"><span class="built_in">console</span>.log(clone.a,clone.b);</span><br><span class="line"><span class="comment">// /\d&#123;2&#125;/ Sat Aug 15 2020 00:00:00 GMT+0800 (China Standard Time) OK惹 🎉</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深拷贝的实现也是笔试很常见的题目叻&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一道笔试题：JS模版字符串替换</title>
    <link href="http://yoursite.com/2020/09/29/%E4%B8%80%E9%81%93%E7%AC%94%E8%AF%95%E9%A2%98%EF%BC%9AJS%E6%A8%A1%E7%89%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2/"/>
    <id>http://yoursite.com/2020/09/29/%E4%B8%80%E9%81%93%E7%AC%94%E8%AF%95%E9%A2%98%EF%BC%9AJS%E6%A8%A1%E7%89%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2/</id>
    <published>2020-09-29T14:49:48.000Z</published>
    <updated>2020-09-29T15:14:37.163Z</updated>
    
    <content type="html"><![CDATA[<p>今晚金山WPS笔试又双叒叕遇到了 还算挺高频的笔试题8</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;The final answer is :&#123;&#123;finalAnswer&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">finalAnswer</span> : <span class="string">&#x27;42&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(render(str,obj));</span><br><span class="line"><span class="comment">// 要求输出：The final answer is :42</span></span><br></pre></td></tr></table></figure><p>整理一下思路好了（ 菜鸡落泪.jpg</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">str, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;&#123;&#123;&#x27;</span>+key+<span class="string">&#x27;&#125;&#125;&#x27;</span>,<span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">        s = s.replace(reg,obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;The final answer is :&#123;&#123;finalAnswer&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">finalAnswer</span> : <span class="string">&#x27;42&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">str, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;&#123;&#123;&#x27;</span>+key+<span class="string">&#x27;&#125;&#125;&#x27;</span>,<span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">        s = s.replace(reg,obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(render(str,obj));</span><br><span class="line"><span class="comment">// The final answer is :42 </span></span><br></pre></td></tr></table></figure></p><p>之前的想法是先正则提取 符合 <code>&#123;&#123;xxx&#125;&#125;</code> 格式的 然后取 <code>$n</code> 替换 还是 naïve 叻 明显给定的 key 比手撕一个 全局匹配 <code>&#123;&#123;xxx&#125;&#125;</code> 的简单点不是吗（逃</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今晚金山WPS笔试又双叒叕遇到了 还算挺高频的笔试题8&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>由一道面试题看promise</title>
    <link href="http://yoursite.com/2020/09/16/%E7%94%B1%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%8Bpromise/"/>
    <id>http://yoursite.com/2020/09/16/%E7%94%B1%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%8Bpromise/</id>
    <published>2020-09-16T03:55:41.000Z</published>
    <updated>2020-09-16T04:00:34.496Z</updated>
    
    <content type="html"><![CDATA[<blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">            resolve();</span><br><span class="line">            reject()</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        &#125;,() =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"失败的状态"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>⬆️ 这是原题目</p><p>输出顺序为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>因为 promise 只有三个状态</p><p><code>pending</code> , <code>fulfilled</code> , <code>rejected</code></p><p>且 <code>pending</code> 变为任意后两者后 状态不会再改变</p><p>故此处先变为 <code>fulfilled</code> 后 <code>reject()</code> 无效</p><p>所以 <code>then</code> 回调还是会调用 <code>resolve()</code> 的对应输出 <code>console.log(3);</code></p><p>同理 如果我们调换一下顺序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    reject();</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;,() =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"失败的状态"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>此时的输出就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">失败的状态</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数组去重方法梳理</title>
    <link href="http://yoursite.com/2020/09/16/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/09/16/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/</id>
    <published>2020-09-16T03:32:28.000Z</published>
    <updated>2020-09-16T03:40:49.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>测试数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]; </span><br></pre></td></tr></table></figure></blockquote><h3 id="es6-set-方法"><a class="markdownIt-Anchor" href="#es6-set-方法"></a> ES6 Set 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> noRepeat = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter-方法"><a class="markdownIt-Anchor" href="#filter-方法"></a> Filter 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> noRepeat2 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item)===index;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="object-key-不可重复"><a class="markdownIt-Anchor" href="#object-key-不可重复"></a> Object key 不可重复</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> noReapeat3 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> arr.filter( <span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> ele + ele) ? <span class="literal">false</span>: (obj[<span class="keyword">typeof</span> ele + ele] = <span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;测试数组：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数组扁平化方法梳理</title>
    <link href="http://yoursite.com/2020/09/16/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/09/16/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/</id>
    <published>2020-09-16T02:55:43.000Z</published>
    <updated>2020-09-16T03:16:16.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>测试数组:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>]]]];</span><br></pre></td></tr></table></figure></blockquote><h3 id="转为-string">转为 string</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">String</span>(arr).split(<span class="string">','</span>).map(<span class="built_in">Number</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 string 的特性</p><p>⚠️ 注意返回值为 string , 需要转化为 number</p><h3 id="递归">递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten2 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> accumulator.concat(<span class="built_in">Array</span>.isArray(currentValue)?flatten2(currentValue):currentValue);</span><br><span class="line">    &#125;,[]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;测试数组:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1315. Sum of Nodes with Even-Valued Grandparent</title>
    <link href="http://yoursite.com/2020/08/29/LeetCode-1315-Sum-of-Nodes-with-Even-Valued-Grandparent/"/>
    <id>http://yoursite.com/2020/08/29/LeetCode-1315-Sum-of-Nodes-with-Even-Valued-Grandparent/</id>
    <published>2020-08-29T03:41:52.000Z</published>
    <updated>2020-08-29T03:43:32.523Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, return the sum of values of nodes with even-valued grandparent. (A <em>grandparent</em> of a node is the parent of its parent, if it exists.)</p><p>If there are no nodes with an even-valued grandparent, return <code>0</code>.</p><p><strong>Example 1:</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2019/07/24/1473_ex1.png" alt="img" /></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]</span><br><span class="line">Output: 18</span><br><span class="line">Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is between <code>1</code> and <code>10^4</code>.</li><li>The value of nodes is between <code>1</code> and <code>100</code>.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sumEvenGrandparent = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dfs(root,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="comment">// start from root so the parent &amp; grand parent nodes do not exist ! just assign some random odd values</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dfs = <span class="function">(<span class="params">root,parent,grandparent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> dfs(root.left,root.val,parent) + dfs(root.right,root.val,parent)+(grandparent%<span class="number">2</span>===<span class="number">0</span>?root.val:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the sum of values of nodes with even-valued grandparent. (A &lt;em&gt;grandparent&lt;/em&gt; of a node is th
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>JS 将数字转换为货币形式</title>
    <link href="http://yoursite.com/2020/08/16/JS-%E5%B0%86%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E8%B4%A7%E5%B8%81%E5%BD%A2%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/08/16/JS-%E5%B0%86%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E8%B4%A7%E5%B8%81%E5%BD%A2%E5%BC%8F/</id>
    <published>2020-08-16T09:02:40.000Z</published>
    <updated>2020-08-16T12:37:52.333Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>将各种数字整数部分转换为三个数字一个逗号隔断的形式</p><p>比如 : 111111 =&gt; 111,111</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string res;</span><br><span class="line">        int n &#x3D; num.size(), keep &#x3D; n - k;</span><br><span class="line">        for (char c : num) &#123;</span><br><span class="line">            while (k &amp;&amp; res.size() &amp;&amp; res.back() &gt; c) &#123;</span><br><span class="line">                res.pop_back();</span><br><span class="line">                --k;</span><br><span class="line">            &#125;</span><br><span class="line">            if (res.size() || c !&#x3D; &#39;0&#39;) res.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line">        while (res.size() &amp;&amp; k--) res.pop_back();</span><br><span class="line">        return res.empty() ? &quot;0&quot; : res;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;将各种数字整数部分转换为三个数字一个逗号隔断的形式&lt;/p&gt;
&lt;p&gt;比如 : 111111 =&amp;gt; 111,111&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>JS 词法作用域</title>
    <link href="http://yoursite.com/2020/08/16/JS-%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2020/08/16/JS-%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2020-08-16T02:56:05.000Z</published>
    <updated>2020-08-16T07:34:44.475Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo:'</span>,value,<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bar:'</span>,value,<span class="keyword">this</span>);</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bar: 2 Window &#123;parent: Window, opener: null, top: Window, length: 0, frames: Window, …&#125;</span><br><span class="line">foo: 1 Window &#123;parent: Window, opener: null, top: Window, length: 0, frames: Window, …&#125;</span><br></pre></td></tr></table></figure><p>执行 foo 函数会先从 foo 函数内部查找是否有局部变量 value</p><p>如果没有就查找上面一层的代码 全局 window 也就是 value 等于 1</p><p>bar 函数 内部 有 value = 2 所以执行 bar 会输出 2</p><p><em>JS是静态词法作用域</em></p><p>如果是动态的词法作用域 如 bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">value=1</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span> () &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">bar</span></span> () &#123;</span><br><span class="line">    <span class="built_in">local</span> value=2;</span><br><span class="line">    foo;</span><br><span class="line">&#125;</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yuanruqian@lydia ~ % bash scope.bash</span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">name :<span class="number">1</span>,</span><br><span class="line">b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.b():'</span>,a.b())</span><br><span class="line"><span class="keyword">var</span> c = a.b</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c():'</span>,c())</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line">a.b(): <span class="number">2</span></span><br><span class="line">c(): <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>公平洗牌算法</title>
    <link href="http://yoursite.com/2020/08/08/%E5%85%AC%E5%B9%B3%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/08/08/%E5%85%AC%E5%B9%B3%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</id>
    <published>2020-08-08T07:01:54.000Z</published>
    <updated>2020-08-08T07:15:01.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每一位上出现某个元素的概率都相等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">JustCardShifting</span>(<span class="params">cards</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> N = cards.length;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'original:'</span>,cards);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> rand = <span class="built_in">Math</span>.floor(i*<span class="built_in">Math</span>.random())</span><br><span class="line">    <span class="built_in">console</span>.log(rand)</span><br><span class="line">    [cards[i],cards[rand]]=[cards[rand],cards[i]]</span><br><span class="line">&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'after:'</span>,cards)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">9</span>,<span class="number">23</span>,<span class="number">1</span>,<span class="number">63</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">JustCardShifting(arr)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;每一位上出现某个元素的概率都相等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现一个简单的红绿灯</title>
    <link href="http://yoursite.com/2020/08/08/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%A2%E7%BB%BF%E7%81%AF/"/>
    <id>http://yoursite.com/2020/08/08/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%A2%E7%BB%BF%E7%81%AF/</id>
    <published>2020-08-08T05:23:49.000Z</published>
    <updated>2020-08-08T07:00:40.583Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>打印red，停1s,打印yellow,停2s,打印green,停4s</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async await</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">duration</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">setTimeout(resolve, duration);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params">color, duration</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'traffic-light '</span>, color);</span><br><span class="line"><span class="keyword">await</span> sleep(duration);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i++<span class="xml"><span class="tag">&lt;<span class="name">5)</span> &#123;</span></span></span><br><span class="line"><span class="xml">await changeColor('red', 1000);</span></span><br><span class="line"><span class="xml">await changeColor('yellow', 2000);</span></span><br><span class="line"><span class="xml">await changeColor('green', 4000);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">show()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;打印red，停1s,打印yellow,停2s,打印green,停4s&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
