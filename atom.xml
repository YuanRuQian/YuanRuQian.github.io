<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-29T07:43:37.848Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 300. Longest Increasing Subsequence</title>
    <link href="http://yoursite.com/2020/04/29/LeetCode-300-Longest-Increasing-Subsequence/"/>
    <id>http://yoursite.com/2020/04/29/LeetCode-300-Longest-Increasing-Subsequence/</id>
    <published>2020-04-29T05:20:21.000Z</published>
    <updated>2020-04-29T07:43:37.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [10,9,2,5,3,7,101,18]</span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. </span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>There may be more than one LIS combination, it is only necessary for you to return the length.</li><li>Your algorithm should run in O(<em>n2</em>) complexity.</li></ul><p><strong>Follow up:</strong> Could you improve it to O(<em>n</em> log <em>n</em>) time complexity?</p></blockquote><p>O(N^2) method :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLIS = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> lis = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">lis.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[j] &lt; nums[i]) lis[i] = <span class="built_in">Math</span>.max(lis[i], lis[j] + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(lis);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(lis);</span><br><span class="line"><span class="keyword">return</span> nums.length ? <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, lis) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The process:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Your input</span><br><span class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">stdout</span><br><span class="line"> </span><br><span class="line">[ <span class="number">1</span>, <span class="number">1</span> ]</span><br><span class="line"> </span><br><span class="line">[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span> ]</span><br><span class="line"> </span><br><span class="line">[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span> ]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span> ]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line"> </span><br><span class="line">[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Expected</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>O(N log N) method :</p><p>Log N =&gt; Binary search</p><p>N * log N =&gt; binary search in a for loop</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLIS = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> binarySearchPosition = <span class="function">(<span class="params">dp, target, hi</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> lo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((lo+hi)/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (target === dp[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; dp[mid]) hi = mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> lo = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (nums === <span class="literal">null</span> || nums.length===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length).fill(<span class="built_in">Number</span>.MAX_SAFE_INTEGER);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> pos = binarySearchPosition(dp, nums[i], i);</span><br><span class="line">        dp[pos] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = dp.length<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] !== <span class="built_in">Number</span>.MAX_SAFE_INTEGER) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an unsorted array of integers, find the length of longest increasing subsequence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 46. Permutations</title>
    <link href="http://yoursite.com/2020/04/28/LeetCode-46-Permutations/"/>
    <id>http://yoursite.com/2020/04/28/LeetCode-46-Permutations/</id>
    <published>2020-04-28T07:58:29.000Z</published>
    <updated>2020-04-28T12:10:05.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><h4 id="backtrack-method"><a class="markdownIt-Anchor" href="#backtrack-method"></a> Backtrack method</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    backtrack(nums,res,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params">nums, res, n = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">        res.push(nums.slice(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">// arr.slice(0) makes a copy of the original array by taking a slice from the element at index 0 to the last element or the the res will all be the same</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &lt; nums.length; i++) &#123;</span><br><span class="line">        [nums[i], nums[n]] = [nums[n], nums[i]];</span><br><span class="line">        backtrack(nums, res, n + <span class="number">1</span>);</span><br><span class="line">        [nums[i], nums[n]] = [nums[n], nums[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And if you use this program</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    backtrack(nums,res,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params">nums, res, n = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">        res.push(nums);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &lt; nums.length; i++) &#123;</span><br><span class="line">        [nums[i], nums[n]] = [nums[n], nums[i]];</span><br><span class="line">        backtrack(nums, res, n + <span class="number">1</span>);</span><br><span class="line">        [nums[i], nums[n]] = [nums[n], nums[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It will show all the same results :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">  [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ],</span><br><span class="line">  [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ],</span><br><span class="line">  [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ],</span><br><span class="line">  [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ],</span><br><span class="line">  [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ],</span><br><span class="line">  [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Why <code>res.push(nums)</code> will show the same results ? However <code>nums.splice(0)</code> will do the magic …</p><p>I thought maybe it has something to do with shallow / deep copy ?</p><p>According to MDN</p><blockquote><p>The slice() method returns <strong>a shallow copy</strong> of a portion of an array into a new array object selected from begin to end (end not included).</p></blockquote><p>So slice() return a new array with same elements</p><p><code>nums</code> is a reference</p><p>To test this assumption I run the following program :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    backtrack(nums,res,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params">nums, res, n = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//console.log(nums);</span></span><br><span class="line">        res.push(nums);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &lt; nums.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        [nums[i], nums[n]] = [nums[n], nums[i]];</span><br><span class="line">        backtrack(nums, res, n + <span class="number">1</span>);</span><br><span class="line">        [nums[i], nums[n]] = [nums[n], nums[i]];</span><br><span class="line">        <span class="built_in">console</span>.log(nums,i);</span><br><span class="line">        <span class="comment">// console.log('');</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">permute(nums);</span><br><span class="line"><span class="comment">// console.log(permute(nums));</span></span><br></pre></td></tr></table></figure><p>Output :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] <span class="number">1</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] <span class="number">2</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] <span class="number">0</span></span><br><span class="line">[ <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span> ] <span class="number">1</span></span><br><span class="line">[ <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span> ] <span class="number">2</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] <span class="number">1</span></span><br><span class="line">[ <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span> ] <span class="number">1</span></span><br><span class="line">[ <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span> ] <span class="number">2</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] <span class="number">2</span></span><br></pre></td></tr></table></figure><p>So the last time <code>nums</code> is <code>[1,2,3]</code></p><p>My hypothesis makes sense 👌</p><h4 id="dp-method"><a class="markdownIt-Anchor" href="#dp-method"></a> DP method</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums, n = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= nums.length) <span class="keyword">return</span> [[]];</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> prevs = permute(nums, n + <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> prev <span class="keyword">of</span> prevs) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= prev.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> p = prev.slice(<span class="number">0</span>);</span><br><span class="line">            p.splice(i, <span class="number">0</span>, nums[n]);  </span><br><span class="line"><span class="comment">// successively insert element n</span></span><br><span class="line">            res.push(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The process :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br><span class="line">[ <span class="number">3</span> ]</span><br><span class="line"> </span><br><span class="line">[ <span class="number">3</span> ]</span><br><span class="line">[ <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">[ <span class="number">3</span>, <span class="number">2</span> ]</span><br><span class="line"> </span><br><span class="line">[ <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">[ <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span> ]</span><br><span class="line">[ <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span> ]</span><br><span class="line"> </span><br><span class="line">[ <span class="number">3</span>, <span class="number">2</span> ]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span> ]</span><br><span class="line">[ <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span> ]</span><br><span class="line">[ <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span> ]</span><br></pre></td></tr></table></figure><p>The basic idea is get one element and then add elements to the current array</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a collection of &lt;strong&gt;distinct&lt;/strong&gt; integers, return all possible permutations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 581. Shortest Unsorted Continuous Subarray</title>
    <link href="http://yoursite.com/2020/04/27/LeetCode-581-Shortest-Unsorted-Continuous-Subarray/"/>
    <id>http://yoursite.com/2020/04/27/LeetCode-581-Shortest-Unsorted-Continuous-Subarray/</id>
    <published>2020-04-27T15:48:42.000Z</published>
    <updated>2020-04-27T16:04:21.698Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an integer array, you need to find one <strong>continuous subarray</strong> that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.</p><p>You need to find the <strong>shortest</strong> such subarray and output its length.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [2, 6, 4, 8, 10, 9, 15]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li>Then length of the input array is in range [1, 10,000].</li><li>The input array may contain duplicates, so ascending order here means <strong>&lt;=</strong>.</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findUnsortedSubarray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min = nums[nums.length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">let</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> high = nums.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> begin = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="number">-2</span>;</span><br><span class="line">  <span class="comment">// the minimal subarray is nums[begin:end];</span></span><br><span class="line">  <span class="comment">// if end &lt; begin &lt; 0 then the nums[] must be sorted</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        min = <span class="built_in">Math</span>.min(min,nums[nums.length<span class="number">-1</span>-i]);</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max,nums[i]);</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;max) end = i;</span><br><span class="line">        <span class="keyword">if</span>(nums[nums.length<span class="number">-1</span>-i]&gt;min) begin = nums.length<span class="number">-1</span>-i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end-begin+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an integer array, you need to find one &lt;strong&gt;continuous subarray&lt;/strong&gt; that if you only sort this subarray in asc
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 160. Intersection of Two Linked Lists</title>
    <link href="http://yoursite.com/2020/04/27/LeetCode-160-Intersection-of-Two-Linked-Lists/"/>
    <id>http://yoursite.com/2020/04/27/LeetCode-160-Intersection-of-Two-Linked-Lists/</id>
    <published>2020-04-27T15:00:12.000Z</published>
    <updated>2020-04-27T15:39:32.102Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Write a program to find the node at which the intersection of two singly linked lists begins.</p><p>For example, the following two linked lists:</p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_statement.png" target="_blank" rel="noopener"><img src="https://assets.leetcode.com/uploads/2018/12/13/160_statement.png" alt="img" /></a></p><p>begin to intersect at node c1.</p><p><strong>Example 1:</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" target="_blank" rel="noopener"><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" alt="img" /></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,0,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3</span><br><span class="line">Output: Reference of the node with value &#x3D; 8</span><br><span class="line">Input Explanation: The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png" target="_blank" rel="noopener"><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png" alt="img" /></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: intersectVal &#x3D; 2, listA &#x3D; [0,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1</span><br><span class="line">Output: Reference of the node with value &#x3D; 2</span><br><span class="line">Input Explanation: The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png" target="_blank" rel="noopener"><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png" alt="img" /></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2</span><br><span class="line">Output: null</span><br><span class="line">Input Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.</span><br><span class="line">Explanation: The two lists do not intersect, so return null.</span><br></pre></td></tr></table></figure><p><strong>Notes:</strong></p><ul><li>If the two linked lists have no intersection at all, return <code>null</code>.</li><li>The linked lists must retain their original structure after the function returns.</li><li>You may assume there are no cycles anywhere in the entire linked structure.</li><li>Your code should preferably run in O(n) time and use only O(1) memory.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">headA</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">headB</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="function"><span class="keyword">function</span>(<span class="params">headA, headB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!headA || !headB) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> a = headA;</span><br><span class="line">    <span class="keyword">let</span> b = headB;</span><br><span class="line">    <span class="keyword">while</span>(a !== b) &#123;</span><br><span class="line">        a = (a === <span class="literal">null</span>? headB : a.next);</span><br><span class="line">        b = (b === <span class="literal">null</span>? headA : b.next);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Proof :</p><p>If <code>a.length = la + lc</code> &amp; <code>b.length = lb + lc</code></p><p>If <code>la === lb</code> two pointers will meet at the first time when they arrive at the intersection</p><p>If <code>la &gt; lb</code> :</p><p><code>a</code> is <code>(la-lb)</code> steps ahead of <code>b</code></p><p>So when <code>a</code> first arrives at the end of the list , a start again at <code>headA</code></p><p>When they finally meet at the intersection , a and b already takes <code>n</code> steps</p><p>Then <code>n%(la+lc) === n%(lb+lc)</code></p><p>So n is the least common multiple of lengths of a and b.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Write a program to find the node at which the intersection of two singly linked lists begins.&lt;/p&gt;
&lt;p&gt;For example, the follow
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>腾讯前端&amp;UI开发笔试挂经</title>
    <link href="http://yoursite.com/2020/04/26/%E8%85%BE%E8%AE%AF%E5%89%8D%E7%AB%AF-UI%E5%BC%80%E5%8F%91%E7%AC%94%E8%AF%95%E6%8C%82%E7%BB%8F/"/>
    <id>http://yoursite.com/2020/04/26/%E8%85%BE%E8%AE%AF%E5%89%8D%E7%AB%AF-UI%E5%BC%80%E5%8F%91%E7%AC%94%E8%AF%95%E6%8C%82%E7%BB%8F/</id>
    <published>2020-04-26T14:34:18.000Z</published>
    <updated>2020-04-26T15:07:42.167Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>晚上 8:00-10:00 两个小时的笔试 手撕5道编程题目 平台是牛客的OJ</p><p>腾讯 前端 &amp; UI 开发</p></blockquote><h4 id="第一题"><a class="markdownIt-Anchor" href="#第一题"></a> 第一题</h4><p>手撕原生JS</p><p>不可以用库</p><p><s>读完题目我当场去世这是要开门凉</s></p><p>我其实没看懂题目意思……“生成随机的html”？？？</p><p>我至今没有摸过原生JS</p><p>于是一边琢磨题目意思一边看语法现场学习……</p><p>一个 div 生成随机html 并且读取和解析其中的标题类 然后渲染到另一个 div 里面</p><p>20分钟了还没做出来……我就 move on 了</p><p>就和GT一样做过了不能回头</p><h4 id="第二题"><a class="markdownIt-Anchor" href="#第二题"></a> 第二题</h4><p>题目很长很复杂 中间的变量命名有点混乱 = = （好像题目里是错的？</p><p>我对着例子的 input output 配合草稿纸看了十分钟才明白题目啥意思 害 真实情景题就是这样 拉踩利口的傻瓜式直球变量</p><p>应该是 DP 吧 利口上 medium 里面难一点的水平</p><p>我真的太菜了 本来DP就比较难 我练的也少 一慌张 写了也不知道错哪 瞎改 结果一看又二十多分钟了 卒 move on</p><h4 id="第三题"><a class="markdownIt-Anchor" href="#第三题"></a> 第三题</h4><p>利口 easy 水平 的队列题 很快AC了</p><p><s>终于找回一点自信</s></p><h4 id="第四题"><a class="markdownIt-Anchor" href="#第四题"></a> 第四题</h4><p>判断是否是子域名 挺简单的匹配</p><p>在自己 IDE 测试都是 OK 的 兴冲冲上OJ跑</p><p>上线总是不过 我觉得是可能是我输入有错 但是折腾了十来分钟没啥进展 一题都半小时了 就 move on 了</p><p>只要碰上循环的输入我必然不能AC 很迷……</p><p>OJ的IO我都觉得很迷……</p><p>刷题还是利口好 至少可以 <code>console.log()</code> 一下看看哪里错了</p><h4 id="第五题"><a class="markdownIt-Anchor" href="#第五题"></a> 第五题</h4><p>一个在字节流里提取信息转为 <code>JSON</code> 的题目</p><p>一头雾水不知道怎么做</p><p>因为提取的信息需要一些计算机网络的背景知识</p><p>来不及一个个去查就开始正面刚</p><p>感觉是用正则然后继续开始现学 学了一会还是觉得不对 开始暴力读取判断</p><p>这题真的没思路</p><blockquote><p>总结：</p><ul><li><p>请务必先去OJ熟悉一下他们IO的套路</p></li><li><p>一定要先手撕几次原生JS</p></li><li><p>DP这种多多练习不要逃避</p></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;晚上 8:00-10:00 两个小时的笔试 手撕5道编程题目 平台是牛客的OJ&lt;/p&gt;
&lt;p&gt;腾讯 前端 &amp;amp; UI 开发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;第一题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
    
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 39. Combination Sum</title>
    <link href="http://yoursite.com/2020/04/26/LeetCode-39-Combination-Sum/"/>
    <id>http://yoursite.com/2020/04/26/LeetCode-39-Combination-Sum/</id>
    <published>2020-04-26T01:24:53.000Z</published>
    <updated>2020-04-26T06:36:56.865Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code> unlimited number of times.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,3,6,7], target &#x3D; 7,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,3,5], target &#x3D; 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><p>DFS method :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">candidates</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum = <span class="function"><span class="keyword">function</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    candidates.sort();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function"><span class="keyword">function</span> (<span class="params">id,n,comb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n===<span class="number">0</span>) &#123;</span><br><span class="line">            res.push(comb);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=id;i&lt;candidates.length;i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> t = candidates[i];</span><br><span class="line">            <span class="keyword">if</span> (t &lt;= n) dfs(i, n - t, [...comb, t]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,target,[]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://medium.com/@oprearocks/what-do-the-three-dots-mean-in-javascript-bc5749439c9a" target="_blank" rel="noopener">About three dots in JS plz see this blog post , it explains the concept very well</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;strong&gt;set&lt;/strong&gt; of candidate numbers (&lt;code&gt;candidates&lt;/code&gt;) &lt;strong&gt;(without duplicates)&lt;/strong&gt; and a targ
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 55. Jump Game</title>
    <link href="http://yoursite.com/2020/04/25/LeetCode-55-Jump-Game/"/>
    <id>http://yoursite.com/2020/04/25/LeetCode-55-Jump-Game/</id>
    <published>2020-04-25T11:10:27.000Z</published>
    <updated>2020-04-25T15:57:40.253Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Determine if you are able to reach the last index.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum</span><br><span class="line">             jump length is 0, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// greedy method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;max) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max&gt;=nums.length<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        max = <span class="built_in">Math</span>.max(nums[i]+i,max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// DP solution</span></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!nums || nums.length===<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> record = <span class="built_in">Array</span>(nums.length).fill(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// record array to indicate whether can jump to nums[i]</span></span><br><span class="line">    record[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        record[i]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;i;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (record[j] &amp;&amp; (j + nums[j] &gt;= i)) &#123;</span><br><span class="line">                record[i] = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> record[record.length<span class="number">-1</span>];</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of non-negative integers, you are initially positioned at the first index of the array.&lt;/p&gt;
&lt;p&gt;Each element i
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 142. Linked List Cycle II</title>
    <link href="http://yoursite.com/2020/04/25/LeetCode-142-Linked-List-Cycle-II/"/>
    <id>http://yoursite.com/2020/04/25/LeetCode-142-Linked-List-Cycle-II/</id>
    <published>2020-04-25T06:49:10.000Z</published>
    <updated>2020-04-25T07:32:20.736Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p><p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p><p><strong>Note:</strong> Do not modify the linked list.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">Output: tail connects to node index 1</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img" /></p><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">Output: tail connects to node index 0</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img" /></p><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">Output: no cycle</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img" /></p><p><strong>Follow-up</strong>:<br />Can you solve it without using extra space?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// two pointers </span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">let</span> fast = head;</span><br><span class="line">    <span class="keyword">let</span> slow = head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.next &amp;&amp; fast.next.next) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span>(fast===slow) &#123;</span><br><span class="line">            fast = head;</span><br><span class="line">            <span class="keyword">while</span>(fast!==slow)&#123;</span><br><span class="line">                  fast = fast.next;</span><br><span class="line">                  slow = slow.next;</span><br><span class="line">          &#125;</span><br><span class="line">            <span class="keyword">return</span> slow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Explanation :</p><p>Input :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>Process :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fast :<span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">1</span><span class="number">2</span><span class="number">3</span></span><br><span class="line">slow :<span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>fast.length = slow.length*2 = cycle.length*2</code></p><p>Then set <code>fast</code> to <code>head</code></p><p>Now <code>fast.length = 0</code>, <code>slow.length = cycle.length</code></p><p>Process :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fast :<span class="number">0</span></span><br><span class="line">slow :<span class="number">0</span></span><br></pre></td></tr></table></figure><p>Then both pointers move forward <code>head.length</code> steps they will meet again cuz the <code>slow</code> reach the end of the list last time</p><hr /><p>O(N) O(N) hashmap method</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hashSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">while</span> (head) &#123;</span><br><span class="line">        hashSet.add(head);</span><br><span class="line">        <span class="keyword">if</span> (hashSet.has(head.next)) &#123;</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a linked list, return the node where the cycle begins. If there is no cycle, return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To repre
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 141. Linked List Cycle</title>
    <link href="http://yoursite.com/2020/04/25/LeetCode-141-Linked-List-Cycle/"/>
    <id>http://yoursite.com/2020/04/25/LeetCode-141-Linked-List-Cycle/</id>
    <published>2020-04-25T06:31:07.000Z</published>
    <updated>2020-04-25T07:37:05.852Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a linked list, determine if it has a cycle in it.</p><p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed) in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure><figure><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img" /><figcaption>img</figcaption></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br></pre></td></tr></table></figure><figure><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img" /><figcaption>img</figcaption></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure><figure><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img" /><figcaption>img</figcaption></figure><p><strong>Follow up:</strong></p><p>Can you solve it using <em>O(1)</em> (i.e. constant) memory?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head||!head.next) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> fast = head;</span><br><span class="line">    <span class="keyword">let</span> slow = head;</span><br><span class="line">    <span class="keyword">while</span>( fast.next &amp;&amp; fast.next.next) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span>(fast===slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a linked list, determine if it has a cycle in it.&lt;/p&gt;
&lt;p&gt;To represent a cycle in the given linked list, we use an inte
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 234. Palindrome Linked List</title>
    <link href="http://yoursite.com/2020/04/25/LeetCode-234-Palindrome-Linked-List/"/>
    <id>http://yoursite.com/2020/04/25/LeetCode-234-Palindrome-Linked-List/</id>
    <published>2020-04-25T05:36:29.000Z</published>
    <updated>2020-04-25T06:30:16.473Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a singly linked list, determine if it is a palindrome.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong><br />Could you do it in O(n) time and O(1) space?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.next) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">while</span>(head) &#123;</span><br><span class="line">        stack.push(head.val);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,j=stack.length<span class="number">-1</span>;i&lt;j;i++,j--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(stack[i]!==stack[j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Reversing linked list , with two pointers</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Phase 1: Reverse the second half while finding the middle.</span></span><br><span class="line"><span class="comment">// Phase 2: Compare the reversed second half with the first half.</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">var</span> slow = head;</span><br><span class="line">        <span class="keyword">var</span> fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="literal">null</span> &amp;&amp; fast.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = reverseList(slow.next);</span><br><span class="line"></span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">while</span>(slow != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(head.val != slow.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            head = head.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pre = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a singly linked list, determine if it is a palindrome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript : 如何移除数组元素</title>
    <link href="http://yoursite.com/2020/04/25/JavaScript-%E5%A6%82%E4%BD%95%E7%A7%BB%E9%99%A4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2020/04/25/JavaScript-%E5%A6%82%E4%BD%95%E7%A7%BB%E9%99%A4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/</id>
    <published>2020-04-25T04:27:48.000Z</published>
    <updated>2020-04-25T05:23:26.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><h3 id="要移除的元素在数组最后"><a class="markdownIt-Anchor" href="#要移除的元素在数组最后"></a> 要移除的元素在数组最后</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.length = arr.length<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// Array [ 1, 2 ]</span></span><br></pre></td></tr></table></figure><p>直接改变数组元素即可</p><h3 id="要移除的元素在数组前端"><a class="markdownIt-Anchor" href="#要移除的元素在数组前端"></a> 要移除的元素在数组前端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// Array [ 2, 3 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.unshift(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// Array(4) [ 0, 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><p>移除头部元素用 <code>shift()</code></p><p>向头部添加元素用 <code>unshift()</code></p><h3 id="要移除的元素在数组中部"><a class="markdownIt-Anchor" href="#要移除的元素在数组中部"></a> 要移除的元素在数组中部</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.splice(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// Array(3) [ 1, 2, 5 ]</span></span><br></pre></td></tr></table></figure><h3 id="移除特定值的数组元素"><a class="markdownIt-Anchor" href="#移除特定值的数组元素"></a> 移除特定值的数组元素</h3><h4 id="splice-方法"><a class="markdownIt-Anchor" href="#splice-方法"></a> splice() 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(arr[i]===<span class="number">5</span>) &#123;</span><br><span class="line">    arr.splice(i,<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// Array(8) [ 1, 2, 3, 4, 6, 7, 8, 10 ]</span></span><br></pre></td></tr></table></figure><h4 id="arrayfilter-方法"><a class="markdownIt-Anchor" href="#arrayfilter-方法"></a> array.filter() 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isfive</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value !== <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">10</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.filter(isfive));</span><br><span class="line"><span class="comment">// Array(8) [ 1, 2, 3, 4, 6, 7, 8, 10 ]</span></span><br></pre></td></tr></table></figure><h4 id="lodash-remove-方法"><a class="markdownIt-Anchor" href="#lodash-remove-方法"></a> Lodash remove 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Orange'</span>, <span class="string">'Celery'</span>];</span><br><span class="line">_.remove(fruits, <span class="function"><span class="keyword">function</span> (<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruit === <span class="string">'Apple'</span> || fruit === <span class="string">'Banana'</span> || fruit === <span class="string">'Orange'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">_.remove(fruits, <span class="function"><span class="keyword">function</span> (<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.indexOf([<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Orange'</span>], fruit) !== <span class="number">-1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="delete-操作符"><a class="markdownIt-Anchor" href="#delete-操作符"></a> delete 操作符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// Array(10) [ 1, 2, 3, 4, &lt;1 empty slot&gt;, 6, 7, 8, 5, 10 ]</span></span><br><span class="line">arr.length</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line">arr[<span class="number">4</span>]</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>可见 <code>delete</code> 不影响 长度</p><p>仅仅是删除的元素变为 <code>undefined</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;/h3&gt;
&lt;h3 id=&quot;要移除的元素在数组最后&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#要移除的元素在数组最后&quot;&gt;&lt;/a&gt; 要移除的元素
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>字节测试开发智力题</title>
    <link href="http://yoursite.com/2020/04/24/%E5%AD%97%E8%8A%82%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
    <id>http://yoursite.com/2020/04/24/%E5%AD%97%E8%8A%82%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E6%99%BA%E5%8A%9B%E9%A2%98/</id>
    <published>2020-04-24T11:49:00.000Z</published>
    <updated>2020-04-24T14:48:45.817Z</updated>
    
    <content type="html"><![CDATA[<p>来源：https://www.nowcoder.com/discuss/374134</p><hr /><p>10个堆，每堆10个苹果，其中9个堆里苹果是50g/个，一个堆里苹果是40g/个，有一杆秤只能称一次，所称重量为x,求40g苹果所在堆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从 i <span class="keyword">of</span> [<span class="number">1</span>:<span class="number">10</span>] 每堆拿出 i 个</span><br><span class="line">正常总量 <span class="number">50</span>*(<span class="number">1</span>+<span class="number">10</span>)*<span class="number">10</span>/<span class="number">2</span></span><br><span class="line">真实总量 比 正常总量 少 k*(<span class="number">50</span><span class="number">-40</span>)=<span class="number">10</span>*k</span><br><span class="line">所以 (正常总量-真实总量)/<span class="number">10</span> </span><br><span class="line">第 k 堆苹果重量少了</span><br></pre></td></tr></table></figure><hr /><p>5L和6L水桶，得到三升水。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>L 倒满 <span class="number">5</span>L 剩下 <span class="number">1</span>L 倒进 <span class="number">5</span>L</span><br><span class="line"><span class="number">6</span>L 继续倒满 <span class="number">5</span>L 剩下 (<span class="number">6</span>-(<span class="number">5</span><span class="number">-1</span>))=<span class="number">2</span>L 倒进 <span class="number">5</span>L</span><br><span class="line"><span class="number">6</span>L 再次倒满 <span class="number">5</span>L 剩下 (<span class="number">6</span>-(<span class="number">5</span><span class="number">-1</span><span class="number">-2</span>))=<span class="number">3</span>L</span><br></pre></td></tr></table></figure><hr /><p>两个一小时蚊香怎么得到15分钟的记时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">蚊香A 点燃两头 <span class="number">30</span>分钟后全部燃尽</span><br><span class="line">蚊香B 一头点燃 <span class="number">30</span>分钟后还剩下 <span class="number">1</span>/<span class="number">2</span> 此时将另外一头点燃 剩下的 <span class="number">1</span>/<span class="number">2</span> 将用<span class="number">15</span>分钟燃尽</span><br></pre></td></tr></table></figure><hr /><p>4分钟沙漏和7分钟沙漏怎么漏出9分钟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>分钟沙漏和<span class="number">7</span>分钟沙漏同时开始计时 </span><br><span class="line">等第一次<span class="number">4</span>分钟漏完立刻继续漏<span class="number">4</span>分钟</span><br><span class="line">当<span class="number">7</span>分钟漏完 第二次<span class="number">4</span>分钟还没漏完 此时开始计时</span><br><span class="line"><span class="number">7</span>分钟漏完到第二次<span class="number">4</span>分钟漏完 = <span class="number">1</span>分钟</span><br><span class="line">再漏两次<span class="number">4</span>分钟就行 一共 <span class="number">1</span>+<span class="number">4</span>*<span class="number">2</span>=<span class="number">9</span></span><br></pre></td></tr></table></figure><hr /><p>八个球，其中有一个是其余球重量的1.5倍，有什么方案找出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二分法 log(N)</span></span><br><span class="line">第一次 ： 四个四个一边 取重的</span><br><span class="line">第二次： 两个两个一边 取重的</span><br><span class="line">第三次： 每边一个 取重的</span><br></pre></td></tr></table></figure><hr /><p>桌上100个球，每次可以拿一到五个, 现在我们两个人依次拿球，你先拿，使用怎样的拿球策略，可以使你最终能拿到最后一个球？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">每次最多拿 <span class="number">5</span> 个 说明只要让目标球成为第 <span class="number">6</span> 个球就可以了</span><br><span class="line">即目标球编号为 <span class="number">6</span> 的倍数</span><br><span class="line"><span class="number">100</span>%<span class="number">6</span>=<span class="number">4</span></span><br><span class="line">第一次我拿<span class="number">4</span>个球</span><br><span class="line">接下来无论对方拿多少个球我都能补成两个人两次共拿 <span class="number">6</span> 个球</span><br><span class="line">所以之后只要保证剩下的球的个数是 <span class="number">6</span> 倍数就行</span><br></pre></td></tr></table></figure><hr /><p>有10个石头，有两个人，每人每次可以拿1-2个，轮流拿，最后一个拿的人算输，有什么必赢的方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类似上一题</span><br><span class="line">确保自己拿球的时候还剩下 <span class="number">1</span>+<span class="number">2</span> = <span class="number">3</span> 就行</span><br><span class="line">让对方先拿 </span><br><span class="line">前两轮确保每回两个人拿球都满 <span class="number">3</span> 个</span><br><span class="line">最后一次自己拿两个 剩下的一个只能对方拿</span><br></pre></td></tr></table></figure><p>Java面试：一亿数据获取前100个最大值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">保持数据的前 <span class="number">100</span> 位</span><br><span class="line">最小值一直放在 array[<span class="number">0</span>]</span><br><span class="line">循环 <span class="number">100</span>之后的元素</span><br><span class="line">如果 元素比 array[<span class="number">0</span>] 大 放入 前 <span class="number">100</span> 位 并且更新 array[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><hr /><p>经典智力题，飞机加油 ✈️</p><p>每个飞机只有一个油箱，飞机之间可以相互加油，注意是相互，没有加油机，一箱油可供一架飞机绕地球飞半圈。</p><p>问题：</p><p>为使至少一架飞机绕地球一圈回到起飞时的飞机场，至少需要出动几架飞机？</p><p>A:所有飞机从同一机场起飞，而且必须安全返回机场，不允许中途降落，中间没有飞机场</p><p>B:所有飞机从同一机场,同一方向起飞，而且必须安全返回机场，不允许中途降落，中间没有飞机场</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来源：https://www.nowcoder.com/discuss/374134&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;10个堆，每堆10个苹果，其中9个堆里苹果是50g/个，一个堆里苹果是40g/个，有一杆秤只能称一次，所称重量为x,求40g苹果所在堆。&lt;/p&gt;
&lt;figure
      
    
    </summary>
    
    
    
      <category term="Brain teaser" scheme="http://yoursite.com/tags/Brain-teaser/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 11. Container With Most Water</title>
    <link href="http://yoursite.com/2020/04/24/LeetCode-11-Container-With-Most-Water/"/>
    <id>http://yoursite.com/2020/04/24/LeetCode-11-Container-With-Most-Water/</id>
    <published>2020-04-24T02:32:45.000Z</published>
    <updated>2020-04-24T02:47:37.995Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, ..., <em>an</em> , where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p><strong>Note:</strong> You may not slant the container and <em>n</em> is at least 2.</p><figure><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" alt="img" /><figcaption>img</figcaption></figure><p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br></pre></td></tr></table></figure></blockquote><p>Brute force O(n^2) method :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(height.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxWater = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;height.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=height.length<span class="number">-1</span>;j&gt;i;j--) &#123;</span><br><span class="line">            maxWater = <span class="built_in">Math</span>.max(maxWater,(j-i)*<span class="built_in">Math</span>.min(height[i],height[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxWater;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The clever O(n) method : <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> j = height.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> water = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j) &#123;</span><br><span class="line">        water = <span class="built_in">Math</span>.max(water,(j-i)*<span class="built_in">Math</span>.min(height[i],height[j]));</span><br><span class="line">        <span class="keyword">if</span>(height[i]&lt;height[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> water;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>The basic idea is :</p><p>The wider the better</p><p>So if the outter height is shorter , when you move along you need to find a higher fit</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; non-negative integers &lt;em&gt;a1&lt;/em&gt;, &lt;em&gt;a2&lt;/em&gt;, ..., &lt;em&gt;an&lt;/em&gt; , where each represents a point at coordin
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 3. Longest Substring Without Repeating Characters</title>
    <link href="http://yoursite.com/2020/04/24/LeetCode-3-Longest-Substring-Without-Repeating-Characters/"/>
    <id>http://yoursite.com/2020/04/24/LeetCode-3-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2020-04-24T01:42:33.000Z</published>
    <updated>2020-04-24T02:53:05.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3. </span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length&lt;<span class="number">2</span>) <span class="keyword">return</span> s.length;</span><br><span class="line">    <span class="keyword">let</span> cur = [s[<span class="number">0</span>]];</span><br><span class="line">    <span class="comment">// track the current longest string</span></span><br><span class="line">    <span class="keyword">let</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxStr = [];</span><br><span class="line">    <span class="keyword">let</span> post = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> curStr = [];</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>;i&lt;s.length;i++ )&#123;</span><br><span class="line">    curStr = s[i];</span><br><span class="line">    post = maxStr.indexOf(curStr);</span><br><span class="line">    <span class="keyword">if</span>(post &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">// if the element already exists</span></span><br><span class="line">        maxStr = maxStr.substring(post + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// cut off the last one substring </span></span><br><span class="line">    &#125;</span><br><span class="line">    maxStr += curStr;</span><br><span class="line">    maxLen = <span class="built_in">Math</span>.max(maxLen, maxStr.length);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a string, find the length of the &lt;strong&gt;longest substring&lt;/strong&gt; without repeating characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examp
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 103. Binary Tree Zigzag Level Order Traversal</title>
    <link href="http://yoursite.com/2020/04/23/LeetCode-103-Binary-Tree-Zigzag-Level-Order-Traversal/"/>
    <id>http://yoursite.com/2020/04/23/LeetCode-103-Binary-Tree-Zigzag-Level-Order-Traversal/</id>
    <published>2020-04-23T06:11:51.000Z</published>
    <updated>2020-04-23T06:14:20.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, return the <em>zigzag level order</em> traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).</p><p>For example: Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its zigzag level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> zigzagLevelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">        <span class="keyword">let</span> res=[];</span><br><span class="line">        <span class="keyword">let</span> zigzag = <span class="function"><span class="keyword">function</span>(<span class="params">node,level=<span class="number">0</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(!res[level]) &#123;</span><br><span class="line">                res.push([node.val]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res[level].push(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            zigzag(node.left,level+<span class="number">1</span>);</span><br><span class="line">            zigzag(node.right,level+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        zigzag(root);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;res.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>===<span class="number">1</span>) &#123;</span><br><span class="line">                res[i]=res[i].reverse();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">      </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the &lt;em&gt;zigzag level order&lt;/em&gt; traversal of its nodes&#39; values. (ie, from left to right, then ri
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>看别人的面经准备：字节前端实习一二面面经</title>
    <link href="http://yoursite.com/2020/04/23/%E7%9C%8B%E5%88%AB%E4%BA%BA%E7%9A%84%E9%9D%A2%E7%BB%8F%E5%87%86%E5%A4%87%EF%BC%9A%E5%AD%97%E8%8A%82%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%B8%80%E4%BA%8C%E9%9D%A2%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2020/04/23/%E7%9C%8B%E5%88%AB%E4%BA%BA%E7%9A%84%E9%9D%A2%E7%BB%8F%E5%87%86%E5%A4%87%EF%BC%9A%E5%AD%97%E8%8A%82%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%B8%80%E4%BA%8C%E9%9D%A2%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-04-23T02:22:20.000Z</published>
    <updated>2020-04-24T01:30:59.131Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来源：<a href="https://www.nowcoder.com/discuss/414825" target="_blank" rel="noopener">字节前端实习一二面面经</a></p></blockquote><p>作者：桑桑的百香果 链接：https://www.nowcoder.com/discuss/414825 来源：牛客网</p><h3 id="一面">一面：</h3><ol type="1"><li><p>自我介绍</p></li><li><p>js基本数据类型（漏了布尔）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">值类型(基本类型)：字符串（<span class="built_in">String</span>）、数字(<span class="built_in">Number</span>)、布尔(<span class="built_in">Boolean</span>)、对空（Null）、未定义（Undefined）、<span class="built_in">Symbol</span> 、 BigInt 。</span><br><span class="line"></span><br><span class="line">引用数据类型：对象(<span class="built_in">Object</span>)、数组(<span class="built_in">Array</span>)、函数(<span class="built_in">Function</span>)。</span><br><span class="line"></span><br><span class="line">动态类型 : <span class="keyword">var</span> ；</span><br><span class="line"></span><br><span class="line">注：<span class="built_in">Symbol</span> 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</span><br></pre></td></tr></table></figure></li><li><p>出了三道题 都是考this指针的，然而我忘了题目是什么（但目测是对了）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In web browsers, the window object is also the global object:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">37</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 37</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.b = <span class="string">"MDN"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b)  <span class="comment">// "MDN"</span></span><br><span class="line"><span class="built_in">console</span>.log(b)         <span class="comment">// "MDN"</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In a browser:</span></span><br><span class="line">f1() === <span class="built_in">window</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In Node:</span></span><br><span class="line">f1() === global; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>; <span class="comment">// see strict mode</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2() === <span class="literal">undefined</span>; <span class="comment">// true</span></span><br><span class="line"><span class="comment">// In the second example, this should be undefined, because f2 was called directly and not as a method or property of an object (e.g. window.f2()). This feature wasn't implemented in some browsers when they first started to support strict mode. As a result, they incorrectly returned the window object.</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The first parameter is the object to use as</span></span><br><span class="line"><span class="comment">// 'this', subsequent parameters are passed as </span></span><br><span class="line"><span class="comment">// arguments in the function call</span></span><br><span class="line">add.call(o, <span class="number">5</span>, <span class="number">7</span>); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The first parameter is the object to use as</span></span><br><span class="line"><span class="comment">// 'this', the second is an array whose</span></span><br><span class="line"><span class="comment">// members are used as the arguments in the function call</span></span><br><span class="line">add.apply(o, [<span class="number">10</span>, <span class="number">20</span>]); <span class="comment">// 34</span></span><br></pre></td></tr></table></figure></li><li><p>var变量提升（get）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//In JavaScript, a variable can be declared after it has been used.</span></span><br><span class="line"><span class="comment">//In other words; a variable can be used before it has been declared.</span></span><br><span class="line"><span class="comment">// 'HOISTING'</span></span><br><span class="line">x = <span class="number">5</span>; <span class="comment">// Assign 5 to x</span></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>); <span class="comment">// Find an element</span></span><br><span class="line">elem.innerHTML = x;                     <span class="comment">// Display x in the element</span></span><br><span class="line"><span class="keyword">var</span> x; <span class="comment">// Declare x</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x; <span class="comment">// Declare x</span></span><br><span class="line">x = <span class="number">5</span>; <span class="comment">// Assign 5 to x</span></span><br><span class="line"></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>); <span class="comment">// Find an element</span></span><br><span class="line">elem.innerHTML = x;                     <span class="comment">// Display x in the element</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// To understand this, you have to understand the term "hoisting".</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Variables and constants declared with let or const are not hoisted!</span></span><br></pre></td></tr></table></figure></li><li><p>tcp三次握手（get）</p></li><li><p>tcp四次挥手（get）</p></li><li><p>http状态码（说不完整，她还问我服务器错误是啥）</p></li><li><p>http304的过程（get）</p></li><li><p>强缓存和协商缓存（get）</p></li><li><p>promise（get）</p></li><li><p>出了个算法：深度遍历树（大部分是对的，但是时间比较长，我算法是真的垃圾）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>https和http区别（get）</p></li><li><p>https通信过程（get）</p></li><li><p>对称加密和不对称加密的区别（get）</p></li><li><p>为什么一开始用不对称，后面用对称（母鸡）</p></li><li><p>浏览器是单进程的吗（我只知道js是单线程的。。） 不是</p></li><li><p>那浏览器还有哪些进程 不知道</p></li><li><p>xss攻击（get）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似 SQL 注入</span></span><br><span class="line"><span class="comment">// html 里面嵌入 JS</span></span><br></pre></td></tr></table></figure></li><li><p>怎么防御（只说了检查用户的输入）</p></li><li><p>css怎么垂直居中（行内和定宽说了，不知道不定宽。。之前看的都是水平居中。。）</p></li><li><p>position有哪几种取值，分别是怎么用的（get）</p></li><li><p>怎么控制可以强缓存（get） 不知道这题是不是这样问的，反正就是cache-control的设值</p></li><li><p>跨域（get）</p></li><li><p>cors如果我想请求时带上cookie咋搞(母鸡) 我说 记得有一个header可以设置，然后可以带上，然后就不知道了</p></li><li><p>tco和udp的区别</p></li><li><p>为什么说tcp比udp安全？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>还有的，想不起来了</p></li></ol><p>二面</p><ol type="1"><li>项目</li><li>手写js继承（做出来了，写的是组合继承） 问我组合继承的缺点。。忘记了（一切的一切从这里凉起）</li><li>手写bind函数（要用闭包写）（不会） 面试官真的疯狂提示我，然后我还是不会，凉凉</li><li>算法：翻转数组，不可以用reverse，要在原数组上修改（做出来了）</li><li>算法：合并区间（大概做出来了，思路没问题）</li><li>知道promise吗？为什么promise是微任务 ？ 我当然知道promise，但你问我为什么promise是微任务。。我母鸡啊</li><li>flex了解吗，flex：1什么意思</li><li>为什么一开始用不对称，后面用对称（重复了问题，但我连着面的，尼玛，没有时间去看答案）</li><li>怎么学的前端，学了多久，看了哪些书</li><li>进程和线程的联系和区别</li><li>线程间的通信</li><li>进程间的通信</li><li>死锁的原因和怎么解决<br /></li><li>啥是闭包</li><li>还有的，然而我忘记了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://www.nowcoder.com/discuss/414825&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;字节前端实习一二面面经&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作
      
    
    </summary>
    
    
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>牛客网OJ:JS刷题血泪史记录</title>
    <link href="http://yoursite.com/2020/04/22/%E7%89%9B%E5%AE%A2%E7%BD%91OJ-JS%E5%88%B7%E9%A2%98%E8%A1%80%E6%B3%AA%E5%8F%B2%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/04/22/%E7%89%9B%E5%AE%A2%E7%BD%91OJ-JS%E5%88%B7%E9%A2%98%E8%A1%80%E6%B3%AA%E5%8F%B2%E8%AE%B0%E5%BD%95/</id>
    <published>2020-04-22T03:55:36.000Z</published>
    <updated>2020-04-22T06:11:26.635Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景：微信挂了iOS和UI开发的提前批电面，马上开始OJ笔试，鹅厂是牛客的OJ。所以开始熟悉OJ的刷题形式，和LeetCode好不一样，需要时间适应。</p><p>要求是 JS V8</p></blockquote><h2 id="题目描述">1.题目描述</h2><p>计算a+b</p><h2 id="输入描述">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包括两个正整数a,b(1 &lt;&#x3D; a, b &lt;&#x3D; 10^9),输入数据包括多组。</span><br></pre></td></tr></table></figure><h2 id="输出描述">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出a+b的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line=readline())&#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);  </span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">parseInt</span>(lines[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">const</span> b = <span class="built_in">parseInt</span>(lines[<span class="number">1</span>]);</span><br><span class="line">    print(a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// node 读取 ： readline() 一次一行</span></span><br></pre></td></tr></table></figure><h2 id="题目描述-1">2.题目描述</h2><p>计算a+b</p><h2 id="输入描述-1">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入第一行包括一个数据组数t(1 &lt;&#x3D; t &lt;&#x3D; 100)</span><br><span class="line">接下来每行包括两个正整数a,b(1 &lt;&#x3D; a, b &lt;&#x3D; 10^9)</span><br></pre></td></tr></table></figure><h2 id="输出描述-1">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出a+b的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = readline();</span><br><span class="line"><span class="keyword">while</span>(line=readline())&#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);  </span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">parseInt</span>(lines[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">const</span> b = <span class="built_in">parseInt</span>(lines[<span class="number">1</span>]);</span><br><span class="line">    print(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-2">3.题目描述</h2><p>计算a+b</p><h2 id="输入描述-2">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包括两个正整数a,b(1 &lt;&#x3D; a, b &lt;&#x3D; 10^9),输入数据有多组, 如果输入为0 0则结束输入</span><br></pre></td></tr></table></figure><h2 id="输出描述-2">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出a+b的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line = readline()) &#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">if</span>( lines[<span class="number">0</span>]===<span class="string">'0'</span> &amp;&amp; lines[<span class="number">0</span>]===lines[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="built_in">parseInt</span>(lines[<span class="number">0</span>])+<span class="built_in">parseInt</span>(lines[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-3">4.题目描述</h2><p>计算一系列数的和</p><h2 id="输入描述-3">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入数据包括多组。</span><br><span class="line">每组数据一行,每行的第一个整数为整数的个数n(1 &lt;&#x3D; n &lt;&#x3D; 100), n为0的时候结束输入。</span><br><span class="line">接下来n个正整数,即需要求和的每个正整数。</span><br></pre></td></tr></table></figure><h2 id="输出描述-3">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>(line=readline()) &#123;</span><br><span class="line">    <span class="keyword">if</span>(line===<span class="string">'0'</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=lines[<span class="number">0</span>];i++) &#123;</span><br><span class="line">        sum+=<span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-4">5.题目描述</h2><p>计算一系列数的和</p><h2 id="输入描述-4">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入的第一行包括一个正整数t(1 &lt;&#x3D; t &lt;&#x3D; 100), 表示数据组数。</span><br><span class="line">接下来t行, 每行一组数据。</span><br><span class="line">每行的第一个整数为整数的个数n(1 &lt;&#x3D; n &lt;&#x3D; 100)。</span><br><span class="line">接下来n个正整数, 即需要求和的每个正整数。</span><br></pre></td></tr></table></figure><h2 id="输出描述-4">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> len = <span class="built_in">parseInt</span>(readline());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> line = readline();</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">const</span> t = lines[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;=t;j++) &#123;</span><br><span class="line">        sum+=<span class="built_in">parseInt</span>(lines[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-5">6.题目描述</h2><p>计算一系列数的和</p><h2 id="输入描述-5">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入数据有多组, 每行表示一组输入数据。</span><br><span class="line">每行的第一个整数为整数的个数n(1 &lt;&#x3D; n &lt;&#x3D; 100)。</span><br><span class="line">接下来n个正整数, 即需要求和的每个正整数。</span><br></pre></td></tr></table></figure><h2 id="输出描述-5">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line = readline()) &#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">const</span> len = lines[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=len;i++) &#123;</span><br><span class="line">        sum+=<span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-6">7.题目描述</h2><p>计算一系列数的和</p><h2 id="输入描述-6">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入数据有多组, 每行表示一组输入数据。</span><br><span class="line"></span><br><span class="line">每行不定有n个整数，空格隔开。(1 &lt;&#x3D; n &lt;&#x3D; 100)。</span><br></pre></td></tr></table></figure><h2 id="输出描述-6">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line=readline())&#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lines.length;i++) &#123;</span><br><span class="line">        sum+=<span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-7">8.题目描述</h2><p>对输入的字符串进行排序后输出</p><h2 id="输入描述-7">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入有两行，第一行n</span><br><span class="line"></span><br><span class="line">第二行是n个空格隔开的字符串</span><br></pre></td></tr></table></figure><h2 id="输出描述-7">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一行排序后的字符串，空格隔开，无结尾空格</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> len = <span class="built_in">parseInt</span>(readline())<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line"><span class="keyword">let</span> line = readline();</span><br><span class="line"><span class="keyword">let</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">while</span>(len&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">   res.push(lines[len]);</span><br><span class="line">   len=len<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = res.sort();</span><br><span class="line">print(res.join(<span class="string">' '</span>));</span><br></pre></td></tr></table></figure><h2 id="题目描述-8">9.题目描述</h2><p>对输入的字符串进行排序后输出</p><h2 id="输入描述-8">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多个测试用例，每个测试用例一行。</span><br><span class="line"></span><br><span class="line">每行通过空格隔开，有n个字符，n＜100</span><br></pre></td></tr></table></figure><h2 id="输出描述-8">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组测试用例，输出一行排序过的字符串，每个字符串通过空格隔开</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line = readline())&#123;</span><br><span class="line">    <span class="keyword">let</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lines.length;i++) &#123;</span><br><span class="line">        res.push(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res.sort();</span><br><span class="line">    print(res.join(<span class="string">' '</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-9">10.题目描述</h2><p>对输入的字符串进行排序后输出</p><h2 id="输入描述-9">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多个测试用例，每个测试用例一行。</span><br><span class="line">每行通过,隔开，有n个字符，n＜100</span><br></pre></td></tr></table></figure><h2 id="输出描述-9">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组用例输出一行排序后的字符串，用&#39;,&#39;隔开，无结尾空格</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line = readline())&#123;</span><br><span class="line">    <span class="keyword">let</span> lines = line.split(<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;lines.length;i++) &#123;</span><br><span class="line">        res.push(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res.sort();</span><br><span class="line">    print(res.join(<span class="string">','</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述-10">11.题目描述</h2><p>每年前几场在线笔试编程题的时候，总有同学询问为什么我本地测试通过，自测也通过，提交代码系统却返回通过率0。</p><p>这不是系统的错，可能是因为</p><p>1.你对题目理解错了，你的代码只过了样例或你自己的数据</p><p>2.你的代码逻辑有问题，你的代码只过了样例或你自己的数据</p><p>总之就是你的代码只是过了样例和自测数据，后台的测试数据你根本不可见，要多自己思考。</p><p>这个题目如果你提交后通过率为0，又觉得自己代码是正确的，可以在提交列表查看向宇同桌通过的代码</p><p>谨记：</p><p>当你笔试的时候怀疑系统或者题目数据有问题的时候请务必先怀疑自己的代码!</p><p>当你笔试的时候怀疑系统或者题目数据有问题的时候请务必先怀疑自己的代码!</p><p>请帮忙把这个练习专题发给你的朋友同学吧，感谢感谢</p><h2 id="输入描述-10">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入有多组测试用例，每组空格隔开两个整数</span><br></pre></td></tr></table></figure><h2 id="输出描述-10">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组数据输出一行两个整数的和</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(line=readline())&#123;</span><br><span class="line">    <span class="keyword">const</span> lines = line.split(<span class="string">' '</span>);</span><br><span class="line">    print(<span class="built_in">parseInt</span>(lines[<span class="number">0</span>])+<span class="built_in">parseInt</span>(lines[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;背景：微信挂了iOS和UI开发的提前批电面，马上开始OJ笔试，鹅厂是牛客的OJ。所以开始熟悉OJ的刷题形式，和LeetCode好不一样，需要时间适应。&lt;/p&gt;
&lt;p&gt;要求是 JS V8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;
      
    
    </summary>
    
    
    
      <category term="OJ" scheme="http://yoursite.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 437. Path Sum III</title>
    <link href="http://yoursite.com/2020/04/21/LeetCode-437-Path-Sum-III/"/>
    <id>http://yoursite.com/2020/04/21/LeetCode-437-Path-Sum-III/</id>
    <published>2020-04-21T09:50:43.000Z</published>
    <updated>2020-04-21T10:51:21.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are given a binary tree in which each node contains an integer value.</p><p>Find the number of paths that sum to a given value.</p><p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p><p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root &#x3D; [10,5,-3,3,2,null,11,3,-2,null,1], sum &#x3D; 8</span><br><span class="line"></span><br><span class="line">      10</span><br><span class="line">     &#x2F;  \</span><br><span class="line">    5   -3</span><br><span class="line">   &#x2F; \    \</span><br><span class="line">  3   2   11</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">3  -2   1</span><br><span class="line"></span><br><span class="line">Return 3. The paths that sum to 8 are:</span><br><span class="line"></span><br><span class="line">1.  5 -&gt; 3</span><br><span class="line">2.  5 -&gt; 2 -&gt; 1</span><br><span class="line">3. -3 -&gt; 11</span><br></pre></td></tr></table></figure></blockquote><p>Good old DFS recursive to tackle tree problem :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">sum</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">let</span> getSum = <span class="function"><span class="keyword">function</span>(<span class="params">node,sum</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ((sum===node.val) ? <span class="number">1</span>:<span class="number">0</span>) + getSum(node.right,sum-node.val) + getSum(node.left,sum-node.val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getSum(root,sum)+pathSum(root.right,sum)+pathSum(root.left,sum);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You are given a binary tree in which each node contains an integer value.&lt;/p&gt;
&lt;p&gt;Find the number of paths that sum to a give
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 198. House Robber</title>
    <link href="http://yoursite.com/2020/04/21/LeetCode-198-House-Robber/"/>
    <id>http://yoursite.com/2020/04/21/LeetCode-198-House-Robber/</id>
    <published>2020-04-21T01:28:53.000Z</published>
    <updated>2020-04-21T07:49:23.231Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 1) and then rob house 3 (money &#x3D; 3).</span><br><span class="line">             Total amount you can rob &#x3D; 1 + 3 &#x3D; 4.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 2), rob house 3 (money &#x3D; 9) and rob house 5 (money &#x3D; 1).</span><br><span class="line">             Total amount you can rob &#x3D; 2 + 9 + 1 &#x3D; 12.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Intuitive recursive method yet stack overflow TAT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> Robbed = <span class="function"><span class="keyword">function</span>(<span class="params">nums,i</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(nums.length&lt;<span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Math</span>.max(Robbed(nums,i<span class="number">-2</span>),Robbed(nums,i<span class="number">-1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> Robbed(nums,nums.length<span class="number">-1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">p, n</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> [p[<span class="number">1</span>], <span class="built_in">Math</span>.max(p[<span class="number">0</span>] + n, p[<span class="number">1</span>])]; </span><br><span class="line">    &#125;, [<span class="number">0</span>,<span class="number">0</span>])[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// variable p records previous 2 max values: p[1] is the previous one and p[0] is the one before previous one. p is initialized as [0,0]. variable n is the value at each position.</span></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback( accumulator, currentValue[, index[, array]] )[, initialValue])</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plain old good iterative method</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums.length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> maxAtTwoBefore = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> maxAtOneBefore = <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> maxAtCurrent = <span class="built_in">Math</span>.max(nums[i] + maxAtTwoBefore, maxAtOneBefore);</span><br><span class="line">        maxAtTwoBefore = maxAtOneBefore;</span><br><span class="line">        maxAtOneBefore = maxAtCurrent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxAtOneBefore;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// variable p records previous 2 max values: p[1] is the previous one and p[0] is the one before previous one. p is initialized as [0,0]. variable n is the value at each position.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the o
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 155. Min Stack</title>
    <link href="http://yoursite.com/2020/04/20/LeetCode-155-Min-Stack/"/>
    <id>http://yoursite.com/2020/04/20/LeetCode-155-Min-Stack/</id>
    <published>2020-04-20T02:58:18.000Z</published>
    <updated>2020-04-20T03:48:02.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p><ul><li>push(x) -- Push element x onto stack.</li><li>pop() -- Removes the element on top of the stack.</li><li>top() -- Get the top element.</li><li>getMin() -- Retrieve the minimum element in the stack.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MinStack minStack &#x3D; new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin(); &#x2F;&#x2F; return -3</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();    &#x2F;&#x2F; return 0</span><br><span class="line">minStack.getMin(); &#x2F;&#x2F; return -2</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MinStack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elements = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elements.push(&#123;</span><br><span class="line">    value: x,</span><br><span class="line">    min: <span class="keyword">this</span>.elements.length === <span class="number">0</span> ? x : <span class="built_in">Math</span>.min(x, <span class="keyword">this</span>.getMin()),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elements.pop();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.elements[<span class="keyword">this</span>.elements.length - <span class="number">1</span>].value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.getMin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.elements[<span class="keyword">this</span>.elements.length - <span class="number">1</span>].min;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MinStack()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.top()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.getMin()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>It's clever to put min &amp; value in a stack element together because if you only keep min as an stack property , when you pop it out the min remains the same.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) -- Pu
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
