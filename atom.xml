<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-16T04:37:43.747Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 98. Validate Binary Search Tree</title>
    <link href="http://yoursite.com/2020/04/16/LeetCode-98-Validate-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2020/04/16/LeetCode-98-Validate-Binary-Search-Tree/</id>
    <published>2020-04-16T03:44:59.000Z</published>
    <updated>2020-04-16T04:37:43.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><ul><li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li><li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line"></span><br><span class="line">Input: [2,1,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line"></span><br><span class="line">Input: [5,1,4,null,null,3,6]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The root node&#39;s value is 5 but its right child&#39;s value is 4.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span>(<span class="params">root,min=null,max=null</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(min &amp;&amp; root.val&lt;=min.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(max &amp;&amp; root.val&gt;=max.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> isValidBST(root.left,min,root) &amp;&amp; isValidBST(root.right,root,max);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, determine if it is a valid binary search tree (BST).&lt;/p&gt;
&lt;p&gt;Assume a BST is defined as follows:&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 34. Find First and Last Position of Element in Sorted Array</title>
    <link href="http://yoursite.com/2020/04/15/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
    <id>http://yoursite.com/2020/04/15/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</id>
    <published>2020-04-15T03:50:51.000Z</published>
    <updated>2020-04-15T07:51:41.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>Your algorithm's runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure></blockquote><p>Well obviously it's not brutal force log(N)</p><p><em>O</em>(log <em>n</em>) means binary search</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchRange = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right) &#123;</span><br><span class="line">           mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]===target) &#123;</span><br><span class="line">               left = right = mid;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&lt;target) &#123;</span><br><span class="line">               left = mid+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&gt;target) &#123;</span><br><span class="line">              right = mid<span class="number">-1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(left&gt;right) &#123;</span><br><span class="line">               <span class="comment">// if not in the array</span></span><br><span class="line">               <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (nums[left<span class="number">-1</span>] === target) left--;</span><br><span class="line">    <span class="keyword">while</span> (nums[right+<span class="number">1</span>] === target) right++;</span><br><span class="line">    <span class="keyword">return</span> [left,right];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; sorted in ascending order, find the starting and ending position of a given &lt;co
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 56. Merge Intervals</title>
    <link href="http://yoursite.com/2020/04/14/LeetCode-56-Merge-Intervals/"/>
    <id>http://yoursite.com/2020/04/14/LeetCode-56-Merge-Intervals/</id>
    <published>2020-04-14T10:29:54.000Z</published>
    <updated>2020-04-14T15:41:10.657Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a collection of intervals, merge all overlapping intervals.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">intervals</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(intervals.length&lt;<span class="number">2</span>) <span class="keyword">return</span> intervals;</span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>(a[<span class="number">0</span>]-b[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// first ascending sort</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;intervals.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> pre = intervals[i];</span><br><span class="line">        <span class="keyword">let</span> lat = intervals[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(pre[<span class="number">1</span>]&gt;=lat[<span class="number">0</span>]) &#123;</span><br><span class="line">            intervals[i+<span class="number">1</span>]=[<span class="built_in">Math</span>.min(pre[<span class="number">0</span>],lat[<span class="number">0</span>]),<span class="built_in">Math</span>.max(pre[<span class="number">1</span>],lat[<span class="number">1</span>])];</span><br><span class="line">            intervals.splice(i,<span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intervals;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a collection of intervals, merge all overlapping intervals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>R visualization : ordered dot chart</title>
    <link href="http://yoursite.com/2020/04/14/R-visualization-ordered-dot-chart/"/>
    <id>http://yoursite.com/2020/04/14/R-visualization-ordered-dot-chart/</id>
    <published>2020-04-14T06:01:22.000Z</published>
    <updated>2020-04-14T06:43:44.728Z</updated>
    
    <content type="html"><![CDATA[<p>According to <a href="student_score.csv">the csv file</a> , draw the dot chart of the total scores of the students.</p><p>Load the csv data:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; data</span><br><span class="line">              ID gender math english chemistry</span><br><span class="line">Davis    <span class="number">2017001</span>   Male  <span class="number">192</span>      <span class="number">93</span>        <span class="number">55</span></span><br><span class="line">Williams <span class="number">2017002</span>   Male  <span class="number">178</span>      <span class="number">86</span>        <span class="number">32</span></span><br><span class="line">Jones    <span class="number">2017003</span> Female  <span class="number">158</span>      <span class="number">65</span>        <span class="number">52</span></span><br><span class="line">Cushing  <span class="number">2017004</span>   Male  <span class="number">189</span>      <span class="number">72</span>        <span class="number">28</span></span><br><span class="line">Ytzrhak  <span class="number">2017005</span> Female  <span class="number">193</span>      <span class="number">87</span>        <span class="number">45</span></span><br><span class="line">Knox     <span class="number">2017006</span>   Male  <span class="number">167</span>      <span class="number">76</span>        <span class="number">60</span></span><br><span class="line">Rayburm  <span class="number">2017007</span>   Male  <span class="number">176</span>      <span class="number">79</span>        <span class="number">47</span></span><br><span class="line">England  <span class="number">2017008</span>   Male  <span class="number">185</span>      <span class="number">67</span>        <span class="number">42</span></span><br><span class="line">Tmac     <span class="number">2017009</span> Female  <span class="number">174</span>      <span class="number">69</span>        <span class="number">52</span></span><br><span class="line">Mcgrady  <span class="number">2017010</span> Female  <span class="number">182</span>      <span class="number">81</span>        <span class="number">38</span></span><br></pre></td></tr></table></figure><p>Add <code>total</code> to the data</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; data$total &lt;- apply(data[,c(<span class="number">3</span>:<span class="number">5</span>)],<span class="number">1</span>,sum)</span><br><span class="line">&gt; data</span><br><span class="line">              ID gender math english chemistry total</span><br><span class="line">Davis    <span class="number">2017001</span>   Male  <span class="number">192</span>      <span class="number">93</span>        <span class="number">55</span>   <span class="number">340</span></span><br><span class="line">Williams <span class="number">2017002</span>   Male  <span class="number">178</span>      <span class="number">86</span>        <span class="number">32</span>   <span class="number">296</span></span><br><span class="line">Jones    <span class="number">2017003</span> Female  <span class="number">158</span>      <span class="number">65</span>        <span class="number">52</span>   <span class="number">275</span></span><br><span class="line">Cushing  <span class="number">2017004</span>   Male  <span class="number">189</span>      <span class="number">72</span>        <span class="number">28</span>   <span class="number">289</span></span><br><span class="line">Ytzrhak  <span class="number">2017005</span> Female  <span class="number">193</span>      <span class="number">87</span>        <span class="number">45</span>   <span class="number">325</span></span><br><span class="line">Knox     <span class="number">2017006</span>   Male  <span class="number">167</span>      <span class="number">76</span>        <span class="number">60</span>   <span class="number">303</span></span><br><span class="line">Rayburm  <span class="number">2017007</span>   Male  <span class="number">176</span>      <span class="number">79</span>        <span class="number">47</span>   <span class="number">302</span></span><br><span class="line">England  <span class="number">2017008</span>   Male  <span class="number">185</span>      <span class="number">67</span>        <span class="number">42</span>   <span class="number">294</span></span><br><span class="line">Tmac     <span class="number">2017009</span> Female  <span class="number">174</span>      <span class="number">69</span>        <span class="number">52</span>   <span class="number">295</span></span><br><span class="line">Mcgrady  <span class="number">2017010</span> Female  <span class="number">182</span>      <span class="number">81</span>        <span class="number">38</span>   <span class="number">301</span></span><br></pre></td></tr></table></figure><p>Use <code>order()</code> to organize the data</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; data[order(data$total),]</span><br><span class="line">              ID gender math english chemistry total</span><br><span class="line">Jones    <span class="number">2017003</span> Female  <span class="number">158</span>      <span class="number">65</span>        <span class="number">52</span>   <span class="number">275</span></span><br><span class="line">Cushing  <span class="number">2017004</span>   Male  <span class="number">189</span>      <span class="number">72</span>        <span class="number">28</span>   <span class="number">289</span></span><br><span class="line">England  <span class="number">2017008</span>   Male  <span class="number">185</span>      <span class="number">67</span>        <span class="number">42</span>   <span class="number">294</span></span><br><span class="line">Tmac     <span class="number">2017009</span> Female  <span class="number">174</span>      <span class="number">69</span>        <span class="number">52</span>   <span class="number">295</span></span><br><span class="line">Williams <span class="number">2017002</span>   Male  <span class="number">178</span>      <span class="number">86</span>        <span class="number">32</span>   <span class="number">296</span></span><br><span class="line">Mcgrady  <span class="number">2017010</span> Female  <span class="number">182</span>      <span class="number">81</span>        <span class="number">38</span>   <span class="number">301</span></span><br><span class="line">Rayburm  <span class="number">2017007</span>   Male  <span class="number">176</span>      <span class="number">79</span>        <span class="number">47</span>   <span class="number">302</span></span><br><span class="line">Knox     <span class="number">2017006</span>   Male  <span class="number">167</span>      <span class="number">76</span>        <span class="number">60</span>   <span class="number">303</span></span><br><span class="line">Ytzrhak  <span class="number">2017005</span> Female  <span class="number">193</span>      <span class="number">87</span>        <span class="number">45</span>   <span class="number">325</span></span><br><span class="line">Davis    <span class="number">2017001</span>   Male  <span class="number">192</span>      <span class="number">93</span>        <span class="number">55</span>   <span class="number">340</span></span><br></pre></td></tr></table></figure><p>Draw the chart :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dotchart(data[order(data$total),]$total,labels = rownames(data[order(data$total),]),main = <span class="string">"simple dot chart"</span>,pch=<span class="number">18</span>,col=<span class="string">"blue"</span>,xlab = <span class="string">"score"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Ge61xJI.png" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;According to &lt;a href=&quot;student_score.csv&quot;&gt;the csv file&lt;/a&gt; , draw the dot chart of the total scores of the students.&lt;/p&gt;
&lt;p&gt;Load the csv d
      
    
    </summary>
    
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 22. Generate Parentheses</title>
    <link href="http://yoursite.com/2020/04/13/LeetCode-22-Generate-Parentheses/"/>
    <id>http://yoursite.com/2020/04/13/LeetCode-22-Generate-Parentheses/</id>
    <published>2020-04-13T02:42:53.000Z</published>
    <updated>2020-04-13T04:01:19.125Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><p>For example, given <em>n</em> = 3, a solution set is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><p>DP solution :</p><p>Generate 0 pair () then generate n pair afterwards</p><p>Generate 1 pair () then generate n-1 pair afterwards</p><p>Generate 2 pairs () then generate n-2 pair afterwards</p><p>…</p><p>Generate n-1 pairs () then 1 pair afterwards</p><p>Here is the process:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">2</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">2</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">3</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="function">(<span class="params">left,right,part</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(!left &amp;&amp; !right) res.push(part);</span><br><span class="line">        <span class="keyword">if</span>(left&gt;<span class="number">0</span>) dp(left<span class="number">-1</span>,right,part+<span class="string">'('</span>);</span><br><span class="line">        <span class="keyword">if</span>(right&gt;<span class="number">0</span>) dp(left,right<span class="number">-1</span>,part+<span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dp(n,n,<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; pairs of parentheses, write a function to generate all combinations of well-formed parentheses.&lt;/p&gt;
&lt;p&gt;For 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 394. Decode String</title>
    <link href="http://yoursite.com/2020/04/12/LeetCode-394-Decode-String/"/>
    <id>http://yoursite.com/2020/04/12/LeetCode-394-Decode-String/</id>
    <published>2020-04-12T02:03:41.000Z</published>
    <updated>2020-04-12T02:46:43.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: <code>k[encoded_string]</code>, where the <em>encoded_string</em> inside the square brackets is being repeated exactly <em>k</em> times. Note that <em>k</em> is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <em>k</em>. For example, there won't be input like <code>3a</code> or <code>2[4]</code>.</p><p><strong>Examples:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; &quot;3[a]2[bc]&quot;, return &quot;aaabcbc&quot;.</span><br><span class="line">s &#x3D; &quot;3[a2[c]]&quot;, return &quot;accaccacc&quot;.</span><br><span class="line">s &#x3D; &quot;2[abc]3[cd]ef&quot;, return &quot;abcabccdcdcdef&quot;.</span><br></pre></td></tr></table></figure></blockquote><p>Obviously we should use stack to tackle the problem.</p><p>Read the string from left to right , if you meet a '[' , push the string into the stack , if you meet a ']' , pop the string out of the stack.</p><p>Also keep a length keeper for each string in the stack , slightly upper than the letters.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> decodeString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (char !== <span class="string">"]"</span>) &#123; stack.push(char); <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="keyword">let</span> cur = stack.pop();</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur !== <span class="string">'['</span>) &#123;</span><br><span class="line">      str = cur + str;</span><br><span class="line">      cur = stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="string">''</span>;</span><br><span class="line">    cur = stack.pop();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>(cur))) &#123;</span><br><span class="line">        <span class="comment">// if the current element is a digit</span></span><br><span class="line">      num = cur + num;</span><br><span class="line">      cur = stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    stack.push(cur);</span><br><span class="line">    stack.push(str.repeat(<span class="built_in">Number</span>(num)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an encoded string, return its decoded string.&lt;/p&gt;
&lt;p&gt;The encoding rule is: &lt;code&gt;k[encoded_string]&lt;/code&gt;, where the &lt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 200. Number of Islands</title>
    <link href="http://yoursite.com/2020/04/11/LeetCode-200-Number-of-Islands/"/>
    <id>http://yoursite.com/2020/04/11/LeetCode-200-Number-of-Islands/</id>
    <published>2020-04-11T02:20:42.000Z</published>
    <updated>2020-04-11T02:54:58.065Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a 2d grid map of <code>'1'</code>s (land) and <code>'0'</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">11110</span><br><span class="line">11010</span><br><span class="line">11000</span><br><span class="line">00000</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">11000</span><br><span class="line">11000</span><br><span class="line">00100</span><br><span class="line">00011</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// trivial DFS method</span></span><br><span class="line"><span class="keyword">var</span> numIslands = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// judge before jump into the further mess of recursion</span></span><br><span class="line">        <span class="keyword">if</span> (grid[x][y] === <span class="string">'1'</span>) &#123;</span><br><span class="line">            grid[x][y] = <span class="string">'0'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; grid.length - <span class="number">1</span>) &#123;</span><br><span class="line">            dfs(x+<span class="number">1</span>, y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (y &lt; grid[x].length - <span class="number">1</span>) &#123;</span><br><span class="line">            dfs(x, y+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; grid.length) &#123;</span><br><span class="line">            dfs(x<span class="number">-1</span>, y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; y &lt; grid[x].length) &#123;</span><br><span class="line">            dfs(x, y<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] === <span class="string">'1'</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                dfs(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a 2d grid map of &lt;code&gt;&#39;1&#39;&lt;/code&gt;s (land) and &lt;code&gt;&#39;0&#39;&lt;/code&gt;s (water), count the number of islands. An island is sur
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 102. Binary Tree Level Order Traversal</title>
    <link href="http://yoursite.com/2020/04/10/LeetCode-102-Binary-Tree-Level-Order-Traversal/"/>
    <id>http://yoursite.com/2020/04/10/LeetCode-102-Binary-Tree-Level-Order-Traversal/</id>
    <published>2020-04-10T07:40:26.000Z</published>
    <updated>2020-04-10T08:09:05.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br />Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><p>Intuitive recursive method :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">levelOrder</span>(<span class="params">root, level=<span class="number">0</span>, result=[]</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root) &#123;</span><br><span class="line"><span class="comment">// init subarray if it doesn't exist</span></span><br><span class="line">    <span class="keyword">let</span> arr = (result[level] = (result[level] || []));</span><br><span class="line">arr.push(root.val);</span><br><span class="line">levelOrder(root.left, level+<span class="number">1</span>, result);</span><br><span class="line">levelOrder(root.right, level+<span class="number">1</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then the BFS method</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">levelOrder</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (queue.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> len = queue.length;</span><br><span class="line">        <span class="keyword">let</span> level = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = queue.pop();</span><br><span class="line">            level.push(temp.val);</span><br><span class="line">            <span class="keyword">if</span>(temp.left) queue.unshift(temp.left);</span><br><span class="line">            <span class="keyword">if</span>(temp.right) queue.unshift(temp.right);</span><br><span class="line">            <span class="comment">// The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.push(level);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the &lt;em&gt;level order&lt;/em&gt; traversal of its nodes’ values. (ie, from left to right, level by level
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 739. Daily Temperatures</title>
    <link href="http://yoursite.com/2020/04/09/LeetCode-739-Daily-Temperatures/"/>
    <id>http://yoursite.com/2020/04/09/LeetCode-739-Daily-Temperatures/</id>
    <published>2020-04-09T06:36:41.000Z</published>
    <updated>2020-04-09T07:59:02.407Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a list of daily temperatures <code>T</code>, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put <code>0</code> instead.</p><p>For example, given the list of temperatures <code>T = [73, 74, 75, 71, 69, 72, 76, 73]</code>, your output should be <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>.</p><p><strong>Note:</strong> The length of <code>temperatures</code> will be in the range <code>[1, 30000]</code>. Each temperature will be an integer in the range <code>[30, 100]</code>.</p></blockquote><p>Use stack to store the temporary ready-to-compare elements</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">T</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> dailyTemperatures = <span class="function"><span class="keyword">function</span>(<span class="params">T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T===<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> temp = []; <span class="comment">// stack</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="built_in">Array</span>(T.length).fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;T.length;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (temp.length&gt;<span class="number">0</span> &amp;&amp; T[i]&gt;T[temp[temp.length<span class="number">-1</span>]])  &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// if meet the right element pop out the one in the stack , record the index and move on</span></span><br><span class="line">            <span class="keyword">let</span> index = temp.pop();</span><br><span class="line">            res[index] = i - index;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.push(i);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a list of daily temperatures &lt;code&gt;T&lt;/code&gt;, return a list such that, for each day in the input, tells you how many da
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 75. Sort Colors</title>
    <link href="http://yoursite.com/2020/04/08/LeetCode-75-Sort-Colors/"/>
    <id>http://yoursite.com/2020/04/08/LeetCode-75-Sort-Colors/</id>
    <published>2020-04-08T03:05:36.000Z</published>
    <updated>2020-04-08T04:49:50.168Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array with <em>n</em> objects colored red, white or blue, sort them <strong><a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p><p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p><p><strong>Note:</strong> You are not suppose to use the library’s sort function for this problem.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,0,2,1,1,0]</span><br><span class="line">Output: [0,0,1,1,2,2]</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><ul><li>A rather straight forward solution is a two-pass algorithm using counting sort.<br />First, iterate the array counting number of 0’s, 1’s, and 2’s, then  overwrite array with total number of 0’s, then 1’s and followed by 2’s.</li><li>Could you come up with a one-pass algorithm using only constant space?</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortColors = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = nums.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// [0...][1...][2...]</span></span><br><span class="line">  <span class="comment">// [0...] move 0 to the start , start ++ , i++ </span></span><br><span class="line">  <span class="comment">// [1...] i++ </span></span><br><span class="line">  <span class="comment">// [2...] move 2 to the end , end--</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i&lt;=end) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]===<span class="number">0</span>) &#123;</span><br><span class="line">            temp = nums[i];</span><br><span class="line">            nums[i] = nums[start];</span><br><span class="line">            nums[start++] = temp;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[i]===<span class="number">1</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[i]===<span class="number">2</span>) &#123;</span><br><span class="line">            temp = nums[i];</span><br><span class="line">            nums[i] = nums[end];</span><br><span class="line">            nums[end--] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array with &lt;em&gt;n&lt;/em&gt; objects colored red, white or blue, sort them &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 114. Flatten Binary Tree to Linked List</title>
    <link href="http://yoursite.com/2020/04/07/LeetCode-114-Flatten-Binary-Tree-to-Linked-List/"/>
    <id>http://yoursite.com/2020/04/07/LeetCode-114-Flatten-Binary-Tree-to-Linked-List/</id>
    <published>2020-04-07T09:53:46.000Z</published>
    <updated>2020-04-07T10:47:15.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, flatten it to a linked list in-place.</p><p>For example, given the following tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   5</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">3   4   6</span><br></pre></td></tr></table></figure><p>The flattened tree should look like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line">   \</span><br><span class="line">    3</span><br><span class="line">     \</span><br><span class="line">      4</span><br><span class="line">       \</span><br><span class="line">        5</span><br><span class="line">         \</span><br><span class="line">          6</span><br></pre></td></tr></table></figure></blockquote><p>The trivial recursive method</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">    temp = root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(temp) &#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.left) &#123;</span><br><span class="line">            pre = temp.left;</span><br><span class="line">            <span class="keyword">while</span>(pre.right) &#123;</span><br><span class="line">                pre = pre.right;</span><br><span class="line">            &#125;</span><br><span class="line">            pre.right = temp.right;</span><br><span class="line">            temp.right = temp.left;</span><br><span class="line">            temp.left = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, flatten it to a linked list in-place.&lt;/p&gt;
&lt;p&gt;For example, given the following tree:&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 78. Subsets</title>
    <link href="http://yoursite.com/2020/04/06/LeetCode-78-Subsets/"/>
    <id>http://yoursite.com/2020/04/06/LeetCode-78-Subsets/</id>
    <published>2020-04-06T06:24:04.000Z</published>
    <updated>2020-04-06T10:02:29.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p><p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><h4 id="section"></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subsets= <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    generateSubsets([],<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">generateSubsets</span>(<span class="params">temp,index</span>) </span>&#123;</span><br><span class="line">        res.push(temp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=index;i&lt;nums.length;i++) &#123;</span><br><span class="line">            generateSubsets([...temp,nums[i]],i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then I found a more concise version:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subsets = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> res = [[]]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">res.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">res.push([...item, nums[i]])</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a set of &lt;strong&gt;distinct&lt;/strong&gt; integers, &lt;em&gt;nums&lt;/em&gt;, return all possible subsets (the power set).&lt;/p&gt;
&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 791. Custom Sort String</title>
    <link href="http://yoursite.com/2020/04/04/LeetCode-791-Custom-Sort-String/"/>
    <id>http://yoursite.com/2020/04/04/LeetCode-791-Custom-Sort-String/</id>
    <published>2020-04-04T12:50:50.000Z</published>
    <updated>2020-04-05T04:01:12.611Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>S</code> and <code>T</code> are strings composed of lowercase letters. In <code>S</code>, no letter occurs more than once.</p><p><code>S</code> was sorted in some custom order previously. We want to permute the characters of <code>T</code> so that they match the order that <code>S</code> was sorted. More specifically, if <code>x</code> occurs before <code>y</code> in <code>S</code>, then <code>x</code> should occur before <code>y</code> in the returned string.</p><p>Return any permutation of <code>T</code> (as a string) that satisfies this property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example :</span><br><span class="line">Input: </span><br><span class="line">S &#x3D; &quot;cba&quot;</span><br><span class="line">T &#x3D; &quot;abcd&quot;</span><br><span class="line">Output: &quot;cbad&quot;</span><br><span class="line">Explanation: </span><br><span class="line">&quot;a&quot;, &quot;b&quot;, &quot;c&quot; appear in S, so the order of &quot;a&quot;, &quot;b&quot;, &quot;c&quot; should be &quot;c&quot;, &quot;b&quot;, and &quot;a&quot;. </span><br><span class="line">Since &quot;d&quot; does not appear in S, it can be at any position in T. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; are also valid outputs.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>S</code> has length at most <code>26</code>, and no character is repeated in <code>S</code>.</li><li><code>T</code> has length at most <code>200</code>.</li><li><code>S</code> and <code>T</code> consist of lowercase letters only.</li></ul></blockquote><p>Well there is the no loop no set solution :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customSortString = <span class="function"><span class="keyword">function</span>(<span class="params">S, T</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// break S &amp; T into array of chars</span></span><br><span class="line">    <span class="keyword">let</span> first = S.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> second = T.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(first.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> index = second.indexOf(first[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// if the element exists</span></span><br><span class="line">            res.push(second[index]);</span><br><span class="line">            second.splice(index,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.shift();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125; </span><br><span class="line">    res.push(...second);</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>First my program was like this and it failed :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customSortString = <span class="function"><span class="keyword">function</span>(<span class="params">S, T</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// break S &amp; T into array of chars</span></span><br><span class="line">    <span class="keyword">let</span> first = S.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> second = T.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(first.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> index = second.indexOf(first[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// if the element exists</span></span><br><span class="line">            res.push(second[index]);</span><br><span class="line">            second.splice(index,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.shift();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125; </span><br><span class="line">    res.push(second);</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The failed case is :</p><blockquote><p>Input</p><p>"disqyr" "iwyrysqrdj"</p><p>Output</p><p>"disqyyrrw,j"</p><p>Expected</p><p>"disqyyrrjw"</p></blockquote><p>So I wrote a testing program :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="string">"disqyr"</span>;</span><br><span class="line">T = <span class="string">"iwyrysqrdj"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customSortString = <span class="function"><span class="keyword">function</span>(<span class="params">S, T</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// break S &amp; T into array of chars</span></span><br><span class="line">    <span class="keyword">let</span> first = S.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> second = T.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(first.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> index = second.indexOf(first[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// if the element exists</span></span><br><span class="line">            res.push(second[index]);</span><br><span class="line">            second.splice(index,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>,second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.shift();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>,first)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.push(second);</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(customSortString(S,T));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> [</span><br><span class="line">  <span class="string">'i'</span>, <span class="string">'w'</span>, <span class="string">'y'</span>,</span><br><span class="line">  <span class="string">'r'</span>, <span class="string">'y'</span>, <span class="string">'s'</span>,</span><br><span class="line">  <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'j'</span></span><br><span class="line">]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'i'</span>, <span class="string">'s'</span>, <span class="string">'q'</span>, <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [</span><br><span class="line">  <span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>,</span><br><span class="line">  <span class="string">'y'</span>, <span class="string">'s'</span>, <span class="string">'q'</span>,</span><br><span class="line">  <span class="string">'r'</span>, <span class="string">'j'</span></span><br><span class="line">]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'s'</span>, <span class="string">'q'</span>, <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [</span><br><span class="line">  <span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>,</span><br><span class="line">  <span class="string">'y'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>,</span><br><span class="line">  <span class="string">'j'</span></span><br><span class="line">]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'q'</span>, <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'r'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">1</span> []</span><br><span class="line">disqyyrrw,j</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Now it's clear that the rest of second array needs to be turned into a string.</p><p>And <code>Three dots ( … ) in JavaScript</code> occurs in a function call or alike, it's called a "spread operator" and expands an array into a list.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; are strings composed of lowercase letters. In &lt;code&gt;S&lt;/code&gt;, no letter occurs more than o
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 33. Search in Rotated Sorted Array</title>
    <link href="http://yoursite.com/2020/04/04/LeetCode-33-Search-in-Rotated-Sorted-Array/"/>
    <id>http://yoursite.com/2020/04/04/LeetCode-33-Search-in-Rotated-Sorted-Array/</id>
    <published>2020-04-04T07:27:28.000Z</published>
    <updated>2020-04-04T12:03:13.497Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm's runtime complexity must be in the order of <strong><em>O</em>(log <em>n</em>).</strong></p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></blockquote><p>Well it already says O(log n) so we must take divide and conquer into consideration .</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((left+right)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums[mid]===target) <span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums[left]&lt;=nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left]&lt;=target &amp;&amp; target &lt;=nums[mid]) &#123;</span><br><span class="line">                right = mid<span class="number">-1</span>;</span><br><span class="line">                <span class="comment">// target must be in the left part</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                <span class="comment">// target must be in the right part</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., &lt;code&gt;[0,1,2,4,
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>2020.4.4 How Chinese websites become balck and white</title>
    <link href="http://yoursite.com/2020/04/04/2020-4-4-How-Chinese-websites-become-balck-and-white/"/>
    <id>http://yoursite.com/2020/04/04/2020-4-4-How-Chinese-websites-become-balck-and-white/</id>
    <published>2020-04-04T03:11:31.000Z</published>
    <updated>2020-04-04T07:28:19.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>If you don't see any images pls wait a sec cuz I use root-relative Link to store images. It might take a while to load.</p></blockquote><p>As a heavy Douban user, I checked Douban web ver first.</p><p><img src="/images/douban-before-4-4.png" /></p><p>I was doing an all-nighter and boom , the world turned colorless.</p><p><img src="/images/douban-after-4-4.png" /></p><p>One of my friends told me that use <code>document.body.classList.remove('gray-mode')</code> can reignite the original view. I tried and it worked !</p><p>So I opened my Firefox dev tools and looked into the code.</p><p><img src="/images/douban-before-code-4-4.png" /></p><p>It quite clear that the <code>gray-mode</code> class in the <code>body</code> works the magic here.</p><p>Basically there are three method , all filters.</p><p>But when I refresh the page , the original view still sneaks in first for about half a sec so It's not perfect.</p><p>Also I searched for "grayscale website solutions" and found this on <a href="https://stackoverflow.com/questions/30192221/is-it-possible-to-turn-an-entire-webpage-to-grayscale-using-css" target="_blank" rel="noopener">Stackoverflow</a></p><p>It suggests :</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* No need to set the filter on every single element, You can apply the filter on HTML.  */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">filter</span>: gray; <span class="comment">/* IE6-9 */</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;If you don&#39;t see any images pls wait a sec cuz I use root-relative Link to store images. It might take a while to load.&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 128. Longest Consecutive Sequence</title>
    <link href="http://yoursite.com/2020/04/03/LeetCode-128-Longest-Consecutive-Sequence/"/>
    <id>http://yoursite.com/2020/04/03/LeetCode-128-Longest-Consecutive-Sequence/</id>
    <published>2020-04-03T07:32:12.000Z</published>
    <updated>2020-04-03T09:53:10.554Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p><p>Your algorithm should run in O(<em>n</em>) complexity.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [100, 4, 200, 1, 3, 2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.</span><br></pre></td></tr></table></figure></blockquote><p>Use hash map to decrease the time complexity.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> dict = <span class="keyword">new</span> <span class="built_in">Set</span>(nums);</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> increase = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (dict.has(nums[i] + increase)) &#123;</span><br><span class="line">            increase++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">Math</span>.max(res,increase);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Strictly speaking , It's not exactly O(n) ...</p><p>So there is another method I found at the discussion section :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestConsecutive</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> lens = &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lens[n] != <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> l = lens[n - <span class="number">1</span>] || <span class="number">0</span>;   <span class="comment">// left length</span></span><br><span class="line">    <span class="keyword">const</span> r = lens[n + <span class="number">1</span>] || <span class="number">0</span>;   <span class="comment">// right length</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> len = l + r + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extend the length to the boundaries</span></span><br><span class="line">    lens[n - l] = len;</span><br><span class="line">    lens[n] = len;</span><br><span class="line">    lens[n + r] = len;</span><br><span class="line"></span><br><span class="line">    max = <span class="built_in">Math</span>.max(max, len);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is a strictly O(n) method.</p><p>And the ranking rockets to 98% !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an unsorted array of integers, find the length of the longest consecutive elements sequence.&lt;/p&gt;
&lt;p&gt;Your algorithm sho
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 5. Longest Palindromic Substring</title>
    <link href="http://yoursite.com/2020/04/02/LeetCode-5-Longest-Palindromic-Substring/"/>
    <id>http://yoursite.com/2020/04/02/LeetCode-5-Longest-Palindromic-Substring/</id>
    <published>2020-04-02T07:31:50.000Z</published>
    <updated>2020-04-02T09:12:47.267Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;babad&quot;</span><br><span class="line">Output: &quot;bab&quot;</span><br><span class="line">Note: &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;cbbd&quot;</span><br><span class="line">Output: &quot;bb&quot;</span><br></pre></td></tr></table></figure></blockquote><h4 id="js-substring"><a class="markdownIt-Anchor" href="#js-substring"></a> JS <code>substring()</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.substring(indexStart[, indexEnd])</span><br></pre></td></tr></table></figure><h4 id="parameters"><a class="markdownIt-Anchor" href="#parameters"></a> Parameters</h4><ul><li><p><code>indexStart</code></p><p>The index of the first character to include in the returned substring.</p></li><li><p><code>indexEnd</code> Optional</p><p>The index of the first character to exclude from the returned substring.</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s.length&lt;<span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> maxStr = <span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">            <span class="comment">// two situations: ABA &amp; AA so is str[i]&amp;str[i] or str[i]&amp;str[i+1]</span></span><br><span class="line">            <span class="keyword">let</span> left = i;</span><br><span class="line">            <span class="keyword">let</span> right = i+j;</span><br><span class="line">            <span class="keyword">while</span>(s[left] &amp;&amp; s[left]===s[right])&#123;</span><br><span class="line">                left--;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// when it stops the variables are : s[real_left-1]s[real_right+1]</span></span><br><span class="line">          <span class="comment">// so the length is real_right-real_left+1=(real_right+1)-(real_left-1)-2+1=right-left-1</span></span><br><span class="line">            <span class="keyword">if</span>((right-left<span class="number">-1</span>)&gt;maxStr.length) &#123;</span><br><span class="line">                maxStr = s.substring(left+<span class="number">1</span>,right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxStr;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a string &lt;strong&gt;s&lt;/strong&gt;, find the longest palindromic substring in &lt;strong&gt;s&lt;/strong&gt;. You may assume that the max
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 105. Construct Binary Tree from Preorder and Inorder Traversal</title>
    <link href="http://yoursite.com/2020/04/01/LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/"/>
    <id>http://yoursite.com/2020/04/01/LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</id>
    <published>2020-04-01T04:27:18.000Z</published>
    <updated>2020-04-01T05:02:22.811Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>\105. Construct Binary Tree from Preorder and Inorder Traversal</p><p>Medium</p><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p><p><strong>Note:</strong> You may assume that duplicates do not exist in the tree.</p><p>For example, given</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preorder &#x3D; [3,9,20,15,7]</span><br><span class="line">inorder &#x3D; [9,3,15,20,7]</span><br></pre></td></tr></table></figure><p>Return the following binary tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></blockquote><p>The <code>shift()</code> method removes the <strong>first</strong> element from an array and returns that removed element.</p><p>Use recursive method to build binary trees.</p><p>Recall how we build the tree from preorder &amp; inorder info</p><p>First step : find the position of the first element from the preorder list in the inorder list</p><p>3 | 9 | 20 15 7</p><p>9 | 3 | 15 20 7</p><p>Then it shows that the root is 3 , left tree is [9] , right tree is [20,15,7]</p><p>So step into the recursion ...</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">preorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">inorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> recursiveBuilder =  <span class="function">(<span class="params">start,end</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> t = preorder.shift();</span><br><span class="line">        <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(t);</span><br><span class="line">        root.left = recursiveBuilder(start,inorder.indexOf(t)<span class="number">-1</span>);</span><br><span class="line">        root.right = recursiveBuilder(inorder.indexOf(t)+<span class="number">1</span>,end);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> recursiveBuilder(<span class="number">0</span>,inorder.length<span class="number">-1</span>);x</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;\105. Construct Binary Tree from Preorder and Inorder Traversal&lt;/p&gt;
&lt;p&gt;Medium&lt;/p&gt;
&lt;p&gt;Given preorder and inorder traversal of
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 19. Remove Nth Node From End of List</title>
    <link href="http://yoursite.com/2020/03/31/LeetCode-146-LRU-Cache/"/>
    <id>http://yoursite.com/2020/03/31/LeetCode-146-LRU-Cache/</id>
    <published>2020-03-31T06:59:22.000Z</published>
    <updated>2020-03-31T15:05:48.940Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Given <em>n</em> will always be valid.</p><p><strong>Follow up:</strong></p><p>Could you do this in one pass?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = head;</span><br><span class="line">    <span class="keyword">let</span> curr = head;</span><br><span class="line">    <span class="keyword">let</span> prev = head;</span><br><span class="line">  <span class="comment">// one pass =&gt; extra pointers to record the positions</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// counter : the length of the list</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(t) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i === n) &#123;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        t = t.next;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(n === counter) &#123;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    prev.next = curr.next;</span><br><span class="line">  <span class="comment">// use two pointers to remove the element</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a linked list, remove the &lt;em&gt;n&lt;/em&gt;-th node from the end of list and return its head.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>2020暑期实习申请全记录&amp;反思</title>
    <link href="http://yoursite.com/2020/03/30/2020%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%8F%8D%E6%80%9D/"/>
    <id>http://yoursite.com/2020/03/30/2020%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%8F%8D%E6%80%9D/</id>
    <published>2020-03-30T12:54:30.000Z</published>
    <updated>2020-04-01T11:35:00.988Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景：</p><p>不知名211 / 药学方向的信管 / 大三 / 无实习 / 无竞赛 / 无paper</p></blockquote><p><del>总之就是很弱，担心申请学校和工作都没人捞的那种</del></p><p>直到去年12月才真正开始准备转码……（就是平时不刷题没有准备的意思</p><p>寒假一个是准备GRE（疫情，推迟到七月了）一个是精神状态非常不好，几乎没有准备技术方向的事情，每天很焦虑，完全不能集中精神，睡觉也睡不好，所以现在也不是特别后悔当时没有准备，毕竟精神状况也不允许</p><p>直到各大公众号开始推送暑期实习的东西了我才缓过神来，开始改简历，投简历，但是因为事情太多没时间，还是没有开始刷题</p><p>很惭愧，自己本来就不是科班出身，也没有经历还这么懒……</p><p>先是海投了<strong>技术岗</strong></p><p>腾讯阿里网易游戏字节跳动ThoughtWorks宝洁什么的都投了一遍（宝洁是IT部</p><p>无音讯（校友没什么内推，当时也没想着说要去 <strong>reach out</strong>，没有经验，现在很后悔，投了就不能改，<strong>希望学弟学妹在投之前一定要找内推，起码不用做奇奇怪怪的题目</strong> 可以找企业内部员工的学长学姐，网友，内推群，都行，也可以问问自己家人，不内推真的血亏）</p><p><strong>腾讯事业群一定要细细选</strong>，不急，好歹听完宣讲会…… 我就是太急了，一顿瞎操作，最后哭晕在厕所……</p><p>杳 无 音 讯</p><p>终于有一天上企业微信看到了面试官加我 是微信iOS开发的小哥 立马约了第二天下午面试</p><p>不出意料的挂了（<a href="https://yuanruqian.github.io/2020/03/22/2020-%E5%BE%AE%E4%BF%A1%E7%A7%BB%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0-%E6%8C%82%E7%BB%8F/" target="_blank" rel="noopener">详见我的暑期实习申请伤痕文学</a>）</p><p>然后同一天晚上宝洁发邮件告诉我我也挂了（微笑</p><p>之后打起精神，在豆瓣找了位刷题的姐妹，每天至少一题LeetCode</p><p><del>觉得不行，不能失学又失业，不想啃老，否则我怎么还清我妈对我的投资</del></p><p>开始海投其他岗</p><p>微软上海 Azure Data Governance PM / 谷歌跨境电商的海星计划 / 欧莱雅 IT / 联合利华 供应链 / MKT</p><p>目前联合利华给了线上面，等结果中</p><h4 id="微信ui开发-电话一面">4.1 微信UI开发 电话一面</h4><p>问了 CSS 知识点 我答不上来……除了 box model 和 居中 都没啥印象……</p><ul><li>Chrome 最小字体 ： 12px （不会</li><li>CSS 几种布局 （不会</li><li>box-sizing 干啥的（瞎猜</li><li>……</li></ul><p>问了 JS 水平 如实回答 LeetCode 刷题的水平……</p><p>问我有什么要问的 我就问了前端和UI的区别 Frozen UI 这种 UI组件库是前端还是UI干的</p><p>回答是 其实技能树差不多 UI前端都能干 更推荐前端干 但是UI你想做的好 前端技能不能少</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;背景：&lt;/p&gt;
&lt;p&gt;不知名211 / 药学方向的信管 / 大三 / 无实习 / 无竞赛 / 无paper&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;总之就是很弱，担心申请学校和工作都没人捞的那种&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;直到去年12月
      
    
    </summary>
    
    
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Work" scheme="http://yoursite.com/tags/Work/"/>
    
      <category term="Internship" scheme="http://yoursite.com/tags/Internship/"/>
    
  </entry>
  
</feed>
