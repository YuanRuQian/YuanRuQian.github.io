<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-06T14:54:35.186Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 120. Triangle</title>
    <link href="http://yoursite.com/2020/07/06/LeetCode-120-Triangle/"/>
    <id>http://yoursite.com/2020/07/06/LeetCode-120-Triangle/</id>
    <published>2020-07-06T14:40:31.000Z</published>
    <updated>2020-07-06T14:54:35.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p><p>For example, given the following triangle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">     [2],</span><br><span class="line">    [3,4],</span><br><span class="line">   [6,5,7],</span><br><span class="line">  [4,1,8,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The minimum path sum from top to bottom is <code>11</code> (i.e., <strong>2</strong> + <strong>3</strong> + <strong>5</strong> + <strong>1</strong> = 11).</p><p><strong>Note:</strong></p><p>Bonus point if you are able to do this using only <em>O</em>(<em>n</em>) extra space, where <em>n</em> is the total number of rows in the triangle.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">triangle</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minimumTotal = <span class="function"><span class="keyword">function</span>(<span class="params">triangle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = triangle.length;</span><br><span class="line">    <span class="keyword">let</span> dp = triangle[len<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> layer = len<span class="number">-2</span>;layer&gt;=<span class="number">0</span>;layer--) &#123;</span><br><span class="line">        <span class="comment">// for each level of the triangle</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=layer;i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">Math</span>.min(dp[i+<span class="number">1</span>],dp[i])+triangle[layer][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 119. Pascal&#39;s Triangle II</title>
    <link href="http://yoursite.com/2020/07/05/LeetCode-119-Pascal-s-Triangle-II/"/>
    <id>http://yoursite.com/2020/07/05/LeetCode-119-Pascal-s-Triangle-II/</id>
    <published>2020-07-05T01:48:50.000Z</published>
    <updated>2020-07-05T02:07:14.745Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a non-negative index <em>k</em> where <em>k</em> â‰¤ 33, return the <em>k</em>th index row of the Pascal's triangle.</p><p>Note that the row index starts from 0.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt="img" /> In Pascal's triangle, each number is the sum of the two numbers directly above it.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: [1,3,3,1]</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><p>Could you optimize your algorithm to use only <em>O</em>(<em>k</em>) extra space?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the common solution but it's quite ugly ðŸ˜ </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">rowIndex</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getRow = <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = [];</span><br><span class="line">    <span class="keyword">let</span> curr = [];</span><br><span class="line">    <span class="keyword">if</span>(rowIndex===<span class="number">0</span>) <span class="keyword">return</span> [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=rowIndex;i++) &#123;</span><br><span class="line">        pre = curr;</span><br><span class="line">        curr = [];</span><br><span class="line">        curr.push(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            curr.push(pre[j<span class="number">-1</span>]+pre[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        curr.push(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduced &amp; optimized method</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">rowIndex</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getRow = <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> row = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=rowIndex;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i;j&gt;<span class="number">0</span>;j--) &#123;</span><br><span class="line">            row[j] = (j===i)? <span class="number">1</span> : row[j<span class="number">-1</span>]+row[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> row;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// one step forward, less operation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">rowIndex</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getRow = <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">while</span>(res.length&lt;=rowIndex) &#123;</span><br><span class="line">        res.unshift(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;res.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">            res[i]+=res[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a non-negative index &lt;em&gt;k&lt;/em&gt; where &lt;em&gt;k&lt;/em&gt; â‰¤ 33, return the &lt;em&gt;k&lt;/em&gt;th index row of the Pascal&#39;s triangle.&lt;/p&gt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1104. Path In Zigzag Labelled Binary Tree</title>
    <link href="http://yoursite.com/2020/07/04/LeetCode-1104-Path-In-Zigzag-Labelled-Binary-Tree/"/>
    <id>http://yoursite.com/2020/07/04/LeetCode-1104-Path-In-Zigzag-Labelled-Binary-Tree/</id>
    <published>2020-07-04T01:42:25.000Z</published>
    <updated>2020-07-04T02:10:26.002Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>In an infinite binary tree where every node has two children, the nodes are labelled in row order.</p><p>In the odd numbered rows (ie., the first, third, fifth,â€¦), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,â€¦), the labelling is right to left.</p><p><img src="https://assets.leetcode.com/uploads/2019/06/24/tree.png" alt="img" /></p><p>Given the <code>label</code> of a node in this tree, return the labels in the path from the root of the tree to the node with that <code>label</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: label &#x3D; 14</span><br><span class="line">Output: [1,3,4,14]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: label &#x3D; 26</span><br><span class="line">Output: [1,2,6,10,26]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= label &lt;= 10^6</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">label</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> pathInZigZagTree = <span class="function"><span class="keyword">function</span>(<span class="params">label,level=<span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span> &lt;&lt; level &lt;= label) ++level;</span><br><span class="line">    <span class="keyword">let</span> res = [level];</span><br><span class="line">    <span class="keyword">for</span>(;label&gt;=<span class="number">1</span>;label=<span class="built_in">Math</span>.floor(label/<span class="number">2</span>),--level) &#123;</span><br><span class="line">        res[level<span class="number">-1</span>]=label;</span><br><span class="line">        <span class="comment">// now label = ('real' children)/2 =&gt; the real parent</span></span><br><span class="line">        label = (<span class="number">1</span> &lt;&lt; level) - <span class="number">1</span> - label + (<span class="number">1</span> &lt;&lt; (level - <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'after:'</span>,label);</span><br><span class="line">        <span class="comment">//  (1 &lt;&lt; level) - 1 : the max element of a level</span></span><br><span class="line">        <span class="comment">//  (1 &lt;&lt; (level - 1)) : the min element of a level</span></span><br><span class="line">        <span class="comment">// now label is the 'real' children before reversing the level</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;In an infinite binary tree where every node has two children, the nodes are labelled in row order.&lt;/p&gt;
&lt;p&gt;In the odd numbere
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 367. Valid Perfect Square</title>
    <link href="http://yoursite.com/2020/07/03/LeetCode-367-Valid-Perfect-Square/"/>
    <id>http://yoursite.com/2020/07/03/LeetCode-367-Valid-Perfect-Square/</id>
    <published>2020-07-03T11:42:40.000Z</published>
    <updated>2020-07-03T11:55:32.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <strong>positive</strong> integer <em>num</em>, write a function which returns True if <em>num</em> is a perfect square else False.</p><p><strong>Follow up:</strong> <strong>Do not</strong> use any built-in library function such as <code>sqrt</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: num &#x3D; 16</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: num &#x3D; 14</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= num &lt;= 2^31 - 1</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the most common method, O(sqrt(N))</span></span><br><span class="line"><span class="keyword">var</span> isPerfectSquare = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i*i&lt;num+<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i*i===num) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the math guy method , kinda cheating </span></span><br><span class="line"><span class="comment">// 1 + 3 + ... + (2*n-1) = (1+(2*n-1))*n/2 = n^2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPerfectSquare = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(sum&lt;num) &#123;</span><br><span class="line">        sum += <span class="number">2</span>*i<span class="number">-1</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum===num?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// binary search , O(log N)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPerfectSquare = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">1</span>,right = num;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((left+right)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(mid*mid===num) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid*mid&lt;num) &#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;strong&gt;positive&lt;/strong&gt; integer &lt;em&gt;num&lt;/em&gt;, write a function which returns True if &lt;em&gt;num&lt;/em&gt; is a perfect squ
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 877. Stone Game</title>
    <link href="http://yoursite.com/2020/07/02/LeetCode-877-Stone-Game/"/>
    <id>http://yoursite.com/2020/07/02/LeetCode-877-Stone-Game/</id>
    <published>2020-07-02T12:35:57.000Z</published>
    <updated>2020-07-02T12:55:41.108Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Alex and Lee play a game with piles of stones. There are an even number of piles <strong>arranged in a row</strong>, and each pile has a positive integer number of stones <code>piles[i]</code>.</p><p>The objective of the game is to end with the most stones. The total number of stones is odd, so there are no ties.</p><p>Alex and Lee take turns, with Alex starting first. Each turn, a player takes the entire pile of stones from either the beginning or the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.</p><p>Assuming Alex and Lee play optimally, return <code>True</code> if and only if Alex wins the game.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [5,3,4,5]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">Alex starts first, and can only take the first 5 or the last 5.</span><br><span class="line">Say he takes the first 5, so that the row becomes [3, 4, 5].</span><br><span class="line">If Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.</span><br><span class="line">If Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.</span><br><span class="line">This demonstrated that taking the first 5 was a winning move for Alex, so we return true.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>2 &lt;= piles.length &lt;= 500</code></li><li><code>piles.length</code> is even.</li><li><code>1 &lt;= piles[i] &lt;= 500</code></li><li><code>sum(piles)</code> is odd.</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the normal dp method</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">piles</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> stoneGame = <span class="function"><span class="keyword">function</span>(<span class="params">piles</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = piles.length;</span><br><span class="line">    <span class="keyword">let</span> dp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        dp.push(<span class="built_in">Array</span>(n).fill(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// dp[i][j] means the biggest number of stones you can get more than opponent picking piles in piles[i] ~ piles[j]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">        dp[j][j]=piles[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;n-i;j++) &#123;</span><br><span class="line">            dp[j][j+i]=<span class="built_in">Math</span>.max(piles[j]-dp[j+<span class="number">1</span>][j+i],piles[j+i]-dp[j][j+i<span class="number">-1</span>]);</span><br><span class="line">            <span class="comment">// from piles[j]ï½žpiles[j+i]</span></span><br><span class="line">            <span class="comment">// from the start : piles[j] (what you get) - dp[j+1][j+i] (what your opponent get)</span></span><br><span class="line">            <span class="comment">// from the end : piles[j+i] (what you get) - dp[j+1][j+i] (what your opponent get)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">piles</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> stoneGame = <span class="function"><span class="keyword">function</span>(<span class="params">piles</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// For explanation, please see this post : https://leetcode.com/problems/stone-game/discuss/154610/DP-or-Just-return-true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Alex and Lee play a game with piles of stones. There are an even number of piles &lt;strong&gt;arranged in a row&lt;/strong&gt;, and eac
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Self-implemented Array.prototype.map()</title>
    <link href="http://yoursite.com/2020/07/01/Self-implemented-Array-prototype-map/"/>
    <id>http://yoursite.com/2020/07/01/Self-implemented-Array-prototype-map/</id>
    <published>2020-07-01T01:30:24.000Z</published>
    <updated>2020-07-01T02:23:52.809Z</updated>
    
    <content type="html"><![CDATA[<p>First, check <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">MDN</a> for specific parameters.</p><p>So there are three parameters :</p><ul><li><p>the value of the element</p></li><li><p>the index of the element</p></li><li><p>and the array object being mapped</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.selfMap = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this:'</span>,<span class="keyword">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'arguments:'</span>,[].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">     <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="keyword">this</span>.length);</span><br><span class="line">     <span class="keyword">const</span> [ fn, thisArg ] = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(fn + <span class="string">'is not a function'</span>)  </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">           result[i] = fn.call(thisArg, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> result</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Test :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a.selfMap(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>)</span><br><span class="line"><span class="comment">// this: (4)Â [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// VM389:3 arguments: [Æ’]0: item =&gt; item + 1length: 1__proto__: Array(0)</span></span><br><span class="line"><span class="comment">// (4) [2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 0: 2</span></span><br><span class="line"><span class="comment">// 1: 3</span></span><br><span class="line"><span class="comment">// 2: 4</span></span><br><span class="line"><span class="comment">// 3: 5</span></span><br><span class="line"><span class="comment">// length: 4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;First, check &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 451. Sort Characters By Frequency</title>
    <link href="http://yoursite.com/2020/06/30/LeetCode-451-Sort-Characters-By-Frequency/"/>
    <id>http://yoursite.com/2020/06/30/LeetCode-451-Sort-Characters-By-Frequency/</id>
    <published>2020-06-30T07:06:24.000Z</published>
    <updated>2020-06-30T07:31:33.800Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a string, sort it in decreasing order based on the frequency of characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">&quot;tree&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&quot;eert&quot;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">&#39;e&#39; appears twice while &#39;r&#39; and &#39;t&#39; both appear once.</span><br><span class="line">So &#39;e&#39; must appear before both &#39;r&#39; and &#39;t&#39;. Therefore &quot;eetr&quot; is also a valid answer.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Both &#39;c&#39; and &#39;a&#39; appear three times, so &quot;aaaccc&quot; is also a valid answer.</span><br><span class="line">Note that &quot;cacaca&quot; is incorrect, as the same characters must be together.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">&quot;Aabb&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&quot;bbAa&quot;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">&quot;bbaA&quot; is also a valid answer, but &quot;Aabb&quot; is incorrect.</span><br><span class="line">Note that &#39;A&#39; and &#39;a&#39; are treated as two different characters.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> frequencySort = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> freq = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!freq.has(char)) freq.set(char, <span class="number">0</span>);</span><br><span class="line">        freq.set(char,freq.get(char)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// count the frequency</span></span><br><span class="line">    freq = [...freq].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span>&#123;<span class="keyword">return</span> b[<span class="number">1</span>]-a[<span class="number">1</span>]&#125;);</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> freq) &#123;</span><br><span class="line">        <span class="keyword">let</span> [char, count] = f;</span><br><span class="line">        str += char.repeat(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a string, sort it in decreasing order based on the frequency of characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;fi
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 890. Find and Replace Pattern</title>
    <link href="http://yoursite.com/2020/06/29/LeetCode-890-Find-and-Replace-Pattern/"/>
    <id>http://yoursite.com/2020/06/29/LeetCode-890-Find-and-Replace-Pattern/</id>
    <published>2020-06-29T15:43:06.000Z</published>
    <updated>2020-06-29T15:46:08.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You have a list of <code>words</code> and a <code>pattern</code>, and you want to know which words in <code>words</code> matches the pattern.</p><p>A word matches the pattern if there exists a permutation of letters <code>p</code> so that after replacing every letter <code>x</code> in the pattern with <code>p(x)</code>, we get the desired word.</p><p>(<em>Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.</em>)</p><p>Return a list of the words in <code>words</code> that match the given pattern.</p><p>You may return the answer in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: words &#x3D; [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern &#x3D; &quot;abb&quot;</span><br><span class="line">Output: [&quot;mee&quot;,&quot;aqq&quot;]</span><br><span class="line">Explanation: &quot;mee&quot; matches the pattern because there is a permutation &#123;a -&gt; m, b -&gt; e, ...&#125;. </span><br><span class="line">&quot;ccc&quot; does not match the pattern because &#123;a -&gt; c, b -&gt; c, ...&#125; is not a permutation,</span><br><span class="line">since a and b map to the same letter.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>1 &lt;= words.length &lt;= 50</code></li><li><code>1 &lt;= pattern.length = words[i].length &lt;= 20</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">words</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">pattern</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findAndReplacePattern = <span class="function"><span class="keyword">function</span>(<span class="params">words, pattern</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> word <span class="keyword">of</span> words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (match(word, pattern)) &#123;</span><br><span class="line">            res.push(word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// two maps </span></span><br><span class="line"><span class="comment">// check if the pairs are equal in each map</span></span><br><span class="line"><span class="keyword">let</span> match = <span class="function"><span class="keyword">function</span>(<span class="params">s,p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> c1 = s[i];</span><br><span class="line">        <span class="keyword">let</span> c2 = p[i];</span><br><span class="line">        <span class="keyword">if</span> (!map1.has(c1)) &#123;</span><br><span class="line">            map1.set(c1,c2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!map2.has(c2)) &#123;</span><br><span class="line">            map2.set(c2,c1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (map1.get(c1) !== c2 || map2.get(c2) !== c1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You have a list of &lt;code&gt;words&lt;/code&gt; and a &lt;code&gt;pattern&lt;/code&gt;, and you want to know which words in &lt;code&gt;words&lt;/code&gt; mat
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1347. Minimum Number of Steps to Make Two Strings Anagram</title>
    <link href="http://yoursite.com/2020/06/29/LeetCode-1347-Minimum-Number-of-Steps-to-Make-Two-Strings-Anagram/"/>
    <id>http://yoursite.com/2020/06/29/LeetCode-1347-Minimum-Number-of-Steps-to-Make-Two-Strings-Anagram/</id>
    <published>2020-06-29T14:59:14.000Z</published>
    <updated>2020-06-29T15:08:02.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given two equal-size strings <code>s</code> and <code>t</code>. In one step you can choose <strong>any character</strong> of <code>t</code> and replace it with <strong>another character</strong>.</p><p>Return <em>the minimum number of steps</em> to make <code>t</code> an anagram of <code>s</code>.</p><p>An <strong>Anagram</strong> of a string is a string that contains the same characters with a different (or the same) ordering.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;bab&quot;, t &#x3D; &quot;aba&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: Replace the first &#39;a&#39; in t with b, t &#x3D; &quot;bba&quot; which is anagram of s.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;leetcode&quot;, t &#x3D; &quot;practice&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Replace &#39;p&#39;, &#39;r&#39;, &#39;a&#39;, &#39;i&#39; and &#39;c&#39; from t with proper characters to make t anagram of s.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;anagram&quot;, t &#x3D; &quot;mangaar&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: &quot;anagram&quot; and &quot;mangaar&quot; are anagrams. </span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;xxyyzz&quot;, t &#x3D; &quot;xxyyzz&quot;</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;friend&quot;, t &#x3D; &quot;family&quot;</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 50000</code></li><li><code>s.length == t.length</code></li><li><code>s</code> and <code>t</code> contain lower-case English letters only.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">t</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minSteps = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="built_in">Array</span>(<span class="number">26</span>).fill(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; ++i) &#123;</span><br><span class="line">    count[s.charCodeAt(i) - <span class="number">97</span>]++;</span><br><span class="line">    count[t.charCodeAt(i) - <span class="number">97</span>]--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> step = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(count[i] &gt; <span class="number">0</span>) step += count[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> step;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>At first I thought this is an hashmap + count differences question.</p><p>Then I realize that what really matters is the number of each element.</p><p>Count the number of each element in string S then subtract all elements you can find in string T</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given two equal-size strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;. In one step you can choose &lt;strong&gt;any character&lt;/strong&gt; of
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 654. Maximum Binary Tree</title>
    <link href="http://yoursite.com/2020/06/28/LeetCode-654-Maximum-Binary-Tree/"/>
    <id>http://yoursite.com/2020/06/28/LeetCode-654-Maximum-Binary-Tree/</id>
    <published>2020-06-28T01:51:09.000Z</published>
    <updated>2020-06-28T02:51:14.592Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:</p><ol type="1"><li>The root is the maximum number in the array.</li><li>The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.</li><li>The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.</li></ol><p>Construct the maximum tree by the given array and output the root node of this tree.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,1,6,0,5]</span><br><span class="line">Output: return the tree root node representing the following tree:</span><br><span class="line"></span><br><span class="line">      6</span><br><span class="line">    &#x2F;   \</span><br><span class="line">   3     5</span><br><span class="line">    \    &#x2F; </span><br><span class="line">     2  0   </span><br><span class="line">       \</span><br><span class="line">        1</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol type="1"><li>The size of the given array will be in the range [1,1000].</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// O(N), stack</span></span><br><span class="line"> <span class="keyword">var</span> constructMaximumBinaryTree = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> curr = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">        <span class="keyword">while</span>(stack.length&gt;<span class="number">0</span> &amp;&amp; stack[stack.length<span class="number">-1</span>].val&lt;nums[i]) &#123;</span><br><span class="line">            curr.left = stack.pop();</span><br><span class="line">          <span class="comment">// if the current one is bigger then use it as the root and use the biggest in the stack as its left child ( keep popping out elements until the last one)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            stack[stack.length<span class="number">-1</span>].right = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(curr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Accepted</span><br><span class="line">Runtime: <span class="number">68</span> ms</span><br><span class="line">Your input</span><br><span class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>]</span><br><span class="line">stdout</span><br><span class="line">stack: [ <span class="number">3</span> ]</span><br><span class="line">stack: [ <span class="number">3</span>, <span class="number">2</span> ]</span><br><span class="line">stack: [ <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span> ]</span><br><span class="line">stack: [ <span class="number">6</span> ]</span><br><span class="line">stack: [ <span class="number">6</span>, <span class="number">0</span> ]</span><br><span class="line">stack: [ <span class="number">6</span>, <span class="number">5</span> ]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br><span class="line">Expected</span><br><span class="line">[<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// common recursive method </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> constructMaximumBinaryTree = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!nums || nums.length===<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> createMBT(nums,<span class="number">0</span>,nums.length<span class="number">-1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getMaxIndex = <span class="function"><span class="keyword">function</span>(<span class="params">nums,begin,end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=begin;i&lt;end;i++) &#123;</span><br><span class="line">        m = (nums[i]&gt;nums[m])?i:m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createMBT = <span class="function"><span class="keyword">function</span>(<span class="params">nums,begin,end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin&gt;end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> maxIndex = getMaxIndex(nums,begin,end);</span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(nums[maxIndex]);</span><br><span class="line">    root.left = <span class="function"><span class="keyword">function</span>(<span class="params">nums,begin,maxIndex<span class="number">-1</span></span>);</span></span><br><span class="line"><span class="function">    <span class="title">root</span>.<span class="title">left</span> = <span class="title">function</span>(<span class="params">nums,maxIndex+<span class="number">1</span>,end</span>);</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">root</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript : Remove the duplicated elements</title>
    <link href="http://yoursite.com/2020/06/27/JavaScript-Remove-the-duplicated-elements/"/>
    <id>http://yoursite.com/2020/06/27/JavaScript-Remove-the-duplicated-elements/</id>
    <published>2020-06-27T08:47:04.000Z</published>
    <updated>2020-06-27T09:44:46.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="use-set">Use Set</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">// Set(2)Â &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="use-map">Use Map</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">a.forEach(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b.has(e)) b.set(e,<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    b.set(e,<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">b.keys();</span><br><span class="line"><span class="comment">// Â &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="use-loop-on2">Use loop O(N^2)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line">a.sort(<span class="function">(<span class="params">m,n</span>)=&gt;</span>&#123;<span class="keyword">return</span> m-n&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;a.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(a[i]===a[i+<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>;j&lt;a.length<span class="number">-1</span>;j++) &#123;</span><br><span class="line">      a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    a.pop();</span><br><span class="line">    i--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">// (2)Â [1, 2]</span></span><br></pre></td></tr></table></figure><h3 id="intersection-difference">Intersection &amp; Difference</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> intersection = a.filter(<span class="function"><span class="params">v</span> =&gt;</span> b.includes(v))</span><br><span class="line"><span class="keyword">let</span> difference = a.concat(b).filter(<span class="function"><span class="params">v</span> =&gt;</span> !a.includes(v) || !b.includes(v))</span><br><span class="line">intersection</span><br><span class="line"><span class="comment">// (3)Â [2, 2, 2]</span></span><br><span class="line"><span class="comment">// there still is the problem of duplicate ...</span></span><br><span class="line">difference</span><br><span class="line"><span class="comment">// (2) [1, 3]</span></span><br></pre></td></tr></table></figure><p><code>includes()</code> can do the job</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;use-set&quot;&gt;Use Set&lt;/h3&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript : Is this an array ?</title>
    <link href="http://yoursite.com/2020/06/27/JavaScript-Is-this-an-array/"/>
    <id>http://yoursite.com/2020/06/27/JavaScript-Is-this-an-array/</id>
    <published>2020-06-27T08:27:00.000Z</published>
    <updated>2020-06-27T08:43:38.233Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>How to judge if something is an array in JavaScript ?</p></blockquote><h3 id="modern-browser-only">Modern browser only</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(obj)</span><br><span class="line"><span class="comment">// Supported by Chrome 5, Firefox 4.0, IE 9, Opera 10.5 and Safari 5</span></span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="instance-of">Instance of</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">instanceof</span> <span class="built_in">Array</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="prototype">Prototype</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.isPrototypeOf([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="obj.constructor">Obj.constructor</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>].constructor === <span class="built_in">Array</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="if-you-use-jquery">If you use jQuery</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">"A"</span>, <span class="string">"AA"</span>, <span class="string">"AAA"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($.isArray(a)) &#123;</span><br><span class="line">  alert(<span class="string">"a is an array!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"a is not an array!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// alert "a is an array!"</span></span><br></pre></td></tr></table></figure><h3 id="what-about-typeof">What about typeof ðŸ™…</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="string">"object"</span>  </span><br><span class="line"><span class="comment">// It just says 'object', so any object will return the same thing </span></span><br><span class="line"><span class="comment">// typeof only returns basic data type</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;How to judge if something is an array in JavaScript ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;modern-browser-only&quot;&gt;Modern browser only&lt;/h3
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 106. Construct Binary Tree from Inorder and Postorder Traversal</title>
    <link href="http://yoursite.com/2020/06/27/LeetCode-106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/"/>
    <id>http://yoursite.com/2020/06/27/LeetCode-106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/</id>
    <published>2020-06-27T03:08:24.000Z</published>
    <updated>2020-06-27T03:32:04.972Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given inorder and postorder traversal of a tree, construct the binary tree.</p><p><strong>Note:</strong><br />You may assume that duplicates do not exist in the tree.</p><p>For example, given</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inorder &#x3D; [9,3,15,20,7]</span><br><span class="line">postorder &#x3D; [9,15,7,20,3]</span><br></pre></td></tr></table></figure><p>Return the following binary tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">inorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">postorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">inorder, postorder</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// inorder : left =&gt; root =&gt; right</span></span><br><span class="line">    <span class="comment">// postorder : left =&gt; right =&gt; root</span></span><br><span class="line">    <span class="comment">// The last element of postorder will always be the root of a subtree.</span></span><br><span class="line">    <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;inorder.length;i++) hash[inorder[i]] = i; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> recur = <span class="function"><span class="keyword">function</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> val = postorder.pop();</span><br><span class="line">        <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        root.right = recur(hash[val] + <span class="number">1</span>, end);</span><br><span class="line">        root.left = recur(start, hash[val] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> recur(<span class="number">0</span>, inorder.length - <span class="number">1</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given inorder and postorder traversal of a tree, construct the binary tree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br /&gt;
You may assu
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 4. Median of Two Sorted Arrays</title>
    <link href="http://yoursite.com/2020/06/26/LeetCode-4-Median-of-Two-Sorted-Arrays/"/>
    <id>http://yoursite.com/2020/06/26/LeetCode-4-Median-of-Two-Sorted-Arrays/</id>
    <published>2020-06-26T05:51:44.000Z</published>
    <updated>2020-06-26T06:48:39.152Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 &#x3D; [1, 3]</span><br><span class="line">nums2 &#x3D; [2]</span><br><span class="line"></span><br><span class="line">The median is 2.0</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 &#x3D; [1, 2]</span><br><span class="line">nums2 &#x3D; [3, 4]</span><br><span class="line"></span><br><span class="line">The median is (2 + 3)&#x2F;2 &#x3D; 2.5</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n1 = nums1.length;</span><br><span class="line">    <span class="keyword">let</span> n2 = nums2.length;</span><br><span class="line">    <span class="keyword">if</span>(n1&lt;n2) <span class="keyword">return</span> findMedianSortedArrays(nums2,nums1);</span><br><span class="line">    <span class="comment">// nums2 is always the smaller one</span></span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">0</span>,high = n2*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid2 = <span class="built_in">Math</span>.floor((low+high)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">let</span> mid1 = n1+n2-mid2;</span><br><span class="line">        <span class="keyword">let</span> left1 = (mid1===<span class="number">0</span>)?-<span class="literal">Infinity</span>:nums1[<span class="built_in">Math</span>.floor((mid1<span class="number">-1</span>)/<span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">let</span> left2 = (mid2===<span class="number">0</span>)?-<span class="literal">Infinity</span>:nums2[<span class="built_in">Math</span>.floor((mid2<span class="number">-1</span>)/<span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">let</span> right1 = (mid1===n1*<span class="number">2</span>)?<span class="literal">Infinity</span>:nums1[<span class="built_in">Math</span>.floor(mid1/<span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">let</span> right2 = (mid2===n2*<span class="number">2</span>)?<span class="literal">Infinity</span>:nums2[<span class="built_in">Math</span>.floor(mid2/<span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">if</span>(left1&gt;right2) &#123;</span><br><span class="line">            <span class="comment">// the left part is larger, move one step to the right</span></span><br><span class="line">            low = mid2 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left2&gt;right1) &#123;</span><br><span class="line">            high = mid2 - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((<span class="built_in">Math</span>.max(left1,left2)+<span class="built_in">Math</span>.min(right1,right2))/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;There are two sorted arrays &lt;strong&gt;nums1&lt;/strong&gt; and &lt;strong&gt;nums2&lt;/strong&gt; of size m and n respectively.&lt;/p&gt;
&lt;p&gt;Find the 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 42. Trapping Rain Water</title>
    <link href="http://yoursite.com/2020/06/26/LeetCode-42-Trapping-Rain-Water/"/>
    <id>http://yoursite.com/2020/06/26/LeetCode-42-Trapping-Rain-Water/</id>
    <published>2020-06-26T01:40:16.000Z</published>
    <updated>2020-06-26T02:47:32.450Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given <em>n</em> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt="img" /><br />The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <strong>Thanks Marcos</strong> for contributing this image!</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> trap = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,right = height.length<span class="number">-1</span>,level=<span class="number">0</span>,water=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right) &#123;</span><br><span class="line">        <span class="keyword">let</span> lower = height[height[left]&lt;height[right]?left++:right--];</span><br><span class="line">        level = <span class="built_in">Math</span>.max(level,lower);</span><br><span class="line">        water += level - lower;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> water;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Accepted</span><br><span class="line">Runtime: <span class="number">76</span> ms</span><br><span class="line">Your input</span><br><span class="line">[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">stdout</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> lower: <span class="number">0</span> ,<span class="attr">level</span>: <span class="number">0</span> ,<span class="attr">water</span>: <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> lower: <span class="number">2</span> ,<span class="attr">level</span>: <span class="number">2</span> ,<span class="attr">water</span>: <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> lower: <span class="number">1</span> ,<span class="attr">level</span>: <span class="number">2</span> ,<span class="attr">water</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Expected</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; non-negative integers representing an elevation map where the width of each bar is 1, compute how much wate
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 82. Remove Duplicates from Sorted List II</title>
    <link href="http://yoursite.com/2020/06/25/LeetCode-82-Remove-Duplicates-from-Sorted-List-II/"/>
    <id>http://yoursite.com/2020/06/25/LeetCode-82-Remove-Duplicates-from-Sorted-List-II/</id>
    <published>2020-06-25T09:41:12.000Z</published>
    <updated>2020-06-25T09:56:55.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only <em>distinct</em> numbers from the original list.</p><p>Return the linked list sorted as well.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">Output: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class="line">Output: 2-&gt;3</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode(head.val+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// make sure that dummy and head have different values</span></span><br><span class="line">    dummy.next = head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> pre = dummy;</span><br><span class="line">    <span class="keyword">let</span> cur = head;</span><br><span class="line">    <span class="keyword">let</span> first = dummy;</span><br><span class="line">     <span class="comment">// the first node in the new unduplicated list</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (cur &amp;&amp; cur.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.val!==pre.val &amp;&amp; cur.val!==cur.next.val) &#123; </span><br><span class="line">            first.next = cur;</span><br><span class="line">            first = first.next;</span><br><span class="line">            <span class="comment">// find a unique node, add it to the end of the new unduplicated list</span></span><br><span class="line">            <span class="comment">// update the first node</span></span><br><span class="line">        &#125;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pre.val !== cur.val) &#123;  </span><br><span class="line">        <span class="comment">// the last node needs to be dealt differently</span></span><br><span class="line">        first.next = cur;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    first.next = <span class="literal">null</span>;  </span><br><span class="line">    <span class="comment">// the subsequent list is duplicate</span></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only &lt;em&gt;distinct&lt;/em&gt; numbers from the or
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 25. Reverse Nodes in k-Group</title>
    <link href="http://yoursite.com/2020/06/25/LeetCode-25-Reverse-Nodes-in-k-Group/"/>
    <id>http://yoursite.com/2020/06/25/LeetCode-25-Reverse-Nodes-in-k-Group/</id>
    <published>2020-06-25T08:21:45.000Z</published>
    <updated>2020-06-25T09:02:47.114Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>Note:</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the listâ€™s nodes, only nodes itself may be changed.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseKGroup = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=head;i;n++,i=i.next);</span><br><span class="line">  <span class="comment">// n : to get the length of the list</span></span><br><span class="line">    <span class="keyword">let</span> dmy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dmy.next = head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> prev=dmy,tail=head;n&gt;=k;n-=k) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;k;i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> next = tail.next.next;</span><br><span class="line">            tail.next.next = prev.next;</span><br><span class="line">            prev.next = tail.next;</span><br><span class="line">            tail.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        prev = tail;</span><br><span class="line">        tail = tail.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dmy.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Accepted</span><br><span class="line">Runtime: <span class="number">76</span> ms</span><br><span class="line">Your input</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="number">2</span></span><br><span class="line">stdout</span><br><span class="line">prev: ListNode &#123;</span><br><span class="line">  val: <span class="number">0</span>,</span><br><span class="line">  next: ListNode &#123; <span class="attr">val</span>: <span class="number">2</span>, <span class="attr">next</span>: ListNode &#123; <span class="attr">val</span>: <span class="number">1</span>, <span class="attr">next</span>: [ListNode] &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">tail: ListNode &#123;</span><br><span class="line">  val: <span class="number">1</span>,</span><br><span class="line">  next: ListNode &#123; <span class="attr">val</span>: <span class="number">3</span>, <span class="attr">next</span>: ListNode &#123; <span class="attr">val</span>: <span class="number">4</span>, <span class="attr">next</span>: [ListNode] &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">next: ListNode &#123;</span><br><span class="line">  val: <span class="number">3</span>,</span><br><span class="line">  next: ListNode &#123; <span class="attr">val</span>: <span class="number">4</span>, <span class="attr">next</span>: ListNode &#123; <span class="attr">val</span>: <span class="number">5</span>, <span class="attr">next</span>: <span class="literal">null</span> &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">[ <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">prev: ListNode &#123;</span><br><span class="line">  val: <span class="number">1</span>,</span><br><span class="line">  next: ListNode &#123; <span class="attr">val</span>: <span class="number">4</span>, <span class="attr">next</span>: ListNode &#123; <span class="attr">val</span>: <span class="number">3</span>, <span class="attr">next</span>: [ListNode] &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">tail: ListNode &#123; <span class="attr">val</span>: <span class="number">3</span>, <span class="attr">next</span>: ListNode &#123; <span class="attr">val</span>: <span class="number">5</span>, <span class="attr">next</span>: <span class="literal">null</span> &#125; &#125;</span><br><span class="line">next: ListNode &#123; <span class="attr">val</span>: <span class="number">5</span>, <span class="attr">next</span>: <span class="literal">null</span> &#125;</span><br><span class="line">[ <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span> ]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">Expected</span><br><span class="line">[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a linked list, reverse the nodes of a linked list &lt;em&gt;k&lt;/em&gt; at a time and return its modified list.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;k&lt;/em&gt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 145. Binary Tree Postorder Traversal</title>
    <link href="http://yoursite.com/2020/06/25/LeetCode-145-Binary-Tree-Postorder-Traversal/"/>
    <id>http://yoursite.com/2020/06/25/LeetCode-145-Binary-Tree-Postorder-Traversal/</id>
    <published>2020-06-25T01:52:50.000Z</published>
    <updated>2020-06-25T02:43:15.714Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, return the <em>postorder</em> traversal of its nodes' values.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// recursive method</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    recur(root,res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> recur = <span class="function"><span class="keyword">function</span>(<span class="params">root,res,level</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    recur(root.left,res);</span><br><span class="line">    recur(root.right,res);</span><br><span class="line">    res.push(root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iterative method </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> stack = [root];</span><br><span class="line">    <span class="keyword">while</span>(stack.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cur = stack.pop();</span><br><span class="line">        res.unshift(cur.val);</span><br><span class="line">      <span class="comment">// unshift because of the reverse order</span></span><br><span class="line">        <span class="keyword">if</span>(cur.left) stack.push(cur.left);</span><br><span class="line">        <span class="keyword">if</span>(cur.right) stack.push(cur.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the &lt;em&gt;postorder&lt;/em&gt; traversal of its nodes&#39; values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 912. Sort an Array</title>
    <link href="http://yoursite.com/2020/06/24/LeetCode-912-Sort-an-Array/"/>
    <id>http://yoursite.com/2020/06/24/LeetCode-912-Sort-an-Array/</id>
    <published>2020-06-24T03:14:19.000Z</published>
    <updated>2020-06-24T03:33:20.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers <code>nums</code>, sort the array in ascending order.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,2,3,1]</span><br><span class="line">Output: [1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,1,1,2,0,0]</span><br><span class="line">Output: [0,0,1,1,2,5]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 50000</code></li><li><code>-50000 &lt;= nums[i] &lt;= 50000</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bubble sort</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// bubble sort</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!flag) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                [nums[i],nums[i+<span class="number">1</span>]]=[nums[i+<span class="number">1</span>],nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// time : O(N^2)</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// quick sort</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span> nums;</span><br><span class="line">    <span class="keyword">let</span> pivot = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> less = [];</span><br><span class="line">    <span class="keyword">let</span> more = [];</span><br><span class="line">    <span class="keyword">let</span> pivotList = [];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// partition </span></span><br><span class="line">    nums.forEach(<span class="function">(<span class="params">num</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;pivot) &#123;less.push(num)&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num&gt;pivot) &#123;more.push(num)&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pivotList.push(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// recursively sort the sub lists</span></span><br><span class="line">    less = sortArray(less);</span><br><span class="line">    more = sortArray(more);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// concatenate the sublists</span></span><br><span class="line">    less = less.concat(pivotList);</span><br><span class="line">    less = less.concat(more);</span><br><span class="line">    <span class="keyword">return</span> less;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// time: O(N^2) for the worst, O(N^log N) for the best</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt;, sort the array in ascending order.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 54. Spiral Matrix</title>
    <link href="http://yoursite.com/2020/06/23/LeetCode-54-Spiral-Matrix/"/>
    <id>http://yoursite.com/2020/06/23/LeetCode-54-Spiral-Matrix/</id>
    <published>2020-06-23T13:57:25.000Z</published>
    <updated>2020-06-23T14:03:58.630Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line"> [ 1, 2, 3 ],</span><br><span class="line"> [ 4, 5, 6 ],</span><br><span class="line"> [ 7, 8, 9 ]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1, 2, 3, 4],</span><br><span class="line">  [5, 6, 7, 8],</span><br><span class="line">  [9,10,11,12]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> spiralOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">while</span>(matrix.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">      res.push(...matrix.shift());</span><br><span class="line">    <span class="comment">// first round get the first row</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> m <span class="keyword">of</span> matrix) &#123;</span><br><span class="line">          <span class="keyword">if</span>(m.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">              res.push(m.pop());</span><br><span class="line">            <span class="comment">// second round get the last element of each row</span></span><br><span class="line">              m.reverse();</span><br><span class="line">            <span class="comment">// after pop the element, reverse the current row</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      matrix.reverse();</span><br><span class="line">    <span class="comment">// now reverse the rows ( the whole matrix)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Explain:</span></span><br><span class="line"></span><br><span class="line">Accepted</span><br><span class="line">Runtime: <span class="number">88</span> ms</span><br><span class="line">Your input</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line">stdout</span><br><span class="line">matrix: [ [ <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span> ], [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> ] ] res: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span> ]</span><br><span class="line">matrix: [ [ <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span> ], [ <span class="number">11</span>, <span class="number">10</span>, <span class="number">9</span> ] ] res: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span> ]</span><br><span class="line">matrix: [ [ <span class="number">11</span>, <span class="number">10</span>, <span class="number">9</span> ], [ <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span> ] ]</span><br><span class="line">matrix: [ [ <span class="number">6</span>, <span class="number">7</span> ] ] res: [</span><br><span class="line">   <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>,</span><br><span class="line">  <span class="number">12</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span></span><br><span class="line">]</span><br><span class="line">matrix: [ [ <span class="number">6</span>, <span class="number">7</span> ] ]</span><br><span class="line">matrix: []</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">Expected</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a matrix of &lt;em&gt;m&lt;/em&gt; x &lt;em&gt;n&lt;/em&gt; elements (&lt;em&gt;m&lt;/em&gt; rows, &lt;em&gt;n&lt;/em&gt; columns), return all elements of the matrix 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
