<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-21T07:49:23.231Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 198. House Robber</title>
    <link href="http://yoursite.com/2020/04/21/LeetCode-198-House-Robber/"/>
    <id>http://yoursite.com/2020/04/21/LeetCode-198-House-Robber/</id>
    <published>2020-04-21T01:28:53.000Z</published>
    <updated>2020-04-21T07:49:23.231Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 1) and then rob house 3 (money &#x3D; 3).</span><br><span class="line">             Total amount you can rob &#x3D; 1 + 3 &#x3D; 4.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 2), rob house 3 (money &#x3D; 9) and rob house 5 (money &#x3D; 1).</span><br><span class="line">             Total amount you can rob &#x3D; 2 + 9 + 1 &#x3D; 12.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Intuitive recursive method yet stack overflow TAT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> Robbed = <span class="function"><span class="keyword">function</span>(<span class="params">nums,i</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(nums.length&lt;<span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Math</span>.max(Robbed(nums,i<span class="number">-2</span>),Robbed(nums,i<span class="number">-1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> Robbed(nums,nums.length<span class="number">-1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">p, n</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> [p[<span class="number">1</span>], <span class="built_in">Math</span>.max(p[<span class="number">0</span>] + n, p[<span class="number">1</span>])]; </span><br><span class="line">    &#125;, [<span class="number">0</span>,<span class="number">0</span>])[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// variable p records previous 2 max values: p[1] is the previous one and p[0] is the one before previous one. p is initialized as [0,0]. variable n is the value at each position.</span></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback( accumulator, currentValue[, index[, array]] )[, initialValue])</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plain old good iterative method</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums.length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> maxAtTwoBefore = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> maxAtOneBefore = <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> maxAtCurrent = <span class="built_in">Math</span>.max(nums[i] + maxAtTwoBefore, maxAtOneBefore);</span><br><span class="line">        maxAtTwoBefore = maxAtOneBefore;</span><br><span class="line">        maxAtOneBefore = maxAtCurrent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxAtOneBefore;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// variable p records previous 2 max values: p[1] is the previous one and p[0] is the one before previous one. p is initialized as [0,0]. variable n is the value at each position.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the o
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 155. Min Stack</title>
    <link href="http://yoursite.com/2020/04/20/LeetCode-155-Min-Stack/"/>
    <id>http://yoursite.com/2020/04/20/LeetCode-155-Min-Stack/</id>
    <published>2020-04-20T02:58:18.000Z</published>
    <updated>2020-04-20T03:48:02.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p><ul><li>push(x) -- Push element x onto stack.</li><li>pop() -- Removes the element on top of the stack.</li><li>top() -- Get the top element.</li><li>getMin() -- Retrieve the minimum element in the stack.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MinStack minStack &#x3D; new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin(); &#x2F;&#x2F; return -3</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();    &#x2F;&#x2F; return 0</span><br><span class="line">minStack.getMin(); &#x2F;&#x2F; return -2</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MinStack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elements = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elements.push(&#123;</span><br><span class="line">    value: x,</span><br><span class="line">    min: <span class="keyword">this</span>.elements.length === <span class="number">0</span> ? x : <span class="built_in">Math</span>.min(x, <span class="keyword">this</span>.getMin()),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elements.pop();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.elements[<span class="keyword">this</span>.elements.length - <span class="number">1</span>].value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.getMin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.elements[<span class="keyword">this</span>.elements.length - <span class="number">1</span>].min;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MinStack()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.top()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.getMin()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>It's clever to put min &amp; value in a stack element together because if you only keep min as an stack property , when you pop it out the min remains the same.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) -- Pu
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 122. Best Time to Buy and Sell Stock II</title>
    <link href="http://yoursite.com/2020/04/20/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II/"/>
    <id>http://yoursite.com/2020/04/20/LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II/</id>
    <published>2020-04-20T02:45:13.000Z</published>
    <updated>2020-04-20T02:54:11.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Say you have an array <code>prices</code> for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p><p><strong>Note:</strong> You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 3 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">             Then buy on day 4 (price &#x3D; 3) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-3 &#x3D; 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are</span><br><span class="line">             engaging multiple transactions at the same time. You must sell before buying again.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 10 ^ 4</code></li><li><code>0 &lt;= prices[i] &lt;= 10 ^ 4</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> profit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;prices.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">            profit += <span class="built_in">Math</span>.max(prices[i+<span class="number">1</span>]-prices[i],<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>No question is a joke. This question is indeed the interview question I encountered interviewing with Goldman Sachs. Interview questions from financial organization my be a lot simpler to solve. But it requires higher level of clarity when it comes to explaining your thought. And most importantly, arrogance is the first thing you want to avoid during interview. Don't murder me if you don't like my comment. LOL</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Say you have an array &lt;code&gt;prices&lt;/code&gt; for which the &lt;em&gt;i&lt;/em&gt;th element is the price of a given stock on day &lt;em&gt;i&lt;/em&gt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 543. Diameter of Binary Tree</title>
    <link href="http://yoursite.com/2020/04/20/LeetCode-543-Diameter-of-Binary-Tree/"/>
    <id>http://yoursite.com/2020/04/20/LeetCode-543-Diameter-of-Binary-Tree/</id>
    <published>2020-04-20T02:16:23.000Z</published>
    <updated>2020-04-20T02:40:44.679Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the <strong>longest</strong> path between any two nodes in a tree. This path may or may not pass through the root.</p><p><strong>Example:</strong> Given a binary tree</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line"> &#x2F; \     </span><br><span class="line">4   5    </span><br></pre></td></tr></table></figure><p>Return <strong>3</strong>, which is the length of the path [4,2,1,3] or [5,2,1,3].</p><p><strong>Note:</strong> The length of path between two nodes is represented by the number of edges between them.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> diameterOfBinaryTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> diameter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> getD = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> left = getD(root.left);</span><br><span class="line">        <span class="keyword">let</span> right = getD(root.right);</span><br><span class="line">        diameter = <span class="built_in">Math</span>.max(diameter, left + right);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">Math</span>.max(left,right);</span><br><span class="line">    &#125;</span><br><span class="line">    getD(root);</span><br><span class="line">    <span class="keyword">return</span> diameter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 448. Find All Numbers Disappeared in an Array</title>
    <link href="http://yoursite.com/2020/04/19/LeetCode-448-Find-All-Numbers-Disappeared-in-an-Array/"/>
    <id>http://yoursite.com/2020/04/19/LeetCode-448-Find-All-Numbers-Disappeared-in-an-Array/</id>
    <published>2020-04-19T02:05:30.000Z</published>
    <updated>2020-04-19T09:34:20.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear twice and others appear once.</p><p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(<em>n</em>) runtime? You may assume the returned list does not count as extra space.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = nums[i];</span><br><span class="line">        temp = (temp&gt;<span class="number">0</span>) ? temp : -temp;</span><br><span class="line">        <span class="keyword">if</span>(nums[temp<span class="number">-1</span>]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            nums[temp<span class="number">-1</span>] *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(i,temp,nums[temp<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(nums);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j&lt;nums.length;j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            res.push(j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Output :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i temp nums[temp<span class="number">-1</span>]</span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">-7</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">-2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">-3</span></span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">-3</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span> <span class="number">-1</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">-3</span></span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">-2</span></span><br><span class="line"><span class="number">7</span> <span class="number">1</span> <span class="number">-4</span></span><br><span class="line">[ <span class="number">-4</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-7</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">-1</span> ]</span><br></pre></td></tr></table></figure><p>First iteration to negate values at position whose equal to values appear in array.</p><p>Second iteration to collect all position whose value is positive, which are the missing values.</p><p>If you do so , then the left positive element <code>k</code> :</p><p><code>k = nums[i]=nums[j-1]</code></p><p><code>1&lt;=j&lt;=length</code></p><p>the <code>j</code> does not exist</p><p>This is how this method works.</p><p><strong>It just takes the advantage of the indexes in the array : 0~array.length-1</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of integers where 1 ≤ a[i] ≤ &lt;em&gt;n&lt;/em&gt; (&lt;em&gt;n&lt;/em&gt; = size of array), some elements appear twice and others a
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 169. Majority Element</title>
    <link href="http://yoursite.com/2020/04/19/LeetCode-169-Majority-Element/"/>
    <id>http://yoursite.com/2020/04/19/LeetCode-169-Majority-Element/</id>
    <published>2020-04-19T01:38:15.000Z</published>
    <updated>2020-04-19T02:00:44.491Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of size <em>n</em>, find the majority element. The majority element is the element that appears <strong>more than</strong> <code>⌊ n/2 ⌋</code> times.</p><p>You may assume that the array is non-empty and the majority element always exist in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1,1,1,2,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></blockquote><p>I thought maybe I could sort the array first</p><p>Then cuz the element that appears <strong>more than</strong> <code>⌊ n/2 ⌋</code> times , the median must be the element</p><p><code>mid = Math.floor(nums.length/2)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">3</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sorted = nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;<span class="keyword">return</span> a-b&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(sorted);</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(nums.length/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> nums[mid];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Also there is fancy <code>Boyer-Moore Voting Algorithm</code> :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Boyer-Moore Voting Algorithm</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>, candidate = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            candidate = num</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'first:'</span>,count,candidate);</span><br><span class="line">        count += ((num === candidate) ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(count,candidate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input : [2,2,1,1,1,2,2]</span></span><br><span class="line">first: <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">first: <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line">first: <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">first: <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span></span><br><span class="line">first: <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line">first: <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line">first: <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>This method use <code>candidate</code> to track the current element</p><p>if <code>num === candidate</code> then the element appears before so add 1 to the <code>count</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of size &lt;em&gt;n&lt;/em&gt;, find the majority element. The majority element is the element that appears &lt;strong&gt;more 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>R programming : Covid-19 data visualization</title>
    <link href="http://yoursite.com/2020/04/18/R-programming-Covid-19-data-visualization/"/>
    <id>http://yoursite.com/2020/04/18/R-programming-Covid-19-data-visualization/</id>
    <published>2020-04-18T11:39:25.000Z</published>
    <updated>2020-04-21T02:35:34.034Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I use <code>text()</code> to label numbers in graphs and it sucks ... I try to battle with it manully adjusting the parameters and it is still ugly ... if you know any other way PLEASE DO COMMENT !!! Thx !!! 🙏</p></blockquote><p>Here is the raw data :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt; china</span><br><span class="line">            日期 新增确诊病例 新增死亡病例 新增治愈出院病例 新增疑似病例</span><br><span class="line"><span class="number">1</span>  <span class="number">2020</span>年<span class="number">1</span>月<span class="number">29</span>日         <span class="number">1737</span>           <span class="number">38</span>               <span class="number">21</span>         <span class="number">4148</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2020</span>年<span class="number">1</span>月<span class="number">30</span>日         <span class="number">1982</span>           <span class="number">43</span>               <span class="number">47</span>         <span class="number">4812</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2020</span>年<span class="number">1</span>月<span class="number">31</span>日         <span class="number">2102</span>           <span class="number">46</span>               <span class="number">73</span>         <span class="number">5019</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">1</span>日         <span class="number">2590</span>           <span class="number">46</span>               <span class="number">85</span>         <span class="number">4562</span></span><br><span class="line"><span class="number">5</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">2</span>日         <span class="number">2829</span>           <span class="number">57</span>              <span class="number">147</span>         <span class="number">5173</span></span><br><span class="line"><span class="number">6</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">3</span>日         <span class="number">3235</span>           <span class="number">64</span>              <span class="number">157</span>         <span class="number">5072</span></span><br><span class="line"><span class="number">7</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">4</span>日         <span class="number">3887</span>           <span class="number">65</span>              <span class="number">262</span>         <span class="number">3971</span></span><br><span class="line"><span class="number">8</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">5</span>日         <span class="number">3694</span>           <span class="number">73</span>              <span class="number">261</span>         <span class="number">5328</span></span><br><span class="line"><span class="number">9</span>   <span class="number">2020</span>年<span class="number">2</span>月<span class="number">6</span>日         <span class="number">3143</span>           <span class="number">73</span>              <span class="number">387</span>         <span class="number">4833</span></span><br><span class="line"><span class="number">10</span>  <span class="number">2020</span>年<span class="number">2</span>月<span class="number">7</span>日         <span class="number">3399</span>           <span class="number">86</span>              <span class="number">510</span>         <span class="number">4214</span></span><br><span class="line"><span class="number">11</span>  <span class="number">2020</span>年<span class="number">2</span>月<span class="number">8</span>日         <span class="number">2656</span>           <span class="number">89</span>              <span class="number">600</span>         <span class="number">3916</span></span><br><span class="line"><span class="number">12</span>  <span class="number">2020</span>年<span class="number">2</span>月<span class="number">9</span>日         <span class="number">3062</span>           <span class="number">97</span>              <span class="number">632</span>         <span class="number">4008</span></span><br><span class="line"><span class="number">13</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">10</span>日         <span class="number">2478</span>          <span class="number">108</span>              <span class="number">716</span>         <span class="number">3536</span></span><br><span class="line"><span class="number">14</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">11</span>日         <span class="number">2015</span>           <span class="number">97</span>              <span class="number">744</span>         <span class="number">3342</span></span><br><span class="line"><span class="number">15</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">12</span>日        <span class="number">15152</span>          <span class="number">254</span>             <span class="number">1171</span>         <span class="number">2807</span></span><br><span class="line"><span class="number">16</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">13</span>日         <span class="number">5090</span>          <span class="number">121</span>             <span class="number">1081</span>         <span class="number">2450</span></span><br><span class="line"><span class="number">17</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">14</span>日         <span class="number">2641</span>          <span class="number">143</span>             <span class="number">1373</span>         <span class="number">2277</span></span><br><span class="line"><span class="number">18</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">15</span>日         <span class="number">2009</span>          <span class="number">142</span>             <span class="number">1323</span>         <span class="number">1918</span></span><br><span class="line"><span class="number">19</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">16</span>日         <span class="number">2048</span>          <span class="number">105</span>             <span class="number">1425</span>         <span class="number">1563</span></span><br><span class="line"><span class="number">20</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">17</span>日         <span class="number">1886</span>           <span class="number">98</span>             <span class="number">1701</span>         <span class="number">1432</span></span><br><span class="line"><span class="number">21</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">18</span>日         <span class="number">1749</span>          <span class="number">136</span>             <span class="number">1824</span>         <span class="number">1185</span></span><br><span class="line"><span class="number">22</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">19</span>日          <span class="number">394</span>          <span class="number">114</span>             <span class="number">1779</span>         <span class="number">1277</span></span><br><span class="line"><span class="number">23</span> <span class="number">2020</span>年<span class="number">2</span>月<span class="number">20</span>日          <span class="number">889</span>          <span class="number">118</span>             <span class="number">2109</span>         <span class="number">1614</span></span><br><span class="line">&gt; usa</span><br><span class="line">            地区 累计确诊 累计死亡</span><br><span class="line"><span class="number">1</span>       New York   <span class="number">223691</span>    <span class="number">12248</span></span><br><span class="line"><span class="number">2</span>     New Jersey    <span class="number">75317</span>     <span class="number">3518</span></span><br><span class="line"><span class="number">3</span>  Massachusetts    <span class="number">32181</span>     <span class="number">1245</span></span><br><span class="line"><span class="number">4</span>       Michigan    <span class="number">29263</span>     <span class="number">2093</span></span><br><span class="line"><span class="number">5</span>     California    <span class="number">28036</span>      <span class="number">965</span></span><br><span class="line"><span class="number">6</span>   Pennsylvania    <span class="number">27735</span>      <span class="number">707</span></span><br><span class="line"><span class="number">7</span>       Illinois    <span class="number">25734</span>     <span class="number">1072</span></span><br><span class="line"><span class="number">8</span>        Florida    <span class="number">23340</span>      <span class="number">668</span></span><br><span class="line"><span class="number">9</span>      Louisiana    <span class="number">22532</span>     <span class="number">1156</span></span><br><span class="line"><span class="number">10</span>         Texas    <span class="number">17216</span>      <span class="number">424</span></span><br></pre></td></tr></table></figure><p>Dealing with the Chinese date data :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; as.Date(china$日期, format = <span class="string">"%Y年%m月%d日"</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"2020-01-29"</span> <span class="string">"2020-01-30"</span> <span class="string">"2020-01-31"</span> <span class="string">"2020-02-01"</span> <span class="string">"2020-02-02"</span> <span class="string">"2020-02-03"</span></span><br><span class="line"> [<span class="number">7</span>] <span class="string">"2020-02-04"</span> <span class="string">"2020-02-05"</span> <span class="string">"2020-02-06"</span> <span class="string">"2020-02-07"</span> <span class="string">"2020-02-08"</span> <span class="string">"2020-02-09"</span></span><br><span class="line">[<span class="number">13</span>] <span class="string">"2020-02-10"</span> <span class="string">"2020-02-11"</span> <span class="string">"2020-02-12"</span> <span class="string">"2020-02-13"</span> <span class="string">"2020-02-14"</span> <span class="string">"2020-02-15"</span></span><br><span class="line">[<span class="number">19</span>] <span class="string">"2020-02-16"</span> <span class="string">"2020-02-17"</span> <span class="string">"2020-02-18"</span> <span class="string">"2020-02-19"</span> <span class="string">"2020-02-20"</span></span><br></pre></td></tr></table></figure><p>Bummer ! Chinese characters cannot be displayed in the graph !</p><p>As a OS X user, I put a Chinese-frendly font in the system font folder then load into the working environment .</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; font_files()</span><br><span class="line">            path                       file                    family    face</span><br><span class="line"><span class="number">1</span> /Library/Fonts          Arial Unicode.ttf          Arial Unicode MS Regular</span><br><span class="line"><span class="number">2</span> /Library/Fonts  TaipeiSansTCBeta-Bold.ttf       Taipei Sans TC Beta    Bold</span><br><span class="line"><span class="number">3</span> /Library/Fonts TaipeiSansTCBeta-Light.ttf Taipei Sans TC Beta Light Regular</span><br><span class="line"><span class="number">4</span> /Library/Fonts       TaipeiSansTCBeta.ttf       Taipei Sans TC Beta Regular</span><br><span class="line">        version                  ps_name</span><br><span class="line"><span class="number">1</span> Version <span class="number">1.</span>01x           ArialUnicodeMS</span><br><span class="line"><span class="number">2</span> Version <span class="number">1.000</span>    TaipeiSansTCBeta-Bold</span><br><span class="line"><span class="number">3</span> Version <span class="number">1.000</span>   TaipeiSansTCBeta-Light</span><br><span class="line"><span class="number">4</span> Version <span class="number">1.000</span> TaipeiSansTCBeta-Regular</span><br><span class="line">&gt; par(family=<span class="string">'Taipei Sans TC Beta'</span>)</span><br></pre></td></tr></table></figure><p>Start to draw the first graph :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(china$新增确诊病例~as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),type=<span class="string">'b'</span>,col=<span class="string">'#f94f5b'</span>,pch=<span class="number">2</span>,xlab=<span class="string">'日期'</span>,ylab=<span class="string">'病例数目'</span>,main=<span class="string">'国内疫情数据'</span>)</span><br><span class="line">&gt; points(as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),china$新增死亡病例,col=<span class="string">'#df9f9f'</span>,pch=<span class="number">4</span>,type = <span class="string">'b'</span>)</span><br><span class="line">&gt; points(as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),china$新增治愈出院病例,col=<span class="string">'#9a3e3e'</span>,pch=<span class="number">6</span>,type=<span class="string">'b'</span>)</span><br><span class="line">&gt; points(as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),china$新增疑似病例,col=<span class="string">'#ce7676'</span>,pch=<span class="number">8</span>,type=<span class="string">'b'</span>)</span><br><span class="line">&gt; legend(<span class="string">'topright'</span>,c(<span class="string">'新增确诊病例'</span>,<span class="string">'新增死亡病例'</span>,<span class="string">'新增治愈出院病例'</span>,<span class="string">'新增疑似病例'</span>),col=c(<span class="string">'#f94f5b'</span>,<span class="string">'#df9f9f'</span>,<span class="string">'#9a3e3e'</span>,<span class="string">'#ce7676'</span>),pch=c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/lY0h2We.png" /></p><p>Now draw two pie charts with fancy percent legend :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; percent&lt;-round(<span class="number">100</span>*usa$累计确诊/sum(usa$累计确诊),<span class="number">2</span>) </span><br><span class="line">&gt; percent &lt;-paste(percent, <span class="string">"%"</span>, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent &lt;-paste(usa$地区,<span class="string">' '</span>,percent, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"New York 44.29%"</span>     <span class="string">"New Jersey 14.91%"</span>   <span class="string">"Massachusetts 6.37%"</span></span><br><span class="line"> [<span class="number">4</span>] <span class="string">"Michigan 5.79%"</span>      <span class="string">"California 5.55%"</span>    <span class="string">"Pennsylvania 5.49%"</span> </span><br><span class="line"> [<span class="number">7</span>] <span class="string">"Illinois 5.1%"</span>       <span class="string">"Florida 4.62%"</span>       <span class="string">"Louisiana 4.46%"</span>    </span><br><span class="line">[<span class="number">10</span>] <span class="string">"Texas 3.41%"</span>  </span><br><span class="line">&gt; pie(usa$累计确诊,labels = percent,col = rainbow(length(usa$地区)))</span><br><span class="line">&gt; title(<span class="string">'美国各大州累计确诊数目'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/PbvZzGd.png" /></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; percent&lt;-round(<span class="number">100</span>*usa$累计死亡/sum(usa$累计死亡),<span class="number">2</span>) </span><br><span class="line">&gt; percent &lt;-paste(percent, <span class="string">"%"</span>, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent &lt;-paste(usa$地区,<span class="string">' '</span>,percent, sep = <span class="string">""</span>) </span><br><span class="line">&gt; percent</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"New York 50.83%"</span>     <span class="string">"New Jersey 14.6%"</span>    <span class="string">"Massachusetts 5.17%"</span></span><br><span class="line"> [<span class="number">4</span>] <span class="string">"Michigan 8.69%"</span>      <span class="string">"California 4%"</span>       <span class="string">"Pennsylvania 2.93%"</span> </span><br><span class="line"> [<span class="number">7</span>] <span class="string">"Illinois 4.45%"</span>      <span class="string">"Florida 2.77%"</span>       <span class="string">"Louisiana 4.8%"</span>     </span><br><span class="line">[<span class="number">10</span>] <span class="string">"Texas 1.76%"</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/I02uekp.png" /></p><p>Now bar plot :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; us &lt;- t(usa[,c(<span class="number">2</span>:<span class="number">3</span>)])</span><br><span class="line">&gt; us</span><br><span class="line">           [,<span class="number">1</span>]  [,<span class="number">2</span>]  [,<span class="number">3</span>]  [,<span class="number">4</span>]  [,<span class="number">5</span>]  [,<span class="number">6</span>]  [,<span class="number">7</span>]  [,<span class="number">8</span>]  [,<span class="number">9</span>] [,<span class="number">10</span>]</span><br><span class="line">累计确诊 <span class="number">223691</span> <span class="number">75317</span> <span class="number">32181</span> <span class="number">29263</span> <span class="number">28036</span> <span class="number">27735</span> <span class="number">25734</span> <span class="number">23340</span> <span class="number">22532</span> <span class="number">17216</span></span><br><span class="line">累计死亡  <span class="number">12248</span>  <span class="number">3518</span>  <span class="number">1245</span>  <span class="number">2093</span>   <span class="number">965</span>   <span class="number">707</span>  <span class="number">1072</span>   <span class="number">668</span>  <span class="number">1156</span>   <span class="number">424</span></span><br><span class="line">&gt; barplot(us,beside=<span class="literal">TRUE</span>,names.arg = usa$地区,col=c(<span class="string">'#3b5998'</span>,<span class="string">'#8b9dc3'</span>),legend.text = c(<span class="string">'累计确诊'</span>,<span class="string">'累计死亡'</span>),main = <span class="string">'美国各大州累计确诊与死亡数据'</span>,ylim = c(<span class="number">0</span>,<span class="number">250000</span>))</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(usa$地区))*<span class="number">2.75</span>+<span class="number">0.75</span>,y=usa$累计死亡,labels = usa$累计死亡,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(usa$地区))*<span class="number">2.5</span>,y=usa$累计确诊,labels = usa$累计确诊,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/jmEFEYS.png" /></p><p>Now box plot :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; boxplot(usa$累计确诊,usa$累计死亡,col=c(<span class="string">'#ffcc66'</span>),names = c(<span class="string">'累计确诊'</span>,<span class="string">'累计死亡'</span>))</span><br><span class="line">&gt; title(<span class="string">'美国累计确诊与累计死亡数据'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/f092XC0.png" /></p><p>Now dot chart :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dotchart(usa[order(usa$累计确诊),]$累计确诊,labels = usa[order(usa$累计确诊),]$地区,main = <span class="string">"美国累计确诊情况"</span>,pch=<span class="number">18</span>,col=<span class="string">"#52bf90"</span>,xlab = <span class="string">"数量"</span>)</span><br><span class="line">&gt; dotchart(usa[order(usa$累计死亡),]$累计死亡,labels = usa[order(usa$累计死亡),]$地区,main = <span class="string">"美国累计死亡情况"</span>,pch=<span class="number">18</span>,col=<span class="string">"#52bf90"</span>,xlab = <span class="string">"数量"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/nO9bov4.png" /></p><p><img src="https://i.imgur.com/Cpm2wYC.png" /></p><p>Finally 💅</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; barplot(china$新增确诊病例~as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),col=<span class="string">'#f94f5b'</span>,xlab=<span class="string">'日期'</span>,ylab=<span class="string">'病例数目'</span>,main=<span class="string">'国内新增确诊疫情数据'</span>)</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(china$日期))*<span class="number">1.15</span>,y=china$新增确诊病例,labels=china$新增确诊病例,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br><span class="line">&gt; barplot(china$新增确诊病例~as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),col=<span class="string">'#f94f5b'</span>,xlab=<span class="string">'日期'</span>,ylab=<span class="string">'病例数目'</span>,main=<span class="string">'国内新增确诊疫情数据'</span>)</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(china$日期))*<span class="number">1.15</span>,y=china$新增确诊病例,labels=china$新增确诊病例,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/6oXodVh.png" /></p><p><img src="https://i.imgur.com/Ft5I1Kr.png" /></p><p>Cumulative data :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; confirmed &lt;- cumsum(china$新增确诊病例)</span><br><span class="line">&gt; death &lt;- cumsum(china$新增死亡病例)</span><br><span class="line">&gt; rate &lt;- round(<span class="number">100</span>*death/confirmed,<span class="number">2</span>)</span><br><span class="line">&gt; rate</span><br><span class="line"> [<span class="number">1</span>] <span class="number">2.19</span> <span class="number">2.18</span> <span class="number">2.18</span> <span class="number">2.06</span> <span class="number">2.05</span> <span class="number">2.03</span> <span class="number">1.96</span> <span class="number">1.96</span> <span class="number">2.00</span> <span class="number">2.07</span> <span class="number">2.18</span> <span class="number">2.26</span> <span class="number">2.41</span> <span class="number">2.53</span> <span class="number">2.29</span> <span class="number">2.30</span> <span class="number">2.43</span></span><br><span class="line">[<span class="number">18</span>] <span class="number">2.58</span> <span class="number">2.66</span> <span class="number">2.73</span> <span class="number">2.86</span> <span class="number">3.00</span> <span class="number">3.13</span></span><br><span class="line">&gt; percent</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"2.19 % "</span> <span class="string">"2.18 % "</span> <span class="string">"2.18 % "</span> <span class="string">"2.06 % "</span> <span class="string">"2.05 % "</span> <span class="string">"2.03 % "</span> <span class="string">"1.96 % "</span> <span class="string">"1.96 % "</span></span><br><span class="line"> [<span class="number">9</span>] <span class="string">"2 % "</span>    <span class="string">"2.07 % "</span> <span class="string">"2.18 % "</span> <span class="string">"2.26 % "</span> <span class="string">"2.41 % "</span> <span class="string">"2.53 % "</span> <span class="string">"2.29 % "</span> <span class="string">"2.3 % "</span> </span><br><span class="line">[<span class="number">17</span>] <span class="string">"2.43 % "</span> <span class="string">"2.58 % "</span> <span class="string">"2.66 % "</span> <span class="string">"2.73 % "</span> <span class="string">"2.86 % "</span> <span class="string">"3 % "</span>    <span class="string">"3.13 % "</span></span><br><span class="line">&gt; barplot(rate~as.Date(china$日期,<span class="string">"%Y年%m月%d日"</span>),col=<span class="string">'#52bf90'</span>,xlab=<span class="string">'日期'</span>,ylab=<span class="string">'死亡率'</span>,main=<span class="string">'国内疫情死亡率变化数据'</span>,ylim=c(<span class="number">0</span>,<span class="number">3.5</span>))</span><br><span class="line">&gt; text(x=c(<span class="number">1</span>:length(china$日期))*<span class="number">1.15</span>,y=rate,labels=percent,cex=<span class="number">1</span>,pos=<span class="number">3</span>,col=<span class="string">"#000000"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/20TB9Ve.png" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;I use &lt;code&gt;text()&lt;/code&gt; to label numbers in graphs and it sucks ... I try to battle with it manully adjusting the paramete
      
    
    </summary>
    
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 230. Kth Smallest Element in a BST</title>
    <link href="http://yoursite.com/2020/04/18/LeetCode-230-Kth-Smallest-Element-in-a-BST/"/>
    <id>http://yoursite.com/2020/04/18/LeetCode-230-Kth-Smallest-Element-in-a-BST/</id>
    <published>2020-04-18T02:28:58.000Z</published>
    <updated>2020-04-18T03:13:01.393Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <strong>k</strong>th smallest element in it.</p><p><strong>Note:</strong> You may assume k is always valid, 1 ≤ k ≤ BST's total elements.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [5,3,6,2,4,null,null,1], k &#x3D; 3</span><br><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">     3   6</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   4</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong> What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kthSmallest = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> record = [];</span><br><span class="line">    <span class="keyword">let</span> traverse = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        record.push(root.val);</span><br><span class="line">        traverse(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    traverse(root);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> record[k<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Optimized version :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kthSmallest = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> current = root,result=<span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span>(current)&#123;</span><br><span class="line">          <span class="keyword">if</span>(!current.left)&#123;</span><br><span class="line">              --k;</span><br><span class="line">              <span class="keyword">if</span>(k===<span class="number">0</span>)&#123;</span><br><span class="line">                  result = current.val;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              current = current.right</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">let</span> prede = current.left;</span><br><span class="line">              <span class="keyword">while</span>(prede.right &amp;&amp; prede.right !== current)&#123;</span><br><span class="line">                  prede = prede.right</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(prede.right)&#123;</span><br><span class="line">                  prede.right = <span class="literal">null</span>;</span><br><span class="line">                  --k;</span><br><span class="line">                  <span class="keyword">if</span>(k===<span class="number">0</span>)&#123;result = current.val;<span class="keyword">break</span>;&#125;</span><br><span class="line">                  current = current.right;</span><br><span class="line"></span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  prede.right = current;</span><br><span class="line">                  current = current.left</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Judge while running the process , quit if k=0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary search tree, write a function &lt;code&gt;kthSmallest&lt;/code&gt; to find the &lt;strong&gt;k&lt;/strong&gt;th smallest element in i
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 104. Maximum Depth of Binary Tree</title>
    <link href="http://yoursite.com/2020/04/18/LeetCode-104-Maximum-Depth-of-Binary-Tree/"/>
    <id>http://yoursite.com/2020/04/18/LeetCode-104-Maximum-Depth-of-Binary-Tree/</id>
    <published>2020-04-18T02:24:06.000Z</published>
    <updated>2020-04-18T02:26:42.980Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><strong>Note:</strong> A leaf is a node with no children.</p><p><strong>Example:</strong></p><p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its depth = 3.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> getDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(getDepth(root.left),getDepth(root.right))+<span class="number">1</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getDepth(root);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>And it could be shortened like this :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root, depth = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> depth;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(maxDepth(root.left, depth + <span class="number">1</span>), maxDepth(root.right, depth + <span class="number">1</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, find its maximum depth.&lt;/p&gt;
&lt;p&gt;The maximum depth is the number of nodes along the longest path from the
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 121. Best Time to Buy and Sell Stock</title>
    <link href="http://yoursite.com/2020/04/17/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>http://yoursite.com/2020/04/17/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2020-04-17T06:19:06.000Z</published>
    <updated>2020-04-17T06:25:13.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ay you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p><p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find  the maximum profit.</p><p>Note that you cannot sell a stock before you buy one.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-1 &#x3D; 5.</span><br><span class="line">             Not 7-1 &#x3D; 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> high = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">  <span class="comment">// Notice : low needs to be Number.MAX_SAFE_INTEGER or some element will be missed</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;prices.length;i++) &#123;</span><br><span class="line">        low = <span class="built_in">Math</span>.min(low,prices[i]);</span><br><span class="line">        high = <span class="built_in">Math</span>.max(high,prices[i]-low);</span><br><span class="line">      <span class="comment">// It's very clever to put low first then calculate high </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> high;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ay you have an array for which the &lt;em&gt;i&lt;/em&gt;th element is the price of a given stock on day &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you were 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 53. Maximum Subarray</title>
    <link href="http://yoursite.com/2020/04/17/LeetCode-53-Maximum-Subarray/"/>
    <id>http://yoursite.com/2020/04/17/LeetCode-53-Maximum-Subarray/</id>
    <published>2020-04-17T02:35:56.000Z</published>
    <updated>2020-04-17T03:05:38.548Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum &#x3D; 6.</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> smax = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        sum += num;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;smax) smax=sum;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;<span class="number">0</span>) sum=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> smax;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, find the contiguous subarray (containing at least one number) which has the larges
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 136. Single Number</title>
    <link href="http://yoursite.com/2020/04/17/LeetCode-136-Single-Number/"/>
    <id>http://yoursite.com/2020/04/17/LeetCode-136-Single-Number/</id>
    <published>2020-04-17T02:22:42.000Z</published>
    <updated>2020-04-17T02:34:21.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></blockquote><p>Well it directly says <strong>no extra memory</strong></p><p>So I thought : maybe using XOR bitwise trick 😉</p><p>XOR means <code>1^0=1</code> <code>1^1=0</code> <code>0^0=1</code> , only two different elements will get <code>TRUE</code></p><p>It either twice or once</p><p>So if the element appears twice XOR it will be reduced to a string of zeros</p><p>Or it will be the way it is</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;nums.length;i++ ) &#123;</span><br><span class="line">        nums[<span class="number">0</span>] = nums[<span class="number">0</span>]^nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; array of integers, every element appears &lt;em&gt;twice&lt;/em&gt; except for one. Find that single 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 98. Validate Binary Search Tree</title>
    <link href="http://yoursite.com/2020/04/16/LeetCode-98-Validate-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2020/04/16/LeetCode-98-Validate-Binary-Search-Tree/</id>
    <published>2020-04-16T03:44:59.000Z</published>
    <updated>2020-04-16T04:37:43.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><ul><li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li><li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line"></span><br><span class="line">Input: [2,1,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line"></span><br><span class="line">Input: [5,1,4,null,null,3,6]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The root node&#39;s value is 5 but its right child&#39;s value is 4.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="function"><span class="keyword">function</span>(<span class="params">root,min=null,max=null</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(min &amp;&amp; root.val&lt;=min.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(max &amp;&amp; root.val&gt;=max.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> isValidBST(root.left,min,root) &amp;&amp; isValidBST(root.right,root,max);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, determine if it is a valid binary search tree (BST).&lt;/p&gt;
&lt;p&gt;Assume a BST is defined as follows:&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 34. Find First and Last Position of Element in Sorted Array</title>
    <link href="http://yoursite.com/2020/04/15/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
    <id>http://yoursite.com/2020/04/15/LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</id>
    <published>2020-04-15T03:50:51.000Z</published>
    <updated>2020-04-15T07:51:41.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>Your algorithm's runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure></blockquote><p>Well obviously it's not brutal force log(N)</p><p><em>O</em>(log <em>n</em>) means binary search</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchRange = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right) &#123;</span><br><span class="line">           mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]===target) &#123;</span><br><span class="line">               left = right = mid;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&lt;target) &#123;</span><br><span class="line">               left = mid+<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&gt;target) &#123;</span><br><span class="line">              right = mid<span class="number">-1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(left&gt;right) &#123;</span><br><span class="line">               <span class="comment">// if not in the array</span></span><br><span class="line">               <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (nums[left<span class="number">-1</span>] === target) left--;</span><br><span class="line">    <span class="keyword">while</span> (nums[right+<span class="number">1</span>] === target) right++;</span><br><span class="line">    <span class="keyword">return</span> [left,right];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; sorted in ascending order, find the starting and ending position of a given &lt;co
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 56. Merge Intervals</title>
    <link href="http://yoursite.com/2020/04/14/LeetCode-56-Merge-Intervals/"/>
    <id>http://yoursite.com/2020/04/14/LeetCode-56-Merge-Intervals/</id>
    <published>2020-04-14T10:29:54.000Z</published>
    <updated>2020-04-14T15:41:10.657Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a collection of intervals, merge all overlapping intervals.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">intervals</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(intervals.length&lt;<span class="number">2</span>) <span class="keyword">return</span> intervals;</span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>(a[<span class="number">0</span>]-b[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// first ascending sort</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;intervals.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> pre = intervals[i];</span><br><span class="line">        <span class="keyword">let</span> lat = intervals[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(pre[<span class="number">1</span>]&gt;=lat[<span class="number">0</span>]) &#123;</span><br><span class="line">            intervals[i+<span class="number">1</span>]=[<span class="built_in">Math</span>.min(pre[<span class="number">0</span>],lat[<span class="number">0</span>]),<span class="built_in">Math</span>.max(pre[<span class="number">1</span>],lat[<span class="number">1</span>])];</span><br><span class="line">            intervals.splice(i,<span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intervals;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a collection of intervals, merge all overlapping intervals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>R visualization : ordered dot chart</title>
    <link href="http://yoursite.com/2020/04/14/R-visualization-ordered-dot-chart/"/>
    <id>http://yoursite.com/2020/04/14/R-visualization-ordered-dot-chart/</id>
    <published>2020-04-14T06:01:22.000Z</published>
    <updated>2020-04-14T06:43:44.728Z</updated>
    
    <content type="html"><![CDATA[<p>According to <a href="student_score.csv">the csv file</a> , draw the dot chart of the total scores of the students.</p><p>Load the csv data:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; data</span><br><span class="line">              ID gender math english chemistry</span><br><span class="line">Davis    <span class="number">2017001</span>   Male  <span class="number">192</span>      <span class="number">93</span>        <span class="number">55</span></span><br><span class="line">Williams <span class="number">2017002</span>   Male  <span class="number">178</span>      <span class="number">86</span>        <span class="number">32</span></span><br><span class="line">Jones    <span class="number">2017003</span> Female  <span class="number">158</span>      <span class="number">65</span>        <span class="number">52</span></span><br><span class="line">Cushing  <span class="number">2017004</span>   Male  <span class="number">189</span>      <span class="number">72</span>        <span class="number">28</span></span><br><span class="line">Ytzrhak  <span class="number">2017005</span> Female  <span class="number">193</span>      <span class="number">87</span>        <span class="number">45</span></span><br><span class="line">Knox     <span class="number">2017006</span>   Male  <span class="number">167</span>      <span class="number">76</span>        <span class="number">60</span></span><br><span class="line">Rayburm  <span class="number">2017007</span>   Male  <span class="number">176</span>      <span class="number">79</span>        <span class="number">47</span></span><br><span class="line">England  <span class="number">2017008</span>   Male  <span class="number">185</span>      <span class="number">67</span>        <span class="number">42</span></span><br><span class="line">Tmac     <span class="number">2017009</span> Female  <span class="number">174</span>      <span class="number">69</span>        <span class="number">52</span></span><br><span class="line">Mcgrady  <span class="number">2017010</span> Female  <span class="number">182</span>      <span class="number">81</span>        <span class="number">38</span></span><br></pre></td></tr></table></figure><p>Add <code>total</code> to the data</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; data$total &lt;- apply(data[,c(<span class="number">3</span>:<span class="number">5</span>)],<span class="number">1</span>,sum)</span><br><span class="line">&gt; data</span><br><span class="line">              ID gender math english chemistry total</span><br><span class="line">Davis    <span class="number">2017001</span>   Male  <span class="number">192</span>      <span class="number">93</span>        <span class="number">55</span>   <span class="number">340</span></span><br><span class="line">Williams <span class="number">2017002</span>   Male  <span class="number">178</span>      <span class="number">86</span>        <span class="number">32</span>   <span class="number">296</span></span><br><span class="line">Jones    <span class="number">2017003</span> Female  <span class="number">158</span>      <span class="number">65</span>        <span class="number">52</span>   <span class="number">275</span></span><br><span class="line">Cushing  <span class="number">2017004</span>   Male  <span class="number">189</span>      <span class="number">72</span>        <span class="number">28</span>   <span class="number">289</span></span><br><span class="line">Ytzrhak  <span class="number">2017005</span> Female  <span class="number">193</span>      <span class="number">87</span>        <span class="number">45</span>   <span class="number">325</span></span><br><span class="line">Knox     <span class="number">2017006</span>   Male  <span class="number">167</span>      <span class="number">76</span>        <span class="number">60</span>   <span class="number">303</span></span><br><span class="line">Rayburm  <span class="number">2017007</span>   Male  <span class="number">176</span>      <span class="number">79</span>        <span class="number">47</span>   <span class="number">302</span></span><br><span class="line">England  <span class="number">2017008</span>   Male  <span class="number">185</span>      <span class="number">67</span>        <span class="number">42</span>   <span class="number">294</span></span><br><span class="line">Tmac     <span class="number">2017009</span> Female  <span class="number">174</span>      <span class="number">69</span>        <span class="number">52</span>   <span class="number">295</span></span><br><span class="line">Mcgrady  <span class="number">2017010</span> Female  <span class="number">182</span>      <span class="number">81</span>        <span class="number">38</span>   <span class="number">301</span></span><br></pre></td></tr></table></figure><p>Use <code>order()</code> to organize the data</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; data[order(data$total),]</span><br><span class="line">              ID gender math english chemistry total</span><br><span class="line">Jones    <span class="number">2017003</span> Female  <span class="number">158</span>      <span class="number">65</span>        <span class="number">52</span>   <span class="number">275</span></span><br><span class="line">Cushing  <span class="number">2017004</span>   Male  <span class="number">189</span>      <span class="number">72</span>        <span class="number">28</span>   <span class="number">289</span></span><br><span class="line">England  <span class="number">2017008</span>   Male  <span class="number">185</span>      <span class="number">67</span>        <span class="number">42</span>   <span class="number">294</span></span><br><span class="line">Tmac     <span class="number">2017009</span> Female  <span class="number">174</span>      <span class="number">69</span>        <span class="number">52</span>   <span class="number">295</span></span><br><span class="line">Williams <span class="number">2017002</span>   Male  <span class="number">178</span>      <span class="number">86</span>        <span class="number">32</span>   <span class="number">296</span></span><br><span class="line">Mcgrady  <span class="number">2017010</span> Female  <span class="number">182</span>      <span class="number">81</span>        <span class="number">38</span>   <span class="number">301</span></span><br><span class="line">Rayburm  <span class="number">2017007</span>   Male  <span class="number">176</span>      <span class="number">79</span>        <span class="number">47</span>   <span class="number">302</span></span><br><span class="line">Knox     <span class="number">2017006</span>   Male  <span class="number">167</span>      <span class="number">76</span>        <span class="number">60</span>   <span class="number">303</span></span><br><span class="line">Ytzrhak  <span class="number">2017005</span> Female  <span class="number">193</span>      <span class="number">87</span>        <span class="number">45</span>   <span class="number">325</span></span><br><span class="line">Davis    <span class="number">2017001</span>   Male  <span class="number">192</span>      <span class="number">93</span>        <span class="number">55</span>   <span class="number">340</span></span><br></pre></td></tr></table></figure><p>Draw the chart :</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dotchart(data[order(data$total),]$total,labels = rownames(data[order(data$total),]),main = <span class="string">"simple dot chart"</span>,pch=<span class="number">18</span>,col=<span class="string">"blue"</span>,xlab = <span class="string">"score"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Ge61xJI.png" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;According to &lt;a href=&quot;student_score.csv&quot;&gt;the csv file&lt;/a&gt; , draw the dot chart of the total scores of the students.&lt;/p&gt;
&lt;p&gt;Load the csv d
      
    
    </summary>
    
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 22. Generate Parentheses</title>
    <link href="http://yoursite.com/2020/04/13/LeetCode-22-Generate-Parentheses/"/>
    <id>http://yoursite.com/2020/04/13/LeetCode-22-Generate-Parentheses/</id>
    <published>2020-04-13T02:42:53.000Z</published>
    <updated>2020-04-13T04:01:19.125Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><p>For example, given <em>n</em> = 3, a solution set is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><p>DP solution :</p><p>Generate 0 pair () then generate n pair afterwards</p><p>Generate 1 pair () then generate n-1 pair afterwards</p><p>Generate 2 pairs () then generate n-2 pair afterwards</p><p>…</p><p>Generate n-1 pairs () then 1 pair afterwards</p><p>Here is the process:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">0</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">0</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">1</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">1</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">2</span> right= <span class="number">2</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">2</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br><span class="line">left= <span class="number">3</span> right= <span class="number">3</span> [ <span class="string">'((()))'</span>, <span class="string">'(()())'</span>, <span class="string">'(())()'</span>, <span class="string">'()(())'</span>, <span class="string">'()()()'</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="function">(<span class="params">left,right,part</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(!left &amp;&amp; !right) res.push(part);</span><br><span class="line">        <span class="keyword">if</span>(left&gt;<span class="number">0</span>) dp(left<span class="number">-1</span>,right,part+<span class="string">'('</span>);</span><br><span class="line">        <span class="keyword">if</span>(right&gt;<span class="number">0</span>) dp(left,right<span class="number">-1</span>,part+<span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dp(n,n,<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; pairs of parentheses, write a function to generate all combinations of well-formed parentheses.&lt;/p&gt;
&lt;p&gt;For 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 394. Decode String</title>
    <link href="http://yoursite.com/2020/04/12/LeetCode-394-Decode-String/"/>
    <id>http://yoursite.com/2020/04/12/LeetCode-394-Decode-String/</id>
    <published>2020-04-12T02:03:41.000Z</published>
    <updated>2020-04-12T02:46:43.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: <code>k[encoded_string]</code>, where the <em>encoded_string</em> inside the square brackets is being repeated exactly <em>k</em> times. Note that <em>k</em> is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <em>k</em>. For example, there won't be input like <code>3a</code> or <code>2[4]</code>.</p><p><strong>Examples:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; &quot;3[a]2[bc]&quot;, return &quot;aaabcbc&quot;.</span><br><span class="line">s &#x3D; &quot;3[a2[c]]&quot;, return &quot;accaccacc&quot;.</span><br><span class="line">s &#x3D; &quot;2[abc]3[cd]ef&quot;, return &quot;abcabccdcdcdef&quot;.</span><br></pre></td></tr></table></figure></blockquote><p>Obviously we should use stack to tackle the problem.</p><p>Read the string from left to right , if you meet a '[' , push the string into the stack , if you meet a ']' , pop the string out of the stack.</p><p>Also keep a length keeper for each string in the stack , slightly upper than the letters.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> decodeString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (char !== <span class="string">"]"</span>) &#123; stack.push(char); <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="keyword">let</span> cur = stack.pop();</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur !== <span class="string">'['</span>) &#123;</span><br><span class="line">      str = cur + str;</span><br><span class="line">      cur = stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="string">''</span>;</span><br><span class="line">    cur = stack.pop();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>(cur))) &#123;</span><br><span class="line">        <span class="comment">// if the current element is a digit</span></span><br><span class="line">      num = cur + num;</span><br><span class="line">      cur = stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    stack.push(cur);</span><br><span class="line">    stack.push(str.repeat(<span class="built_in">Number</span>(num)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an encoded string, return its decoded string.&lt;/p&gt;
&lt;p&gt;The encoding rule is: &lt;code&gt;k[encoded_string]&lt;/code&gt;, where the &lt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 200. Number of Islands</title>
    <link href="http://yoursite.com/2020/04/11/LeetCode-200-Number-of-Islands/"/>
    <id>http://yoursite.com/2020/04/11/LeetCode-200-Number-of-Islands/</id>
    <published>2020-04-11T02:20:42.000Z</published>
    <updated>2020-04-11T02:54:58.065Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a 2d grid map of <code>'1'</code>s (land) and <code>'0'</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">11110</span><br><span class="line">11010</span><br><span class="line">11000</span><br><span class="line">00000</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">11000</span><br><span class="line">11000</span><br><span class="line">00100</span><br><span class="line">00011</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// trivial DFS method</span></span><br><span class="line"><span class="keyword">var</span> numIslands = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// judge before jump into the further mess of recursion</span></span><br><span class="line">        <span class="keyword">if</span> (grid[x][y] === <span class="string">'1'</span>) &#123;</span><br><span class="line">            grid[x][y] = <span class="string">'0'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; grid.length - <span class="number">1</span>) &#123;</span><br><span class="line">            dfs(x+<span class="number">1</span>, y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (y &lt; grid[x].length - <span class="number">1</span>) &#123;</span><br><span class="line">            dfs(x, y+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; grid.length) &#123;</span><br><span class="line">            dfs(x<span class="number">-1</span>, y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; y &lt; grid[x].length) &#123;</span><br><span class="line">            dfs(x, y<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] === <span class="string">'1'</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                dfs(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a 2d grid map of &lt;code&gt;&#39;1&#39;&lt;/code&gt;s (land) and &lt;code&gt;&#39;0&#39;&lt;/code&gt;s (water), count the number of islands. An island is sur
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 102. Binary Tree Level Order Traversal</title>
    <link href="http://yoursite.com/2020/04/10/LeetCode-102-Binary-Tree-Level-Order-Traversal/"/>
    <id>http://yoursite.com/2020/04/10/LeetCode-102-Binary-Tree-Level-Order-Traversal/</id>
    <published>2020-04-10T07:40:26.000Z</published>
    <updated>2020-04-10T08:09:05.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br />Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><p>Intuitive recursive method :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">levelOrder</span>(<span class="params">root, level=<span class="number">0</span>, result=[]</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root) &#123;</span><br><span class="line"><span class="comment">// init subarray if it doesn't exist</span></span><br><span class="line">    <span class="keyword">let</span> arr = (result[level] = (result[level] || []));</span><br><span class="line">arr.push(root.val);</span><br><span class="line">levelOrder(root.left, level+<span class="number">1</span>, result);</span><br><span class="line">levelOrder(root.right, level+<span class="number">1</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then the BFS method</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">levelOrder</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (queue.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> len = queue.length;</span><br><span class="line">        <span class="keyword">let</span> level = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = queue.pop();</span><br><span class="line">            level.push(temp.val);</span><br><span class="line">            <span class="keyword">if</span>(temp.left) queue.unshift(temp.left);</span><br><span class="line">            <span class="keyword">if</span>(temp.right) queue.unshift(temp.right);</span><br><span class="line">            <span class="comment">// The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.push(level);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the &lt;em&gt;level order&lt;/em&gt; traversal of its nodes’ values. (ie, from left to right, level by level
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
