<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-07T10:47:15.070Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 114. Flatten Binary Tree to Linked List</title>
    <link href="http://yoursite.com/2020/04/07/LeetCode-114-Flatten-Binary-Tree-to-Linked-List/"/>
    <id>http://yoursite.com/2020/04/07/LeetCode-114-Flatten-Binary-Tree-to-Linked-List/</id>
    <published>2020-04-07T09:53:46.000Z</published>
    <updated>2020-04-07T10:47:15.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, flatten it to a linked list in-place.</p><p>For example, given the following tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   5</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">3   4   6</span><br></pre></td></tr></table></figure><p>The flattened tree should look like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line">   \</span><br><span class="line">    3</span><br><span class="line">     \</span><br><span class="line">      4</span><br><span class="line">       \</span><br><span class="line">        5</span><br><span class="line">         \</span><br><span class="line">          6</span><br></pre></td></tr></table></figure></blockquote><p>The trivial recursive method</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">    temp = root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(temp) &#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.left) &#123;</span><br><span class="line">            pre = temp.left;</span><br><span class="line">            <span class="keyword">while</span>(pre.right) &#123;</span><br><span class="line">                pre = pre.right;</span><br><span class="line">            &#125;</span><br><span class="line">            pre.right = temp.right;</span><br><span class="line">            temp.right = temp.left;</span><br><span class="line">            temp.left = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, flatten it to a linked list in-place.&lt;/p&gt;
&lt;p&gt;For example, given the following tree:&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 78. Subsets</title>
    <link href="http://yoursite.com/2020/04/06/LeetCode-78-Subsets/"/>
    <id>http://yoursite.com/2020/04/06/LeetCode-78-Subsets/</id>
    <published>2020-04-06T06:24:04.000Z</published>
    <updated>2020-04-06T10:02:29.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p><p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><h4 id="section"></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subsets= <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    generateSubsets([],<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">generateSubsets</span>(<span class="params">temp,index</span>) </span>&#123;</span><br><span class="line">        res.push(temp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=index;i&lt;nums.length;i++) &#123;</span><br><span class="line">            generateSubsets([...temp,nums[i]],i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then I found a more concise version:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subsets = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> res = [[]]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">res.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">res.push([...item, nums[i]])</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a set of &lt;strong&gt;distinct&lt;/strong&gt; integers, &lt;em&gt;nums&lt;/em&gt;, return all possible subsets (the power set).&lt;/p&gt;
&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 791. Custom Sort String</title>
    <link href="http://yoursite.com/2020/04/04/LeetCode-791-Custom-Sort-String/"/>
    <id>http://yoursite.com/2020/04/04/LeetCode-791-Custom-Sort-String/</id>
    <published>2020-04-04T12:50:50.000Z</published>
    <updated>2020-04-05T04:01:12.611Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>S</code> and <code>T</code> are strings composed of lowercase letters. In <code>S</code>, no letter occurs more than once.</p><p><code>S</code> was sorted in some custom order previously. We want to permute the characters of <code>T</code> so that they match the order that <code>S</code> was sorted. More specifically, if <code>x</code> occurs before <code>y</code> in <code>S</code>, then <code>x</code> should occur before <code>y</code> in the returned string.</p><p>Return any permutation of <code>T</code> (as a string) that satisfies this property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example :</span><br><span class="line">Input: </span><br><span class="line">S &#x3D; &quot;cba&quot;</span><br><span class="line">T &#x3D; &quot;abcd&quot;</span><br><span class="line">Output: &quot;cbad&quot;</span><br><span class="line">Explanation: </span><br><span class="line">&quot;a&quot;, &quot;b&quot;, &quot;c&quot; appear in S, so the order of &quot;a&quot;, &quot;b&quot;, &quot;c&quot; should be &quot;c&quot;, &quot;b&quot;, and &quot;a&quot;. </span><br><span class="line">Since &quot;d&quot; does not appear in S, it can be at any position in T. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; are also valid outputs.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>S</code> has length at most <code>26</code>, and no character is repeated in <code>S</code>.</li><li><code>T</code> has length at most <code>200</code>.</li><li><code>S</code> and <code>T</code> consist of lowercase letters only.</li></ul></blockquote><p>Well there is the no loop no set solution :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customSortString = <span class="function"><span class="keyword">function</span>(<span class="params">S, T</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// break S &amp; T into array of chars</span></span><br><span class="line">    <span class="keyword">let</span> first = S.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> second = T.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(first.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> index = second.indexOf(first[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// if the element exists</span></span><br><span class="line">            res.push(second[index]);</span><br><span class="line">            second.splice(index,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.shift();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125; </span><br><span class="line">    res.push(...second);</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>First my program was like this and it failed :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customSortString = <span class="function"><span class="keyword">function</span>(<span class="params">S, T</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// break S &amp; T into array of chars</span></span><br><span class="line">    <span class="keyword">let</span> first = S.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> second = T.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(first.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> index = second.indexOf(first[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// if the element exists</span></span><br><span class="line">            res.push(second[index]);</span><br><span class="line">            second.splice(index,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.shift();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125; </span><br><span class="line">    res.push(second);</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The failed case is :</p><blockquote><p>Input</p><p>"disqyr" "iwyrysqrdj"</p><p>Output</p><p>"disqyyrrw,j"</p><p>Expected</p><p>"disqyyrrjw"</p></blockquote><p>So I wrote a testing program :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="string">"disqyr"</span>;</span><br><span class="line">T = <span class="string">"iwyrysqrdj"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customSortString = <span class="function"><span class="keyword">function</span>(<span class="params">S, T</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// break S &amp; T into array of chars</span></span><br><span class="line">    <span class="keyword">let</span> first = S.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> second = T.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(first.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> index = second.indexOf(first[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// if the element exists</span></span><br><span class="line">            res.push(second[index]);</span><br><span class="line">            second.splice(index,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>,second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first.shift();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>,first)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.push(second);</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(customSortString(S,T));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> [</span><br><span class="line">  <span class="string">'i'</span>, <span class="string">'w'</span>, <span class="string">'y'</span>,</span><br><span class="line">  <span class="string">'r'</span>, <span class="string">'y'</span>, <span class="string">'s'</span>,</span><br><span class="line">  <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'j'</span></span><br><span class="line">]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'i'</span>, <span class="string">'s'</span>, <span class="string">'q'</span>, <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [</span><br><span class="line">  <span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>,</span><br><span class="line">  <span class="string">'y'</span>, <span class="string">'s'</span>, <span class="string">'q'</span>,</span><br><span class="line">  <span class="string">'r'</span>, <span class="string">'j'</span></span><br><span class="line">]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'s'</span>, <span class="string">'q'</span>, <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [</span><br><span class="line">  <span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>,</span><br><span class="line">  <span class="string">'y'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>,</span><br><span class="line">  <span class="string">'j'</span></span><br><span class="line">]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'q'</span>, <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'y'</span>, <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'r'</span>, <span class="string">'y'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">1</span> [ <span class="string">'r'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'r'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">2</span> [ <span class="string">'w'</span>, <span class="string">'j'</span> ]</span><br><span class="line"><span class="number">1</span> []</span><br><span class="line">disqyyrrw,j</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Now it's clear that the rest of second array needs to be turned into a string.</p><p>And <code>Three dots ( … ) in JavaScript</code> occurs in a function call or alike, it's called a "spread operator" and expands an array into a list.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; are strings composed of lowercase letters. In &lt;code&gt;S&lt;/code&gt;, no letter occurs more than o
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 33. Search in Rotated Sorted Array</title>
    <link href="http://yoursite.com/2020/04/04/LeetCode-33-Search-in-Rotated-Sorted-Array/"/>
    <id>http://yoursite.com/2020/04/04/LeetCode-33-Search-in-Rotated-Sorted-Array/</id>
    <published>2020-04-04T07:27:28.000Z</published>
    <updated>2020-04-04T12:03:13.497Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm's runtime complexity must be in the order of <strong><em>O</em>(log <em>n</em>).</strong></p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></blockquote><p>Well it already says O(log n) so we must take divide and conquer into consideration .</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((left+right)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums[mid]===target) <span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums[left]&lt;=nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left]&lt;=target &amp;&amp; target &lt;=nums[mid]) &#123;</span><br><span class="line">                right = mid<span class="number">-1</span>;</span><br><span class="line">                <span class="comment">// target must be in the left part</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                <span class="comment">// target must be in the right part</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., &lt;code&gt;[0,1,2,4,
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>2020.4.4 How Chinese websites become balck and white</title>
    <link href="http://yoursite.com/2020/04/04/2020-4-4-How-Chinese-websites-become-balck-and-white/"/>
    <id>http://yoursite.com/2020/04/04/2020-4-4-How-Chinese-websites-become-balck-and-white/</id>
    <published>2020-04-04T03:11:31.000Z</published>
    <updated>2020-04-04T07:28:19.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>If you don't see any images pls wait a sec cuz I use root-relative Link to store images. It might take a while to load.</p></blockquote><p>As a heavy Douban user, I checked Douban web ver first.</p><p><img src="/images/douban-before-4-4.png" /></p><p>I was doing an all-nighter and boom , the world turned colorless.</p><p><img src="/images/douban-after-4-4.png" /></p><p>One of my friends told me that use <code>document.body.classList.remove('gray-mode')</code> can reignite the original view. I tried and it worked !</p><p>So I opened my Firefox dev tools and looked into the code.</p><p><img src="/images/douban-before-code-4-4.png" /></p><p>It quite clear that the <code>gray-mode</code> class in the <code>body</code> works the magic here.</p><p>Basically there are three method , all filters.</p><p>But when I refresh the page , the original view still sneaks in first for about half a sec so It's not perfect.</p><p>Also I searched for "grayscale website solutions" and found this on <a href="https://stackoverflow.com/questions/30192221/is-it-possible-to-turn-an-entire-webpage-to-grayscale-using-css" target="_blank" rel="noopener">Stackoverflow</a></p><p>It suggests :</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* No need to set the filter on every single element, You can apply the filter on HTML.  */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">filter</span>: gray; <span class="comment">/* IE6-9 */</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;If you don&#39;t see any images pls wait a sec cuz I use root-relative Link to store images. It might take a while to load.&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 128. Longest Consecutive Sequence</title>
    <link href="http://yoursite.com/2020/04/03/LeetCode-128-Longest-Consecutive-Sequence/"/>
    <id>http://yoursite.com/2020/04/03/LeetCode-128-Longest-Consecutive-Sequence/</id>
    <published>2020-04-03T07:32:12.000Z</published>
    <updated>2020-04-03T09:53:10.554Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p><p>Your algorithm should run in O(<em>n</em>) complexity.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [100, 4, 200, 1, 3, 2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.</span><br></pre></td></tr></table></figure></blockquote><p>Use hash map to decrease the time complexity.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> dict = <span class="keyword">new</span> <span class="built_in">Set</span>(nums);</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> increase = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (dict.has(nums[i] + increase)) &#123;</span><br><span class="line">            increase++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">Math</span>.max(res,increase);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Strictly speaking , It's not exactly O(n) ...</p><p>So there is another method I found at the discussion section :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestConsecutive</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> lens = &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lens[n] != <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> l = lens[n - <span class="number">1</span>] || <span class="number">0</span>;   <span class="comment">// left length</span></span><br><span class="line">    <span class="keyword">const</span> r = lens[n + <span class="number">1</span>] || <span class="number">0</span>;   <span class="comment">// right length</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> len = l + r + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extend the length to the boundaries</span></span><br><span class="line">    lens[n - l] = len;</span><br><span class="line">    lens[n] = len;</span><br><span class="line">    lens[n + r] = len;</span><br><span class="line"></span><br><span class="line">    max = <span class="built_in">Math</span>.max(max, len);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is a strictly O(n) method.</p><p>And the ranking rockets to 98% !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an unsorted array of integers, find the length of the longest consecutive elements sequence.&lt;/p&gt;
&lt;p&gt;Your algorithm sho
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 5. Longest Palindromic Substring</title>
    <link href="http://yoursite.com/2020/04/02/LeetCode-5-Longest-Palindromic-Substring/"/>
    <id>http://yoursite.com/2020/04/02/LeetCode-5-Longest-Palindromic-Substring/</id>
    <published>2020-04-02T07:31:50.000Z</published>
    <updated>2020-04-02T09:12:47.267Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;babad&quot;</span><br><span class="line">Output: &quot;bab&quot;</span><br><span class="line">Note: &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;cbbd&quot;</span><br><span class="line">Output: &quot;bb&quot;</span><br></pre></td></tr></table></figure></blockquote><h4 id="js-substring"><a class="markdownIt-Anchor" href="#js-substring"></a> JS <code>substring()</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.substring(indexStart[, indexEnd])</span><br></pre></td></tr></table></figure><h4 id="parameters"><a class="markdownIt-Anchor" href="#parameters"></a> Parameters</h4><ul><li><p><code>indexStart</code></p><p>The index of the first character to include in the returned substring.</p></li><li><p><code>indexEnd</code> Optional</p><p>The index of the first character to exclude from the returned substring.</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s.length&lt;<span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> maxStr = <span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">            <span class="comment">// two situations: ABA &amp; AA so is str[i]&amp;str[i] or str[i]&amp;str[i+1]</span></span><br><span class="line">            <span class="keyword">let</span> left = i;</span><br><span class="line">            <span class="keyword">let</span> right = i+j;</span><br><span class="line">            <span class="keyword">while</span>(s[left] &amp;&amp; s[left]===s[right])&#123;</span><br><span class="line">                left--;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// when it stops the variables are : s[real_left-1]s[real_right+1]</span></span><br><span class="line">          <span class="comment">// so the length is real_right-real_left+1=(real_right+1)-(real_left-1)-2+1=right-left-1</span></span><br><span class="line">            <span class="keyword">if</span>((right-left<span class="number">-1</span>)&gt;maxStr.length) &#123;</span><br><span class="line">                maxStr = s.substring(left+<span class="number">1</span>,right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxStr;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a string &lt;strong&gt;s&lt;/strong&gt;, find the longest palindromic substring in &lt;strong&gt;s&lt;/strong&gt;. You may assume that the max
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 105. Construct Binary Tree from Preorder and Inorder Traversal</title>
    <link href="http://yoursite.com/2020/04/01/LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/"/>
    <id>http://yoursite.com/2020/04/01/LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</id>
    <published>2020-04-01T04:27:18.000Z</published>
    <updated>2020-04-01T05:02:22.811Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>\105. Construct Binary Tree from Preorder and Inorder Traversal</p><p>Medium</p><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p><p><strong>Note:</strong> You may assume that duplicates do not exist in the tree.</p><p>For example, given</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preorder &#x3D; [3,9,20,15,7]</span><br><span class="line">inorder &#x3D; [9,3,15,20,7]</span><br></pre></td></tr></table></figure><p>Return the following binary tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></blockquote><p>The <code>shift()</code> method removes the <strong>first</strong> element from an array and returns that removed element.</p><p>Use recursive method to build binary trees.</p><p>Recall how we build the tree from preorder &amp; inorder info</p><p>First step : find the position of the first element from the preorder list in the inorder list</p><p>3 | 9 | 20 15 7</p><p>9 | 3 | 15 20 7</p><p>Then it shows that the root is 3 , left tree is [9] , right tree is [20,15,7]</p><p>So step into the recursion ...</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">preorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">inorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> recursiveBuilder =  <span class="function">(<span class="params">start,end</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> t = preorder.shift();</span><br><span class="line">        <span class="keyword">let</span> root = <span class="keyword">new</span> TreeNode(t);</span><br><span class="line">        root.left = recursiveBuilder(start,inorder.indexOf(t)<span class="number">-1</span>);</span><br><span class="line">        root.right = recursiveBuilder(inorder.indexOf(t)+<span class="number">1</span>,end);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> recursiveBuilder(<span class="number">0</span>,inorder.length<span class="number">-1</span>);x</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;\105. Construct Binary Tree from Preorder and Inorder Traversal&lt;/p&gt;
&lt;p&gt;Medium&lt;/p&gt;
&lt;p&gt;Given preorder and inorder traversal of
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 19. Remove Nth Node From End of List</title>
    <link href="http://yoursite.com/2020/03/31/LeetCode-146-LRU-Cache/"/>
    <id>http://yoursite.com/2020/03/31/LeetCode-146-LRU-Cache/</id>
    <published>2020-03-31T06:59:22.000Z</published>
    <updated>2020-03-31T15:05:48.940Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Given <em>n</em> will always be valid.</p><p><strong>Follow up:</strong></p><p>Could you do this in one pass?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = head;</span><br><span class="line">    <span class="keyword">let</span> curr = head;</span><br><span class="line">    <span class="keyword">let</span> prev = head;</span><br><span class="line">  <span class="comment">// one pass =&gt; extra pointers to record the positions</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// counter : the length of the list</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(t) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i === n) &#123;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        t = t.next;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(n === counter) &#123;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    prev.next = curr.next;</span><br><span class="line">  <span class="comment">// use two pointers to remove the element</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a linked list, remove the &lt;em&gt;n&lt;/em&gt;-th node from the end of list and return its head.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>2020暑期实习申请全记录&amp;反思</title>
    <link href="http://yoursite.com/2020/03/30/2020%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%8F%8D%E6%80%9D/"/>
    <id>http://yoursite.com/2020/03/30/2020%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%8F%8D%E6%80%9D/</id>
    <published>2020-03-30T12:54:30.000Z</published>
    <updated>2020-04-01T11:35:00.988Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景：</p><p>不知名211 / 药学方向的信管 / 大三 / 无实习 / 无竞赛 / 无paper</p></blockquote><p><del>总之就是很弱，担心申请学校和工作都没人捞的那种</del></p><p>直到去年12月才真正开始准备转码……（就是平时不刷题没有准备的意思</p><p>寒假一个是准备GRE（疫情，推迟到七月了）一个是精神状态非常不好，几乎没有准备技术方向的事情，每天很焦虑，完全不能集中精神，睡觉也睡不好，所以现在也不是特别后悔当时没有准备，毕竟精神状况也不允许</p><p>直到各大公众号开始推送暑期实习的东西了我才缓过神来，开始改简历，投简历，但是因为事情太多没时间，还是没有开始刷题</p><p>很惭愧，自己本来就不是科班出身，也没有经历还这么懒……</p><p>先是海投了<strong>技术岗</strong></p><p>腾讯阿里网易游戏字节跳动ThoughtWorks宝洁什么的都投了一遍（宝洁是IT部</p><p>无音讯（校友没什么内推，当时也没想着说要去 <strong>reach out</strong>，没有经验，现在很后悔，投了就不能改，<strong>希望学弟学妹在投之前一定要找内推，起码不用做奇奇怪怪的题目</strong> 可以找企业内部员工的学长学姐，网友，内推群，都行，也可以问问自己家人，不内推真的血亏）</p><p><strong>腾讯事业群一定要细细选</strong>，不急，好歹听完宣讲会…… 我就是太急了，一顿瞎操作，最后哭晕在厕所……</p><p>杳 无 音 讯</p><p>终于有一天上企业微信看到了面试官加我 是微信iOS开发的小哥 立马约了第二天下午面试</p><p>不出意料的挂了（<a href="https://yuanruqian.github.io/2020/03/22/2020-%E5%BE%AE%E4%BF%A1%E7%A7%BB%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0-%E6%8C%82%E7%BB%8F/" target="_blank" rel="noopener">详见我的暑期实习申请伤痕文学</a>）</p><p>然后同一天晚上宝洁发邮件告诉我我也挂了（微笑</p><p>之后打起精神，在豆瓣找了位刷题的姐妹，每天至少一题LeetCode</p><p><del>觉得不行，不能失学又失业，不想啃老，否则我怎么还清我妈对我的投资</del></p><p>开始海投其他岗</p><p>微软上海 Azure Data Governance PM / 谷歌跨境电商的海星计划 / 欧莱雅 IT / 联合利华 供应链 / MKT</p><p>目前联合利华给了线上面，等结果中</p><h4 id="微信ui开发-电话一面">4.1 微信UI开发 电话一面</h4><p>问了 CSS 知识点 我答不上来……除了 box model 和 居中 都没啥印象……</p><ul><li>Chrome 最小字体 ： 12px （不会</li><li>CSS 几种布局 （不会</li><li>box-sizing 干啥的（瞎猜</li><li>……</li></ul><p>问了 JS 水平 如实回答 LeetCode 刷题的水平……</p><p>问我有什么要问的 我就问了前端和UI的区别 Frozen UI 这种 UI组件库是前端还是UI干的</p><p>回答是 其实技能树差不多 UI前端都能干 更推荐前端干 但是UI你想做的好 前端技能不能少</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;背景：&lt;/p&gt;
&lt;p&gt;不知名211 / 药学方向的信管 / 大三 / 无实习 / 无竞赛 / 无paper&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;总之就是很弱，担心申请学校和工作都没人捞的那种&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;直到去年12月
      
    
    </summary>
    
    
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Work" scheme="http://yoursite.com/tags/Work/"/>
    
      <category term="Internship" scheme="http://yoursite.com/tags/Internship/"/>
    
  </entry>
  
  <entry>
    <title>820. Short Encoding of Words</title>
    <link href="http://yoursite.com/2020/03/30/LeetCode-820-Short-Encoding-of-Words/"/>
    <id>http://yoursite.com/2020/03/30/LeetCode-820-Short-Encoding-of-Words/</id>
    <published>2020-03-30T02:28:08.000Z</published>
    <updated>2020-03-30T11:36:16.452Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a list of words, we may encode it by writing a reference string <code>S</code> and a list of indexes <code>A</code>.</p><p>For example, if the list of words is <code>["time", "me", "bell"]</code>, we can write it as <code>S = "time#bell#"</code> and <code>indexes = [0, 2, 5]</code>.</p><p>Then for each index, we will recover the word by reading from the reference string from that index until we reach a <code>"#"</code> character.</p><p>What is the length of the shortest reference string S possible that encodes the given words?</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: words &#x3D; [&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: S &#x3D; &quot;time#bell#&quot; and indexes &#x3D; [0, 2, 5].</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol type="1"><li><code>1 &lt;= words.length &lt;= 2000</code>.</li><li><code>1 &lt;= words[i].length &lt;= 7</code>.</li><li>Each word has only lowercase letters.</li></ol></blockquote><h4 id="an-intuitive-brute-force-solution-remove-shorter-words">An intuitive brute force solution : remove shorter words</h4><p>Use <code>arrayObject.slice(start,end)</code> to get certain slice of a string</p><p>Simply remove the shorter words from the original list.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">words</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minimumLengthEncoding = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nl = <span class="keyword">new</span> <span class="built_in">Set</span>(words);</span><br><span class="line"><span class="comment">// create a hash set to simplify the program</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> nl ) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;i.length;j++) &#123;</span><br><span class="line">            <span class="keyword">let</span> t = i.slice(j);</span><br><span class="line">            <span class="keyword">if</span> (nl.has(t)) &#123;</span><br><span class="line">                nl.delete(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> res =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> nl) &#123;</span><br><span class="line">        res += i.length+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Though it's basically a <code>O(n^2)</code> method , the ranking score is pretty good 🤔</p><h4 id="trie-method">Trie method</h4><p>Sort the Strings based on their length in the descending order</p><p>The <strong><code>charCodeAt()</code></strong> method returns an integer between <code>0</code> and <code>65535</code> representing the UTF-16 code unit at the given index.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minimumLengthEncoding = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    words.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b.length &gt; a.length);</span><br><span class="line">    <span class="comment">// First sort the words in descending order bcz 'em' is in 'emit' yet 'emit' is not in 'em'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> words) &#123;</span><br><span class="line">        <span class="keyword">let</span> word = i;</span><br><span class="line">        <span class="keyword">let</span> path = root;</span><br><span class="line">        <span class="keyword">let</span> isNew = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = word.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">          <span class="comment">// start from the end bcz 'me' is not gonna match with the first part of 'time', let's consider only the suffix!</span></span><br><span class="line">            <span class="keyword">let</span> ch = word.charCodeAt(j) - <span class="number">97</span>;</span><br><span class="line">            <span class="keyword">if</span>(!path.next[ch]) &#123;</span><br><span class="line">                <span class="keyword">let</span> newNode = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                path.next[ch] = newNode;</span><br><span class="line">                isNew = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            path = path.next[ch];</span><br><span class="line">        &#125;</span><br><span class="line">        ans += (isNew ? <span class="number">1</span> + word.length : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">TrieNode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Trie is why type something into a search engine and it will show a list of related words !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a list of words, we may encode it by writing a reference string &lt;code&gt;S&lt;/code&gt; and a list of indexes &lt;code&gt;A&lt;/code&gt;.&lt;/
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 31. Next Permutation</title>
    <link href="http://yoursite.com/2020/03/29/LeetCode-31-Next-Permutation/"/>
    <id>http://yoursite.com/2020/03/29/LeetCode-31-Next-Permutation/</id>
    <published>2020-03-29T05:33:23.000Z</published>
    <updated>2020-03-29T08:03:19.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p><p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p><p>The replacement must be <strong><a href="http://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> and use only constant extra memory.</p><p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,2,3 → 1,3,2</span><br><span class="line">3,2,1 → 1,2,3</span><br><span class="line">1,1,5 → 1,5,1</span><br></pre></td></tr></table></figure></blockquote><p>嗯……好像没什么特别好的办法？？？</p><p>就是找规律？？？</p><p>先考虑从右到左非严格递增的</p><p>比如 <code>321</code> 那么这时候就要重新来从最小的开始 <code>123</code> 显然前后交换就可以了</p><p>所以不是递减的就是需要交换的</p><p>比如 <code>23657</code>  显然第一个 outlier 为 5 找一个比 5 更大的最小值 是 7 换一下 5和7得到 <code>23675</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> nextPermutation = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len<span class="number">-2</span>; i &gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> min = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[min] &gt; nums[j]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> t = nums[i];</span><br><span class="line">            nums[i] = nums[min];</span><br><span class="line">            nums[min] = t;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> t = nums[i];</span><br><span class="line">            nums[i] = nums[len - i - <span class="number">1</span>];</span><br><span class="line">            nums[len - i - <span class="number">1</span>] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我就光荣的 fail 了 🐶</p><p>死在了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Wrong Answer</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line"></span><br><span class="line">[1,3,2]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line">[2,3,1]</span><br><span class="line"></span><br><span class="line">Expected</span><br><span class="line"></span><br><span class="line">[2,1,3]</span><br></pre></td></tr></table></figure><p>因为我之前的例子是后两位交换，再考虑一下更多位数的情况，比如 <code>2463</code></p><p>第一次交换完得到 <code>2643</code> 显然 <code>2634</code> 更小……</p><p>我的理解是 交换完后， 交换位比原来大了，而交换位后的数字必然是从左到右降序，如果将这部分数字镜面交换变成从左到右升序 (<code>43</code>=&gt;<code>34</code>) 那么就是这部分数字能组成的最小数字</p><p>我应该是遗漏了这部分才出错的</p><p>重新修改后AC：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nextPermutation = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            count = i;</span><br><span class="line">            <span class="keyword">let</span> min = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = len - <span class="number">1</span>; j &gt;= min; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; nums[i]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> t = nums[i];</span><br><span class="line">            nums[i] = nums[min];</span><br><span class="line">            nums[min] = t;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; len / <span class="number">2</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">let</span> t = nums[k];</span><br><span class="line">            nums[k] = nums[len - k - <span class="number">1</span>];</span><br><span class="line">            nums[len - k - <span class="number">1</span>] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> limit = <span class="built_in">Math</span>.ceil((len - count) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">1</span>; k &lt; limit; k++) &#123;</span><br><span class="line">            <span class="keyword">let</span> t = nums[count + k];</span><br><span class="line">            nums[count + k] = nums[len - k];</span><br><span class="line">            nums[len - k] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Implement &lt;strong&gt;next permutation&lt;/strong&gt;, which rearranges numbers into the lexicographically next greater permutation of
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 279. Perfect Squares</title>
    <link href="http://yoursite.com/2020/03/28/LeetCode-279-Perfect-Squares/"/>
    <id>http://yoursite.com/2020/03/28/LeetCode-279-Perfect-Squares/</id>
    <published>2020-03-28T03:34:01.000Z</published>
    <updated>2020-03-28T05:45:33.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a positive integer <em>n</em>, find the least number of perfect square numbers (for example, <code>1, 4, 9, 16, ...</code>) which sum to <em>n</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: n &#x3D; 12</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: 12 &#x3D; 4 + 4 + 4.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: n &#x3D; 13</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: 13 &#x3D; 4 + 9.</span><br></pre></td></tr></table></figure></blockquote><p>思路：</p><p><s>又是DP…… 哎……</s></p><p>一个数组 <code>countPS[n]</code> 记录一下  1-n 每个数字可以拆成 完美平方的 最小值的数目</p><p>递归是 <code>countPS[i]=min(countPS[i],countPS[i-j*j]+1)</code></p><p>开始手撕</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numSquares = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">const</span> countPS = <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(<span class="literal">Infinity</span>);</span><br><span class="line">    countPS[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    countPS[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;i-j*j&gt;=<span class="number">0</span>;j++) &#123;</span><br><span class="line">            countPS[i]=<span class="built_in">Math</span>.min(countPS[i],countPS[i-j*j]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> countPS[n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就，比较平凡的想法</p><p>唯一的收获是学习了 JS 数组自动填充 <code>Array.prototype.fill()</code></p><p>评论区惊现数学学霸降维打击：<a href="https://leetcode.com/problems/perfect-squares/discuss/71488/Summary-of-4-different-solutions-(BFS-DP-static-DP-and-mathematics)" target="_blank" rel="noopener">https://leetcode.com/problems/perfect-squares/discuss/71488/Summary-of-4-different-solutions-(BFS-DP-static-DP-and-mathematics)</a></p><p><s>拉格朗日四平方和定理，维基这里有点不讲人话，我更推荐阅读：<a href="https://www.changhai.org/articles/science/mathematics/four_square_theorem.php" target="_blank" rel="noopener">https://www.changhai.org/articles/science/mathematics/four_square_theorem.php</a></s></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a positive integer &lt;em&gt;n&lt;/em&gt;, find the least number of perfect square numbers (for example, &lt;code&gt;1, 4, 9, 16, ...&lt;/c
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Puzzle | Set 35 (2 Eggs and 100 Floors) &amp;&amp; Egg Dropping Puzzle | DP-11</title>
    <link href="http://yoursite.com/2020/03/27/Puzzle-Set-35-2-Eggs-and-100-Floors/"/>
    <id>http://yoursite.com/2020/03/27/Puzzle-Set-35-2-Eggs-and-100-Floors/</id>
    <published>2020-03-27T05:07:18.000Z</published>
    <updated>2020-03-27T11:22:21.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The following is a description of the instance of this famous puzzle involving 2 eggs and a building with 100 floors.</p><p>Suppose that we wish to know which stories in a 100-story building  are safe to drop eggs from, and which will cause the eggs to break on  landing. What strategy should be used to drop eggs such that total  number of drops in worst case is minimized and we find the required  floor.</p><p>We may make a few assumptions:</p><ul><li>An egg that survives a fall can be used again.</li><li>A broken egg must be discarded.</li><li>The effect of a fall is the same for all eggs.</li><li>If an egg breaks when dropped, then it would break if dropped from a higher floor.</li><li>If an egg survives a fall then it would survive a shorter fall.</li></ul></blockquote><p>经典的🐶家面试题</p><p>直觉当然是二分……但是二分的 worst case 太惨烈了——如果是第一次50楼碎了，得从1一直试验到49层，worst case 50 层，这个想法怕是说出来面试官脸都要黑了…… </p><p>三分四分等等同理…… </p><p>难道要 N分 都循环一遍吗？</p><p><del>这太复杂了我也写不出来</del></p><p>那就……找规律？找 worst case 就可以了</p><p>假设第一次从 x​ 层扔下去 </p><p>没碎 于是继续往楼上找 此时已经扔了1次 碎了最坏需要测试 x​ 次</p><p>那么第二次 应该找 x+(x-1)​ 层扔下去</p><p>因为 如果第二次碎了 那么最坏的情况需要测试 x+(x-1)-x+1​ 一共 ​x​ 次 不应该比 ​x​ 次更多了</p><p>往后也是一样</p><p>所以最坏的情况是 100 层 全部测试一遍</p><p>最后一次最理想的情况应该只有一层楼可以测</p><p>可得 $ x+(x-1)+(x-2)+(x-3)+…+1\geq100$</p><p>$\frac{x(x+1)}{2}\geq100$</p><p>所以现在就简单了，循环找一个满足条件的最小的数字就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMinTImes</span>(<span class="params">floor_total</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sq = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(floor_total));</span><br><span class="line">    <span class="keyword">var</span> res =sq;</span><br><span class="line">    <span class="keyword">while</span>(res*(res+<span class="number">1</span>)/<span class="number">2</span>&lt;<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getMinTImes(<span class="number">100</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><p>所以最差的情况，从14层开始扔</p><p>看看每次开始扔的楼层：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">14</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">    temp += i;</span><br><span class="line">    <span class="keyword">if</span>(temp&gt;<span class="number">100</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span> <span class="comment">// 第一次</span></span><br><span class="line"><span class="number">27</span> </span><br><span class="line"><span class="number">39</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">69</span></span><br><span class="line"><span class="number">77</span></span><br><span class="line"><span class="number">84</span></span><br><span class="line"><span class="number">90</span></span><br><span class="line"><span class="number">95</span> <span class="comment">// </span></span><br><span class="line"><span class="number">99</span> <span class="comment">// 最后一次</span></span><br></pre></td></tr></table></figure><p>所以说，从14层开始扔，蛋碎了 ➡️ 剩下13层都试一遍 ➡️ 一共 14次</p><p>蛋没碎 ➡️ 从 27 层再次开始扔 ➡️ 蛋碎了 ➡️ 剩下 27-14+1 一共 14次</p><p>……</p><p>综上，最优解对于最坏的情况为 14 次</p><hr><p>扩展一下</p><blockquote><p>现在讨论 k 层楼 和 n个鸡蛋的情况</p></blockquote><p>思路：1-k 每层楼都扔一次，递归计算一下 worst case，记下 worst case 最小的</p><p><del>不能再抖机灵了，因为我想不出来怎么找规律了</del></p><p>1) If the egg breaks after dropping from xth floor, then we only need to check for floors lower than x with remaining eggs; so the problem  reduces to x-1 floors and n-1 eggs<br> 2) If the egg doesn’t break after dropping from the xth floor, then we  only need to check for floors higher than x; so the problem reduces to  k-x floors and n eggs.</p><p>如果从 x 层扔下去，要么  碎 要么 不碎</p><ul><li><p>鸡蛋碎了：问题变成 x-1 楼的建筑物 和 n-1 个 蛋</p></li><li><p>没有碎：问题变成 楼上的 k-x 层楼 和 n 个蛋</p></li></ul><p>同时要保证 worst case 的尝试数目最小，所以要考虑上面两种情况的最大值那个更小 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eggDrop(n, k) = <span class="number">1</span> + min&#123;max(eggDrop(n - <span class="number">1</span>, x - <span class="number">1</span>), eggDrop(n, k - x))</span><br></pre></td></tr></table></figure><p>比如 n=2 , k=10</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eggDrop</span>(<span class="params">n,k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;<span class="number">2</span> || n==<span class="number">1</span>) <span class="keyword">return</span> k;</span><br><span class="line">    <span class="comment">// 0层 1层 或者只有1个鸡蛋 都只能一层层实验</span></span><br><span class="line">    <span class="keyword">var</span> min=<span class="built_in">Number</span>.MAX_SAFE_INTEGER ,res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=k;i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        res=<span class="built_in">Math</span>.max(eggDrop(n<span class="number">-1</span>,i<span class="number">-1</span>),eggDrop(n,k-i));</span><br><span class="line">        <span class="built_in">console</span>.log(eggDrop(n<span class="number">-1</span>,i<span class="number">-1</span>),eggDrop(n,k-i));</span><br><span class="line">        <span class="keyword">if</span> (res &lt; min) min = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(eggDrop(<span class="number">2</span>,<span class="number">10</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p> 但是！这个方法计算 n=2,k=100 不可取</p><p><del>我跑了几十秒还没显示所以是递归太深了吧，打印了一下每次的计算量，k=10也很惊人惹……</del></p><p>因为有很多重复的东西</p><p>比如 <code>eggDrop(2,2)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">i = <span class="number">1</span> res = max (<span class="function">(<span class="params"><span class="number">1</span>,<span class="number">0</span></span>),(<span class="params"><span class="number">2</span>,<span class="number">3</span></span>)) =&gt;</span> (<span class="number">2</span>,<span class="number">3</span>) 里面 i=<span class="number">1</span>时候也要计算 max((<span class="number">1</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">i = <span class="number">2</span> res = max ((<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">(<span class="number">2</span>,<span class="number">2</span>)计算了多次</span><br></pre></td></tr></table></figure><p>所以说，优化一下，储存在数组里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">2</span>, k = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eggRecords = [];         </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;          </span><br><span class="line">    eggRecords[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(i);    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= k; j++) &#123;      </span><br><span class="line">        eggRecords[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// eggRecords[鸡蛋数][楼层数] 先声明一下数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显然 1 个蛋 eggRecords[1][x]=x</span></span><br><span class="line"><span class="comment">// 楼层 1 或 0 eggRecords[i][x]=i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line">    eggRecords[<span class="number">1</span>][i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    eggRecords[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    eggRecords[i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eggDrop</span>(<span class="params">n,k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;<span class="number">2</span> || n===<span class="number">1</span>) <span class="keyword">return</span> k;</span><br><span class="line">    <span class="comment">// 0层 1层 或者只有1个鸡蛋 都只能一层层实验</span></span><br><span class="line">    <span class="keyword">var</span> res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j=<span class="number">2</span>;j&lt;=k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            eggRecords[i][j]=<span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> k=<span class="number">1</span>;k&lt;=j;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                res = <span class="number">1</span> + <span class="built_in">Math</span>.max(eggRecords[i<span class="number">-1</span>][k<span class="number">-1</span>],eggRecords[i][j-k]);</span><br><span class="line">                <span class="keyword">if</span> (res &lt; eggRecords[i][j]) eggRecords[i][j] =res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> eggRecords[n][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(eggDrop(n,k));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p><del>迫真被 DP 掏空身体</del></p><p>感想：<br>有递归的能优化就优化，记得每次结果放在函数里</p><p><del>DP 好难</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;The following is a description of the instance of this famous puzzle involving 2 eggs and a building with 100 floors.&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 338. Counting Bits</title>
    <link href="http://yoursite.com/2020/03/26/LeetCode-338-Counting-Bits/"/>
    <id>http://yoursite.com/2020/03/26/LeetCode-338-Counting-Bits/</id>
    <published>2020-03-26T11:39:21.000Z</published>
    <updated>2020-03-26T12:53:50.659Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a non negative integer number <strong>num</strong>. For every numbers <strong>i</strong> in the range <strong>0 ≤ i ≤ num</strong> calculate the number of 1’s in their binary representation and return them as an array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: [0,1,1]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output: [0,1,1,2,1,2]</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><ul><li>It is very easy to come up with a solution with run time <strong>O(n*sizeof(integer))</strong>. But can you do it in linear time <strong>O(n)</strong> /possibly in a single pass?</li><li>Space complexity should be <strong>O(n)</strong>.</li><li>Can you do it like a boss? Do it without using any builtin function like <strong>__builtin_popcount</strong> in c++ or in any other language.</li></ul></blockquote><p>思路一：</p><p>很直觉很偷懒的方法</p><p>二进制字符串数一数1有多少个 </p><p><del>不过我怀疑这么写会被面试官手撕</del></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= num; i++)</span><br><span class="line">        result.push(<span class="built_in">Number</span>(i).toString(<span class="number">2</span>).replace(<span class="regexp">/0/g</span>, <span class="string">''</span>).length);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路二：</p><p> <del>降维靠数学出现了</del></p><p>由于是找出二进制形式中的1 很自然联想到规律</p><p>前两个一组 [0,1]</p><p>前四个一组 [0,1,1,2]</p><p>前八个一组 [0,1,1,2,1,2,2,3]</p><p>前十六个一组 [0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4]</p><p>把这四组对半分开 后者都是前者的基础再加上1</p><p>容易看出规律 某个数对应的1的数目 和它折半的数字对应的1 有关</p><p>成功达成 <code>O(n)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=num;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">let</span> position = i % <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">let</span> group =  <span class="built_in">Math</span>.floor(i/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">let</span> base = result[group] || <span class="number">0</span>;</span><br><span class="line">            result.push(base+position);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路三：</p><p>平凡的 <code>O(n^2)</code> </p><p>每次一遍循环 数1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">const</span> countOne = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>) count++;</span><br><span class="line">            i=<span class="built_in">Math</span>.floor(i/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;=num;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            result.push(countOne(j));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a non negative integer number &lt;strong&gt;num&lt;/strong&gt;. For every numbers &lt;strong&gt;i&lt;/strong&gt; in the range &lt;strong&gt;0 ≤ i ≤ 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>R语言中小数精度的问题</title>
    <link href="http://yoursite.com/2020/03/25/R%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%B0%8F%E6%95%B0%E7%B2%BE%E5%BA%A6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/03/25/R%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%B0%8F%E6%95%B0%E7%B2%BE%E5%BA%A6%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-25T08:39:36.000Z</published>
    <updated>2020-03-25T09:19:44.884Z</updated>
    
    <content type="html"><![CDATA[<p>在R语言课上有这样一个题目：</p><blockquote><p>一个一块钱硬币，换成一分、两分、五分，一共多少种方法？</p></blockquote><p>我发现我的答案和正确答案不一样</p><p>我的程序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">solution &lt;- <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span>:<span class="number">100</span>)</span><br><span class="line">   <span class="keyword">for</span>(j <span class="keyword">in</span> <span class="number">0</span>:<span class="number">50</span>)</span><br><span class="line">      <span class="keyword">for</span>(k <span class="keyword">in</span> <span class="number">0</span>:<span class="number">20</span>)</span><br><span class="line">         <span class="keyword">if</span>((i*<span class="number">0.01</span>+j*<span class="number">0.02</span>+k*<span class="number">0.05</span>)==<span class="number">1</span>) &#123;solution=solution+<span class="number">1</span>&#125;</span><br><span class="line">        print(solution)</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] <span class="number">527</span></span><br></pre></td></tr></table></figure><p>输出正确答案的程序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">solution &lt;- <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span>:<span class="number">100</span>)</span><br><span class="line">   <span class="keyword">for</span>(j <span class="keyword">in</span> <span class="number">0</span>:<span class="number">50</span>)</span><br><span class="line">      <span class="keyword">for</span>(k <span class="keyword">in</span> <span class="number">0</span>:<span class="number">20</span>)</span><br><span class="line">         <span class="keyword">if</span>((i*<span class="number">1</span>+j*<span class="number">2</span>+k*<span class="number">5</span>)==<span class="number">100</span>) &#123;solution=solution+<span class="number">1</span>&#125;</span><br><span class="line">        print(solution)</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] <span class="number">541</span></span><br></pre></td></tr></table></figure><p>那么为啥小数就少了14个？我立刻怀疑是小数精度的问题，于是写了个测试程序输出相差的14个方案：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span>:<span class="number">100</span>)</span><br><span class="line">   <span class="keyword">for</span>(j <span class="keyword">in</span> <span class="number">0</span>:<span class="number">50</span>)</span><br><span class="line">      <span class="keyword">for</span>(k <span class="keyword">in</span> <span class="number">0</span>:<span class="number">20</span>)</span><br><span class="line">         &#123;</span><br><span class="line">         sol1&lt;-i*<span class="number">0.01</span>+j*<span class="number">0.02</span>+k*<span class="number">0.05</span></span><br><span class="line">         sol2&lt;-i*<span class="number">1</span>+<span class="number">2</span>*j+<span class="number">5</span>*k</span><br><span class="line">         <span class="keyword">if</span>((sol1!=<span class="number">1</span>)&amp;&amp;(sol2==<span class="number">100</span>) )</span><br><span class="line">         &#123;print(c(i,j,k,sol1,sol2))&#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]   <span class="number">6</span>  <span class="number">42</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">18</span>  <span class="number">36</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">20</span>  <span class="number">35</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">30</span>  <span class="number">30</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">32</span>  <span class="number">29</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">34</span>  <span class="number">28</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">42</span>  <span class="number">24</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">48</span>  <span class="number">21</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">56</span>  <span class="number">17</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">58</span>  <span class="number">16</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">60</span>  <span class="number">15</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">70</span>  <span class="number">10</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">72</span>   <span class="number">9</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">84</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p>拿第一行的方案举例子</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">6</span>*<span class="number">0.01</span>+<span class="number">42</span>*<span class="number">0.02</span>+<span class="number">2</span>*<span class="number">0.05</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br></pre></td></tr></table></figure><p>好吧……我自己写一遍R又认为总数是1……就……更迷了……</p><p>真的是1！不信拆开来加一遍</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">6</span>*<span class="number">0.01</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.06</span></span><br><span class="line">&gt; <span class="number">42</span>*<span class="number">0.02</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.84</span></span><br><span class="line">&gt; <span class="number">2</span>*<span class="number">0.05</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.1</span></span><br><span class="line">&gt; <span class="number">0.06</span>+<span class="number">0.84</span>+<span class="number">0.1</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br></pre></td></tr></table></figure><p>但是我的判定条件是 <code>(i*0.01+j*0.02+k*0.05)==1</code></p><p>测试一下</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="number">6</span>*<span class="number">0.01</span>+<span class="number">42</span>*<span class="number">0.02</span>+<span class="number">2</span>*<span class="number">0.05</span>)==<span class="number">1</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure><p>行吧是 <code>FALSE</code> 🙄️</p><p>减一减 ⬇️</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span>-(<span class="number">6</span>*<span class="number">0.01</span>+<span class="number">42</span>*<span class="number">0.02</span>+<span class="number">2</span>*<span class="number">0.05</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1.110223e-16</span></span><br></pre></td></tr></table></figure><p>迫真不等于……</p><p>所以说，是哪一步出错了呢 🙄️</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span>-<span class="number">0.06</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.94</span></span><br><span class="line">&gt; <span class="number">1</span>-<span class="number">0.06</span>-<span class="number">0.84</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.1</span></span><br><span class="line">&gt; <span class="number">1</span>-<span class="number">0.06</span>-<span class="number">0.84</span>-<span class="number">0.1</span></span><br><span class="line">[<span class="number">1</span>] -<span class="number">2.775558e-17</span></span><br><span class="line">&gt; <span class="number">1</span>-<span class="number">0.06</span>-<span class="number">0.94</span>-<span class="number">0.10</span></span><br><span class="line">[<span class="number">1</span>] -<span class="number">0.1</span></span><br></pre></td></tr></table></figure><p>我又想起了 <del>JS的惊(传)天(统)巨(艺)坑(能) 浮点数陷阱</del> <a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="noopener">JavaScript 浮点数陷阱及解法</a> 这个issue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span>+<span class="number">0.2</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>用 JS 测试上述计算表达式 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="number">-0.06</span><span class="number">-0.84</span><span class="number">-0.1</span></span><br><span class="line"><span class="number">-2.7755575615628914e-17</span></span><br></pre></td></tr></table></figure><p><del>不错 和 R 是一家人</del></p><p>合理怀疑 和 JS 一样用了 <a href="http://grouper.ieee.org/groups/754/" target="_blank" rel="noopener">IEEE 754</a> 这个坑货</p><hr><p>感想：</p><p>用 R 进行小数计算一定要注意，能转成整数形式一定要转为整数形式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在R语言课上有这样一个题目：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个一块钱硬币，换成一分、两分、五分，一共多少种方法？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我发现我的答案和正确答案不一样&lt;/p&gt;
&lt;p&gt;我的程序：&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 705. Design HashSet</title>
    <link href="http://yoursite.com/2020/03/25/LeetCode-705-Design-HashSet/"/>
    <id>http://yoursite.com/2020/03/25/LeetCode-705-Design-HashSet/</id>
    <published>2020-03-25T04:08:30.000Z</published>
    <updated>2020-03-25T04:13:05.123Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Design a HashSet without using any built-in hash table libraries.</p><p>To be specific, your design should include these functions:</p><ul><li><code>add(value)</code>: Insert a value into the HashSet. </li><li><code>contains(value)</code> : Return whether the value exists in the HashSet or not.</li><li><code>remove(value)</code>: Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.</li></ul><p> <strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MyHashSet hashSet &#x3D; new MyHashSet();</span><br><span class="line">hashSet.add(1);         </span><br><span class="line">hashSet.add(2);         </span><br><span class="line">hashSet.contains(1);    &#x2F;&#x2F; returns true</span><br><span class="line">hashSet.contains(3);    &#x2F;&#x2F; returns false (not found)</span><br><span class="line">hashSet.add(2);          </span><br><span class="line">hashSet.contains(2);    &#x2F;&#x2F; returns true</span><br><span class="line">hashSet.remove(2);          </span><br><span class="line">hashSet.contains(2);    &#x2F;&#x2F; returns false (already removed)</span><br></pre></td></tr></table></figure><p> <strong>Note:</strong></p><ul><li>All values will be in the range of <code>[0, 1000000]</code>.</li><li>The number of operations will be in the range of <code>[1, 10000]</code>.</li><li>Please do not use the built-in HashSet library.</li></ul></blockquote><p>思路：</p><p>这题就是考 <code>hashmap</code> 原理</p><p>JDK 里面的 <code>hashmap</code> 就是 数组+链表+红黑树</p><p>首先是键值对 显然 是 <code>key % cap</code></p><p>然后是桶的问题 具体序号 JS有 <code>indexOf</code> 取得特定元素下标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MyHashSet = <span class="function"><span class="keyword">function</span>(<span class="params">cap = <span class="number">1000</span>, set = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cap = cap;</span><br><span class="line">  <span class="keyword">this</span>.set = <span class="keyword">set</span>;</span><br><span class="line">&#125;;</span><br><span class="line">/** </span><br><span class="line"> * @param &#123;number&#125; key</span><br><span class="line"> * @<span class="keyword">return</span> &#123;<span class="keyword">void</span>&#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">MyHashSet.prototype.getPos = function(key, index) &#123;</span></span><br><span class="line"><span class="regexp">   bucket = this.set[index];</span></span><br><span class="line"><span class="regexp">    if(bucket===undefined) &#123;</span></span><br><span class="line"><span class="regexp">        return -1;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return this.set[index].indexOf(key);</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">MyHashSet.prototype.getIndex = function(key) &#123;</span></span><br><span class="line"><span class="regexp">    return key % this.cap;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">MyHashSet.prototype.add = function(key) &#123;</span></span><br><span class="line"><span class="regexp">  index = this.getIndex(key);</span></span><br><span class="line"><span class="regexp">  pos = this.getPos(key, index);</span></span><br><span class="line"><span class="regexp">  if (pos &lt; 0) &#123;</span></span><br><span class="line"><span class="regexp">    if (this.set[index] === undefined) &#123;</span></span><br><span class="line"><span class="regexp">      this.set[index] = [];</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    this.set[index].push(key);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>** </span><br><span class="line"> * @param &#123;number&#125; key</span><br><span class="line"> * @<span class="keyword">return</span> &#123;<span class="keyword">void</span>&#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">MyHashSet.prototype.remove = function(key) &#123;</span></span><br><span class="line"><span class="regexp">  index = this.getIndex(key);</span></span><br><span class="line"><span class="regexp">  pos = this.getPos(key, index);</span></span><br><span class="line"><span class="regexp">  if (pos &gt; -1) &#123;</span></span><br><span class="line"><span class="regexp">    this.set[index].splice(pos, 1);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * Returns <span class="literal">true</span> <span class="keyword">if</span> <span class="keyword">this</span> <span class="keyword">set</span> contains the specified element </span><br><span class="line"> * @param &#123;number&#125; key</span><br><span class="line"> * @<span class="keyword">return</span> &#123;boolean&#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">MyHashSet.prototype.contains = function(key) &#123;</span></span><br><span class="line"><span class="regexp">  index = this.getIndex(key);</span></span><br><span class="line"><span class="regexp">  return (this.getPos(key, index) &gt; -1 );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>** </span><br><span class="line"> * Your MyHashSet object will be instantiated and called <span class="keyword">as</span> such:</span><br><span class="line"> * <span class="keyword">var</span> obj = <span class="keyword">new</span> MyHashSet()</span><br><span class="line"> * obj.add(key)</span><br><span class="line"> * obj.remove(key)</span><br><span class="line"> * <span class="keyword">var</span> param_3 = obj.contains(key)</span><br><span class="line"> *<span class="regexp">/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Design a HashSet without using any built-in hash table libraries.&lt;/p&gt;
&lt;p&gt;To be specific, your design should include these fu
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 101. Symmetric Tree</title>
    <link href="http://yoursite.com/2020/03/23/LeetCode-101-Symmetric-Tree/"/>
    <id>http://yoursite.com/2020/03/23/LeetCode-101-Symmetric-Tree/</id>
    <published>2020-03-23T09:16:53.000Z</published>
    <updated>2020-03-25T03:26:39.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p><p>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   2</span><br><span class="line"> &#x2F; \ &#x2F; \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure><p>But the following <code>[1,2,2,null,3,null,3]</code> is not:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> &#x2F; \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure></blockquote><p>思路一：</p><p>可以把一棵树看成两棵树，一棵从左开始，一棵从右开始 (DFS)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> CheckSymmetric(root.left,root.right);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CheckSymmetric = <span class="function"><span class="keyword">function</span>(<span class="params">left,right</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span> &amp;&amp; right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span> || right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (left.val===right.val) &amp;&amp; CheckSymmetric(left.left,right.right) &amp;&amp; CheckSymmetric(left.right,right.left);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>思路二：</p><p>非递归</p><p>可以用栈储存节点的值</p><p>先把最左边的节点存入 <code>stack1</code></p><p>最右边的节点存入 <code>stack2</code></p><p>然后 出栈 比较 回到上一层 交换方向 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root===<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> stack1 =[], stack2 = [];</span><br><span class="line">    <span class="keyword">let</span> curr1 = root, curr2 = root;</span><br><span class="line">    <span class="keyword">while</span> ((curr1 &amp;&amp; curr2) || (stack1.length &amp;&amp; stack2.length)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (curr1) &#123;</span><br><span class="line">            stack1.push(curr1);</span><br><span class="line">            curr1 = curr1.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (curr2) &#123;</span><br><span class="line">            stack2.push(curr2);</span><br><span class="line">            curr2 = curr2.right;</span><br><span class="line">        &#125;</span><br><span class="line">        curr1 = stack1.pop(), curr2 = stack2.pop();</span><br><span class="line">        <span class="keyword">if</span> ((curr1.val !== curr2.val) || (stack1.length !== stack2.length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curr1 = curr1.right, curr2 = curr2.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).&lt;/p&gt;
&lt;p&gt;For example, this bina
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 20. Valid Parentheses</title>
    <link href="http://yoursite.com/2020/03/23/LeetCode-20-Valid-Parentheses/"/>
    <id>http://yoursite.com/2020/03/23/LeetCode-20-Valid-Parentheses/</id>
    <published>2020-03-23T03:03:31.000Z</published>
    <updated>2020-03-25T03:26:39.785Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></blockquote><p>思路：经典的栈操作，显然左符号先入栈，如果有配对的就入栈，没有的就是右符号，看栈顶的是否和和它配对，不配对显然整个字符串都对</p><p>解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(s.length%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> dict = &#123;</span><br><span class="line">        <span class="string">'&#123;'</span>:<span class="string">'&#125;'</span>,</span><br><span class="line">        <span class="string">'['</span>:<span class="string">']'</span>,</span><br><span class="line">        <span class="string">'('</span>:<span class="string">')'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="comment">// 利用 hashmap O(1)查找 节约开支</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dict[s[i]])</span><br><span class="line">                &#123;</span><br><span class="line">                    stack.push(s[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dict[stack.pop()]!==s[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;, 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>2020-微信移动客户端-暑期实习-挂经</title>
    <link href="http://yoursite.com/2020/03/22/2020-%E5%BE%AE%E4%BF%A1%E7%A7%BB%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0-%E6%8C%82%E7%BB%8F/"/>
    <id>http://yoursite.com/2020/03/22/2020-%E5%BE%AE%E4%BF%A1%E7%A7%BB%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0-%E6%8C%82%E7%BB%8F/</id>
    <published>2020-03-22T08:53:34.000Z</published>
    <updated>2020-03-25T03:31:31.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>TL:DR：</p><p>面试官人很好，没有为难</p><p>多刷 leetcode</p><p>团体项目和同学合作更加分</p></blockquote><p>上来大概还有两分钟开始</p><p>面试官先自我介绍 他是iOS开发</p><p>简单做了一下自我介绍</p><p>（菜鸡预警⚠️：一年半代码经历 非科班出身 没打过比赛 leetcode只刷过十题easy）</p><hr><p>60 min 手撕三道题</p><p>语言自己任意选 我选的C++ </p><p>第一题 </p><p>O(1) 不存在 插入 / 删除 / 随机返回</p><p>O(1) 明显用 hash_map 我太久没用了 也没有学过 还是自己看资料稍微学了一下 于是卒 随机返回我太紧张把题目看成随机等概率返回一整个数列 以为手撕 Knuth Shuffle 写出来之后一位自己终于有点进展了 结果浪费了十几分钟……  </p><p>第二题 </p><p>后来才知道是 leetcode 列表 两个数相加</p><p>给的例子是有进位的 然后我愣是没看出来意思是 一个列表每个节点连起来是一个数字，最后输出是两个列表表示对数字加起来 然后疑惑这个例子怎么是这个输出……然后就当作普通的对位相加写了…… 于是 卒</p><p>第三题</p><p>O(log(m+n)) 有序数组找中位数 依旧 后来才知道也是 leetcode</p><p>虽然看到log知道是二分但是写着写着卡壳了 于是 卒</p><p>笔试 全部 卒 </p><hr><p>（语音）面试</p><p>面试官小哥人真的特别好 丝毫没有嘲我的意思 很耐心 引导我去重新想一下三题的思路</p><p>然后（尴尬地）开始聊天</p><p>被捞是因为 我GitHub上的一个Vue系统前端他试用了 觉得还可以</p><p>问觉得 Vue 简单吗 </p><p>我（谨慎地）回答上手容易 因为当时开发的时间紧张被 React 学习成本劝退</p><p>问了我简历上的 C++ Java 水平 SQL Git 命令</p><p>还有什么技术栈  我回答 试着上手过 Flutter （iOS）</p><p>问了 Java哪里显示OOP </p><p>问了有没有手撕过 html 和 原生js</p><p>问了python爬虫</p><p>问了代码复用的哲学问题</p><p>具体问了那个被捞的系统开发过程</p><p>问了 iGEM wiki 的事情</p><p>问了英语水平</p><p>其他问题不太记得了</p><p>最后建议：</p><p>可以和同学一起开发项目 尝试着不分前端后端 一起写 一个人写的话 代码具体有什么改进的地方也不知道 可以复用的地方也不知道</p><p>多刷刷算法题（我真的太弱了QAQ 小哥已经很委婉了）</p><hr><p>感想：我太菜了，以后至少每天两题leetcode否则失学事小事业事大……暂时不准备肝项目了，不如老老实实先刷题打好基础…… </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;TL:DR：&lt;/p&gt;
&lt;p&gt;面试官人很好，没有为难&lt;/p&gt;
&lt;p&gt;多刷 leetcode&lt;/p&gt;
&lt;p&gt;团体项目和同学合作更加分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上来大概还有两分钟开始&lt;/p&gt;
&lt;p&gt;面试官先自我介绍 他是iOS开发&lt;/p
      
    
    </summary>
    
    
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
  </entry>
  
</feed>
