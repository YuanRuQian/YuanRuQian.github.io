<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lydia Yuan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-04T15:40:50.197Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lydia Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 213. House Robber II</title>
    <link href="http://yoursite.com/2020/08/04/LeetCode-213-House-Robber-II/"/>
    <id>http://yoursite.com/2020/08/04/LeetCode-213-House-Robber-II/</id>
    <published>2020-08-04T15:39:24.000Z</published>
    <updated>2020-08-04T15:40:50.197Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,3,2]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: You cannot rob house 1 (money &#x3D; 2) and then rob house 3 (money &#x3D; 2),</span><br><span class="line">             because they are adjacent houses.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 1) and then rob house 3 (money &#x3D; 3).</span><br><span class="line">             Total amount you can rob &#x3D; 1 + 3 &#x3D; 4.</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> rob = <span class="function">(<span class="params">nums</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">1</span>)  <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(findHouses(nums.slice(<span class="number">1</span>),<span class="number">0</span>,map1),findHouses(nums.slice(<span class="number">0</span>,<span class="number">-1</span>),<span class="number">0</span>,map2));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findHouses = <span class="function">(<span class="params">nums, i, mem</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= nums.length)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!mem.has(i)) &#123;</span><br><span class="line">    mem.set(i,<span class="built_in">Math</span>.max(nums[i]+findHouses(nums,i+<span class="number">2</span>,mem), findHouses(nums,i+<span class="number">1</span>,mem)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mem.get(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All h
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>KS22 求连续子数组的最大和</title>
    <link href="http://yoursite.com/2020/08/03/KS22-%E6%B1%82%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
    <id>http://yoursite.com/2020/08/03/KS22-%E6%B1%82%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</id>
    <published>2020-08-03T15:25:17.000Z</published>
    <updated>2020-08-03T15:26:35.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="题目描述">题目描述</h2><p>一个非空整数数组，选择其中的两个位置，使得两个位置之间的数和最大。</p><p>如果最大的和为正数，则输出这个数；如果最大的和为负数或0，则输出0</p><h2 id="输入描述">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,-5,7,-2,8</span><br></pre></td></tr></table></figure><h2 id="输出描述">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入">输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-6,-9,-10</span><br></pre></td></tr></table></figure><h2 id="输出">输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好明显的贪心 😂</span></span><br><span class="line"><span class="keyword">let</span> arr = readline().split(<span class="string">','</span>).map(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">parseInt</span>(e));</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    sum += num;</span><br><span class="line">    max = <span class="built_in">Math</span>.max(max,sum);</span><br><span class="line">    sum = <span class="built_in">Math</span>.max(<span class="number">0</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;一个非空整数数组，选择其中的两个位置，使得两个位置之间的数和最大。&lt;/p&gt;
&lt;p&gt;如果最大的和为正数，则输出这个数；如果最大的和为负数或0，则输出0&lt;/p&gt;
&lt;h2 id=&quot;输入描述&quot;&gt;输入描述:&lt;/
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 99. Recover Binary Search Tree</title>
    <link href="http://yoursite.com/2020/08/02/LeetCode-99-Recover-Binary-Search-Tree-1/"/>
    <id>http://yoursite.com/2020/08/02/LeetCode-99-Recover-Binary-Search-Tree-1/</id>
    <published>2020-08-02T07:39:04.000Z</published>
    <updated>2020-08-02T07:48:20.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Two elements of a binary search tree (BST) are swapped by mistake.</p><p>Recover the tree without changing its structure.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,null,null,2]</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">  &#x2F;</span><br><span class="line"> 3</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line"></span><br><span class="line">Output: [3,1,null,null,2]</span><br><span class="line"></span><br><span class="line">   3</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">  \</span><br><span class="line">   2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,1,4,null,null,2]</span><br><span class="line"></span><br><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  2</span><br><span class="line"></span><br><span class="line">Output: [2,1,4,null,null,3]</span><br><span class="line"></span><br><span class="line">  2</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  3</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><ul><li>A solution using O(<em>n</em>) space is pretty straight forward.</li><li>Could you devise a constant space solution?</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recoverTree = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> node1 = <span class="literal">null</span>, node2 = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="keyword">new</span> TreeNode(-<span class="literal">Infinity</span>);</span><br><span class="line">  <span class="keyword">let</span> traverse = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">    traverse(node.left);</span><br><span class="line">    <span class="keyword">if</span> (node.val &lt; prev.val) &#123;</span><br><span class="line">      node2 = node;</span><br><span class="line">      <span class="keyword">if</span> (!node1) node1 = prev;</span><br><span class="line">    &#125;</span><br><span class="line">    prev = node;</span><br><span class="line">    traverse(node.right);</span><br><span class="line">  &#125;</span><br><span class="line">  traverse(root);</span><br><span class="line">  [node1.val, node2.val] = [node2.val, node1.val];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Two elements of a binary search tree (BST) are swapped by mistake.&lt;/p&gt;
&lt;p&gt;Recover the tree without changing its structure.&lt;/
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 99. Recover Binary Search Tree</title>
    <link href="http://yoursite.com/2020/08/02/LeetCode-99-Recover-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2020/08/02/LeetCode-99-Recover-Binary-Search-Tree/</id>
    <published>2020-08-02T06:51:41.000Z</published>
    <updated>2020-08-02T06:51:41.348Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    <summary type="html">
    
      
      
        

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode 729. My Calendar I</title>
    <link href="http://yoursite.com/2020/08/02/LeetCode-729-My-Calendar-I/"/>
    <id>http://yoursite.com/2020/08/02/LeetCode-729-My-Calendar-I/</id>
    <published>2020-08-02T04:41:10.000Z</published>
    <updated>2020-08-02T14:29:54.941Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Implement a <code>MyCalendar</code> class to store your events. A new event can be added if adding the event will not cause a double booking.</p><p>Your class will have the method, <code>book(int start, int end)</code>. Formally, this represents a booking on the half open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p><p>A <em>double booking</em> happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)</p><p>For each call to the method <code>MyCalendar.book</code>, return <code>true</code> if the event can be added to the calendar successfully without causing a double booking. Otherwise, return <code>false</code> and do not add the event to the calendar.</p><p>Your class will be called like this: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyCalendar();</span><br><span class="line">MyCalendar.book(10, 20); &#x2F;&#x2F; returns true</span><br><span class="line">MyCalendar.book(15, 25); &#x2F;&#x2F; returns false</span><br><span class="line">MyCalendar.book(20, 30); &#x2F;&#x2F; returns true</span><br><span class="line">Explanation: </span><br><span class="line">The first event can be booked.  The second can&#39;t because time 15 is already booked by another event.</span><br><span class="line">The third event can be booked, as the first event takes every time less than 20, but not including 20.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>The number of calls to <code>MyCalendar.book</code> per test case will be at most <code>1000</code>.</li><li>In calls to <code>MyCalendar.book(start, end)</code>, <code>start</code> and <code>end</code> are integers in the range <code>[0, 10^9]</code>.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyCalendar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">start,end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.start = start;</span><br><span class="line">    <span class="keyword">this</span>.end = end;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>start </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">end</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCalendar.prototype.book = <span class="function"><span class="keyword">function</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.root) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.root = <span class="keyword">new</span> Node(start, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> record = <span class="function">(<span class="params">start, end, root</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(root.end&lt;=start)&#123;</span><br><span class="line">                <span class="keyword">if</span>(root.right) <span class="keyword">return</span> record(start, end, root.right);</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> root.right = <span class="keyword">new</span> Node(start, end);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.start&gt;=end)&#123;</span><br><span class="line">                <span class="keyword">if</span>(root.left) <span class="keyword">return</span> record(start, end, root.left);</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> root.left = <span class="keyword">new</span> Node(start, end);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> record(start, end, <span class="keyword">this</span>.root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your MyCalendar object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyCalendar()</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.book(start,end)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Implement a &lt;code&gt;MyCalendar&lt;/code&gt; class to store your events. A new event can be added if adding the event will not cause 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 732. My Calendar III</title>
    <link href="http://yoursite.com/2020/08/02/LeetCode-732-My-Calendar-III/"/>
    <id>http://yoursite.com/2020/08/02/LeetCode-732-My-Calendar-III/</id>
    <published>2020-08-02T01:01:42.000Z</published>
    <updated>2020-08-02T04:41:37.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Implement a <code>MyCalendarThree</code> class to store your events. A new event can <strong>always</strong> be added.</p><p>Your class will have one method, <code>book(int start, int end)</code>. Formally, this represents a booking on the half open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p><p>A <em>K-booking</em> happens when <strong>K</strong> events have some non-empty intersection (ie., there is some time that is common to all K events.)</p><p>For each call to the method <code>MyCalendar.book</code>, return an integer <code>K</code> representing the largest integer such that there exists a <code>K</code>-booking in the calendar.</p><p>Your class will be called like this: <code>MyCalendarThree cal = new MyCalendarThree();</code> <code>MyCalendarThree.book(start, end)</code></p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MyCalendarThree();</span><br><span class="line">MyCalendarThree.book(10, 20); &#x2F;&#x2F; returns 1</span><br><span class="line">MyCalendarThree.book(50, 60); &#x2F;&#x2F; returns 1</span><br><span class="line">MyCalendarThree.book(10, 40); &#x2F;&#x2F; returns 2</span><br><span class="line">MyCalendarThree.book(5, 15); &#x2F;&#x2F; returns 3</span><br><span class="line">MyCalendarThree.book(5, 10); &#x2F;&#x2F; returns 3</span><br><span class="line">MyCalendarThree.book(25, 55); &#x2F;&#x2F; returns 3</span><br><span class="line">Explanation: </span><br><span class="line">The first two events can be booked and are disjoint, so the maximum K-booking is a 1-booking.</span><br><span class="line">The third event [10, 40) intersects the first event, and the maximum K-booking is a 2-booking.</span><br><span class="line">The remaining events cause the maximum K-booking to be only a 3-booking.</span><br><span class="line">Note that the last event locally causes a 2-booking, but the answer is still 3 because</span><br><span class="line">eg. [10, 20), [10, 40), and [5, 15) are still triple booked.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>The number of calls to <code>MyCalendarThree.book</code> per test case will be at most <code>400</code>.</li><li>In calls to <code>MyCalendarThree.book(start, end)</code>, <code>start</code> and <code>end</code> are integers in the range <code>[0, 10^9]</code>.</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCalendarThree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyCalendarThree() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; count = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">book</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> start = count.emplace(s, (--count.upper_bound(s))-&gt;second);</span><br><span class="line">        <span class="keyword">auto</span> <span class="built_in">end</span> = count.emplace(e, (--count.upper_bound(e))-&gt;second);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = start.first; i != <span class="built_in">end</span>.first; ++i)</span><br><span class="line">            res = <span class="built_in">max</span>(res, ++(i-&gt;second));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCalendarThree object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCalendarThree* obj = new MyCalendarThree();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;book(start,end);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Implement a &lt;code&gt;MyCalendarThree&lt;/code&gt; class to store your events. A new event can &lt;strong&gt;always&lt;/strong&gt; be added.&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 208. Implement Trie (Prefix Tree)</title>
    <link href="http://yoursite.com/2020/08/01/LeetCode-720-Longest-Word-in-Dictionary/"/>
    <id>http://yoursite.com/2020/08/01/LeetCode-720-Longest-Word-in-Dictionary/</id>
    <published>2020-08-01T01:05:40.000Z</published>
    <updated>2020-08-01T01:58:15.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Trie trie &#x3D; new Trie();</span><br><span class="line"></span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   &#x2F;&#x2F; returns true</span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; returns false</span><br><span class="line">trie.startsWith(&quot;app&quot;); &#x2F;&#x2F; returns true</span><br><span class="line">trie.insert(&quot;app&quot;);   </span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; returns true</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>You may assume that all inputs are consist of lowercase letters <code>a-z</code>.</li><li>All inputs are guaranteed to be non-empty strings.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">words</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestWord = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    words.sort();</span><br><span class="line">  <span class="comment">// [ 'w', 'wo', 'wor', 'worl', 'world' ]</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">set</span> = new Set(words);</span><br><span class="line">    let res = '';</span><br><span class="line">    for(let w of words) &#123;</span><br><span class="line">        <span class="keyword">let</span> valid = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">let</span> key = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;w.length;i++) &#123;</span><br><span class="line">            key += w[i];</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">set</span>.has(key)) &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (valid &amp;&amp; w.length &gt; res.length) &#123;</span><br><span class="line">            res = w</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Implement a trie with &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;, and &lt;code&gt;startsWith&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>ZJ27 字典序</title>
    <link href="http://yoursite.com/2020/07/31/ZJ27-%E5%AD%97%E5%85%B8%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/07/31/ZJ27-%E5%AD%97%E5%85%B8%E5%BA%8F/</id>
    <published>2020-07-31T14:01:31.000Z</published>
    <updated>2020-07-31T14:58:04.113Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="题目描述">题目描述</h2><p>给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。 对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2. 对于n=200, m=25, 按字典序排列依次为因此第25个数是120…</p><h2 id="输入描述">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入仅包含两个整数n和m。</span><br><span class="line"></span><br><span class="line">数据范围: </span><br><span class="line"></span><br><span class="line">对于20%的数据, 1 &lt;&#x3D; m &lt;&#x3D; n &lt;&#x3D; 5 ; </span><br><span class="line"></span><br><span class="line">对于80%的数据, 1 &lt;&#x3D; m &lt;&#x3D; n &lt;&#x3D; 10^7 ; </span><br><span class="line"></span><br><span class="line">对于100%的数据, 1 &lt;&#x3D; m &lt;&#x3D; n &lt;&#x3D; 10^18.</span><br></pre></td></tr></table></figure><h2 id="输出描述">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出仅包括一行, 即所求排列中的第m个数字.</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入">输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11 4</span><br></pre></td></tr></table></figure><h2 id="输出">输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = readline().split(<span class="string">' '</span>).map(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">parseInt</span>(e));</span><br><span class="line"><span class="keyword">let</span> m = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> n = arr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">m--;</span><br><span class="line"><span class="keyword">while</span>(m!==<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> start = i, end = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;=n) &#123;</span><br><span class="line">        num += <span class="built_in">Math</span>.min(n+<span class="number">1</span>,end)-start;</span><br><span class="line">        start *= <span class="number">10</span>;</span><br><span class="line">        end *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        i *= <span class="number">10</span>;</span><br><span class="line">        m--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        m -= num;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><p>基本上是字典树的思想</p><p>但是不用真的去实现字典树</p><p>发现一个不够继续乘10进位好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。 对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1277. Count Square Submatrices with All Ones</title>
    <link href="http://yoursite.com/2020/07/30/LeetCode-1277-Count-Square-Submatrices-with-All-Ones/"/>
    <id>http://yoursite.com/2020/07/30/LeetCode-1277-Count-Square-Submatrices-with-All-Ones/</id>
    <published>2020-07-30T15:42:46.000Z</published>
    <updated>2020-07-30T15:43:29.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <code>m * n</code> matrix of ones and zeros, return how many <strong>square</strong> submatrices have all ones.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix &#x3D;</span><br><span class="line">[</span><br><span class="line">  [0,1,1,1],</span><br><span class="line">  [1,1,1,1],</span><br><span class="line">  [0,1,1,1]</span><br><span class="line">]</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: </span><br><span class="line">There are 10 squares of side 1.</span><br><span class="line">There are 4 squares of side 2.</span><br><span class="line">There is  1 square of side 3.</span><br><span class="line">Total number of squares &#x3D; 10 + 4 + 1 &#x3D; 15.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix &#x3D; </span><br><span class="line">[</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [1,1,0],</span><br><span class="line">  [1,1,0]</span><br><span class="line">]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: </span><br><span class="line">There are 6 squares of side 1.  </span><br><span class="line">There is 1 square of side 2. </span><br><span class="line">Total number of squares &#x3D; 6 + 1 &#x3D; 7.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= arr.length &lt;= 300</code></li><li><code>1 &lt;= arr[0].length &lt;= 300</code></li><li><code>0 &lt;= arr[i][j] &lt;= 1</code></li></ul><p>Accepted</p><p>64,838</p><p>Submissions</p><p>88,888</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countSquares = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix.length===<span class="number">0</span> || !matrix) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> rows =  matrix.length;</span><br><span class="line">    <span class="keyword">let</span> cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> r=<span class="number">0</span>;r&lt;rows;r++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> c=<span class="number">0</span>;c&lt;cols;c++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[r][c]===<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(r===<span class="number">0</span> || c===<span class="number">0</span>) res++;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> val = <span class="built_in">Math</span>.min(matrix[r<span class="number">-1</span>][c<span class="number">-1</span>],matrix[r<span class="number">-1</span>][c],matrix[r][c<span class="number">-1</span>])+matrix[r][c];</span><br><span class="line">                    res+=val;</span><br><span class="line">                    matrix[r][c]=val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;code&gt;m * n&lt;/code&gt; matrix of ones and zeros, return how many &lt;strong&gt;square&lt;/strong&gt; submatrices have all ones.&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>KS19 最小代价爬楼梯</title>
    <link href="http://yoursite.com/2020/07/30/KS19-%E6%9C%80%E5%B0%8F%E4%BB%A3%E4%BB%B7%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    <id>http://yoursite.com/2020/07/30/KS19-%E6%9C%80%E5%B0%8F%E4%BB%A3%E4%BB%B7%E7%88%AC%E6%A5%BC%E6%A2%AF/</id>
    <published>2020-07-29T16:13:11.000Z</published>
    <updated>2020-07-29T16:13:50.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="题目描述">题目描述</h2><p>你需要爬上一个N层的楼梯，在爬楼梯过程中， 每阶楼梯需花费非负代价，第i阶楼梯花费代价表示为cost[i]， 一旦你付出了代价，你可以在该阶基础上往上爬一阶或两阶。</p><p>你可以从第 0 阶或者 第 1 阶开始，请找到到达顶层的最小的代价是多少。</p><p>N和cost[i]皆为整数，且N∈[2,1000]，cost[i]∈ [0, 999]。</p><h2 id="输入描述">输入描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入为一串半角逗号分割的整数，对应cost数组，例如</span><br><span class="line"></span><br><span class="line">10,15,20</span><br></pre></td></tr></table></figure><h2 id="输出描述">输出描述:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数，表示花费的最小代价</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入">输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,100,1,1,1,100,1,1,100,1</span><br></pre></td></tr></table></figure><h2 id="输出">输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=readline().split(<span class="string">','</span>).map(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">parseInt</span>(item));</span><br><span class="line"><span class="keyword">let</span> len=arr.length;</span><br><span class="line"><span class="keyword">let</span> dp=<span class="keyword">new</span> <span class="built_in">Array</span>(len+<span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">[dp[<span class="number">0</span>],dp[<span class="number">1</span>]] = [arr[<span class="number">0</span>],arr[<span class="number">1</span>]];</span><br><span class="line">arr[len]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">2</span>;i&lt;=len;i++)&#123;</span><br><span class="line">    dp[i]=<span class="built_in">Math</span>.min(arr[i]+dp[i<span class="number">-1</span>],arr[i]+dp[i<span class="number">-2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(dp[len]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;你需要爬上一个N层的楼梯，在爬楼梯过程中， 每阶楼梯需花费非负代价，第i阶楼梯花费代价表示为cost[i]， 一旦你付出了代价，你可以在该阶基础上往上爬一阶或两阶。&lt;/p&gt;
&lt;p&gt;你可以从第 0 阶或
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 807. Max Increase to Keep City Skyline</title>
    <link href="http://yoursite.com/2020/07/27/LeetCode-807-Max-Increase-to-Keep-City-Skyline/"/>
    <id>http://yoursite.com/2020/07/27/LeetCode-807-Max-Increase-to-Keep-City-Skyline/</id>
    <published>2020-07-27T14:50:13.000Z</published>
    <updated>2020-07-27T15:36:00.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>In a 2 dimensional array <code>grid</code>, each value <code>grid[i][j]</code> represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well.</p><p>At the end, the "skyline" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.</p><p>What is the maximum total sum that the height of the buildings can be increased?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: grid &#x3D; [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]</span><br><span class="line">Output: 35</span><br><span class="line">Explanation: </span><br><span class="line">The grid is:</span><br><span class="line">[ [3, 0, 8, 4], </span><br><span class="line">  [2, 4, 5, 7],</span><br><span class="line">  [9, 2, 6, 3],</span><br><span class="line">  [0, 3, 1, 0] ]</span><br><span class="line"></span><br><span class="line">The skyline viewed from top or bottom is: [9, 4, 8, 7]</span><br><span class="line">The skyline viewed from left or right is: [8, 7, 9, 3]</span><br><span class="line"></span><br><span class="line">The grid after increasing the height of buildings without affecting skylines is:</span><br><span class="line"></span><br><span class="line">gridNew &#x3D; [ [8, 4, 8, 7],</span><br><span class="line">            [7, 4, 7, 7],</span><br><span class="line">            [9, 4, 8, 7],</span><br><span class="line">            [3, 3, 3, 3] ]</span><br></pre></td></tr></table></figure><p><strong>Notes:</strong></p><ul><li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>.</li><li>All heights <code>grid[i][j]</code> are in the range <code>[0, 100]</code>.</li><li>All buildings in <code>grid[i][j]</code> occupy the entire grid cell: that is, they are a <code>1 x 1 x grid[i][j]</code> rectangular prism.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxIncreaseKeepingSkyline = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> topBottom = [];</span><br><span class="line">    <span class="keyword">let</span> leftRight = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;grid[<span class="number">0</span>].length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;grid.length;j++) &#123;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(grid[j][i],max);</span><br><span class="line">        &#125;</span><br><span class="line">        topBottom.push(max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;grid.length;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">            max = <span class="built_in">Math</span>.max(grid[i][j],max);</span><br><span class="line">        &#125;</span><br><span class="line">        leftRight.push(max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(topBottom);</span><br><span class="line">    <span class="built_in">console</span>.log(leftRight)</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;grid.length;i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">        res+= <span class="built_in">Math</span>.min(topBottom[j],leftRight[i])-grid[i][j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxIncreaseKeepingSkyline = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = grid.length;</span><br><span class="line">    <span class="keyword">let</span> cols = <span class="built_in">Array</span>(len).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> rows = <span class="built_in">Array</span>(len).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;len;j++) &#123;</span><br><span class="line">            rows[i]=<span class="built_in">Math</span>.max(rows[i],grid[i][j]);</span><br><span class="line">            cols[j]=<span class="built_in">Math</span>.max(cols[j],grid[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// optimized a bit</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;len;j++) &#123;</span><br><span class="line">            res+=<span class="built_in">Math</span>.min(rows[i],cols[j])-grid[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;In a 2 dimensional array &lt;code&gt;grid&lt;/code&gt;, each value &lt;code&gt;grid[i][j]&lt;/code&gt; represents the height of a building located t
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1314. Matrix Block Sum</title>
    <link href="http://yoursite.com/2020/07/26/LeetCode-1314-Matrix-Block-Sum/"/>
    <id>http://yoursite.com/2020/07/26/LeetCode-1314-Matrix-Block-Sum/</id>
    <published>2020-07-26T02:06:27.000Z</published>
    <updated>2020-07-26T02:13:46.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a <code>m * n</code> matrix <code>mat</code> and an integer <code>K</code>, return a matrix <code>answer</code> where each <code>answer[i][j]</code> is the sum of all elements <code>mat[r][c]</code> for <code>i - K &lt;= r &lt;= i + K, j - K &lt;= c &lt;= j + K</code>, and <code>(r, c)</code> is a valid position in the matrix.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: mat &#x3D; [[1,2,3],[4,5,6],[7,8,9]], K &#x3D; 1</span><br><span class="line">Output: [[12,21,16],[27,45,33],[24,39,28]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: mat &#x3D; [[1,2,3],[4,5,6],[7,8,9]], K &#x3D; 2</span><br><span class="line">Output: [[45,45,45],[45,45,45],[45,45,45]]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n, K &lt;= 100</code></li><li><code>1 &lt;= mat[i][j] &lt;= 100</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">mat</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">K</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> matrixBlockSum = <span class="function"><span class="keyword">function</span>(<span class="params">mat, K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="built_in">Array</span>(mat.length+<span class="number">1</span>).fill([]);</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="built_in">Array</span>(mat[<span class="number">0</span>].length+<span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;mat.length;i++) &#123;</span><br><span class="line">        dp[i+<span class="number">1</span>]=[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;mat[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">            dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=mat[i][j]+dp[i][j+<span class="number">1</span>]+dp[i+<span class="number">1</span>][j]-dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// dp fills with sum from [0][0] to [i][j]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;mat.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;mat[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">            <span class="keyword">let</span> r1=<span class="built_in">Math</span>.max(<span class="number">0</span>,i-K), r2=<span class="built_in">Math</span>.min(mat.length<span class="number">-1</span>,i+K);</span><br><span class="line">            <span class="comment">// r1: row min , r2: row max</span></span><br><span class="line">            <span class="keyword">let</span> c1=<span class="built_in">Math</span>.max(<span class="number">0</span>,j-K), c2=<span class="built_in">Math</span>.min(mat[<span class="number">0</span>].length<span class="number">-1</span>,j+K);</span><br><span class="line">            <span class="comment">// c1: col min , c2: col max</span></span><br><span class="line">            mat[i][j]=dp[r2+<span class="number">1</span>][c2+<span class="number">1</span>]-dp[r1][c2+<span class="number">1</span>]-dp[r2+<span class="number">1</span>][c1]+dp[r1][c1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mat;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a &lt;code&gt;m * n&lt;/code&gt; matrix &lt;code&gt;mat&lt;/code&gt; and an integer &lt;code&gt;K&lt;/code&gt;, return a matrix &lt;code&gt;answer&lt;/code&gt; where 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 861. Score After Flipping Matrix</title>
    <link href="http://yoursite.com/2020/07/25/LeetCode-861-Score-After-Flipping-Matrix/"/>
    <id>http://yoursite.com/2020/07/25/LeetCode-861-Score-After-Flipping-Matrix/</id>
    <published>2020-07-25T15:34:12.000Z</published>
    <updated>2020-07-25T15:34:55.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>We have a two dimensional matrix <code>A</code> where each value is <code>0</code> or <code>1</code>.</p><p>A move consists of choosing any row or column, and toggling each value in that row or column: changing all <code>0</code>s to <code>1</code>s, and all <code>1</code>s to <code>0</code>s.</p><p>After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.</p><p>Return the highest possible score.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [[0,0,1,1],[1,0,1,0],[1,1,0,0]]</span><br><span class="line">Output: 39</span><br><span class="line">Explanation:</span><br><span class="line">Toggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].</span><br><span class="line">0b1111 + 0b1001 + 0b1111 &#x3D; 15 + 9 + 15 &#x3D; 39</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol type="1"><li><code>1 &lt;= A.length &lt;= 20</code></li><li><code>1 &lt;= A[0].length &lt;= 20</code></li><li><code>A[i][j]</code> is <code>0</code> or <code>1</code>.</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> matrixScore = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> m = A.length, n = A[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="comment">// columns</span></span><br><span class="line">        <span class="keyword">let</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;m;j++) cur+=(A[j][i]===A[j][<span class="number">0</span>] ? <span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">        res += <span class="built_in">Math</span>.max(cur,m-cur)*(<span class="number">1</span> &lt;&lt; (n-i<span class="number">-1</span>));</span><br><span class="line">        <span class="comment">// choose the more 0s to flip in each column</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;We have a two dimensional matrix &lt;code&gt;A&lt;/code&gt; where each value is &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A move consists
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 921. Minimum Add to Make Parentheses Valid</title>
    <link href="http://yoursite.com/2020/07/25/LeetCode-921-Minimum-Add-to-Make-Parentheses-Valid/"/>
    <id>http://yoursite.com/2020/07/25/LeetCode-921-Minimum-Add-to-Make-Parentheses-Valid/</id>
    <published>2020-07-25T00:49:19.000Z</published>
    <updated>2020-07-25T02:31:24.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a string <code>S</code> of <code>'('</code> and <code>')'</code> parentheses, we add the minimum number of parentheses ( <code>'('</code> or <code>')'</code>, and in any positions ) so that the resulting parentheses string is valid.</p><p>Formally, a parentheses string is valid if and only if:</p><ul><li>It is the empty string, or</li><li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or</li><li>It can be written as <code>(A)</code>, where <code>A</code> is a valid string.</li></ul><p>Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;())&quot;</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(((&quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()))((&quot;</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>S.length &lt;= 1000</code></li><li><code>S</code> only consists of <code>'('</code> and <code>')'</code> characters.</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">S</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minAddToMakeValid = <span class="function"><span class="keyword">function</span>(<span class="params">S</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> s <span class="keyword">of</span> S) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s===<span class="string">'('</span>) right++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(right&gt;<span class="number">0</span>) right--;</span><br><span class="line">        <span class="comment">// if s===')' but the right has left elements</span></span><br><span class="line">        <span class="keyword">else</span> left++;</span><br><span class="line">        <span class="comment">// if s===')' but the right has none left</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left+right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">S</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use stack</span></span><br><span class="line"><span class="keyword">var</span> minAddToMakeValid = <span class="function"><span class="keyword">function</span>(<span class="params">S</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> s <span class="keyword">of</span> S) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s===<span class="string">'('</span>) stack.push(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (stack.length&gt;<span class="number">0</span>) stack.pop();</span><br><span class="line">        <span class="comment">// if s===')' and stack has '(' to pair with </span></span><br><span class="line">        <span class="keyword">else</span> count++;</span><br><span class="line">        <span class="comment">// if s===')' and stack doesn't has '(' to pair with </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count+stack.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a string &lt;code&gt;S&lt;/code&gt; of &lt;code&gt;&#39;(&#39;&lt;/code&gt; and &lt;code&gt;&#39;)&#39;&lt;/code&gt; parentheses, we add the minimum number of parentheses
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 513. Find Bottom Left Tree Value</title>
    <link href="http://yoursite.com/2020/07/24/LeetCode-513-Find-Bottom-Left-Tree-Value/"/>
    <id>http://yoursite.com/2020/07/24/LeetCode-513-Find-Bottom-Left-Tree-Value/</id>
    <published>2020-07-24T15:42:13.000Z</published>
    <updated>2020-07-24T15:42:52.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, find the leftmost value in the last row of the tree.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line"></span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line"></span><br><span class="line">        1</span><br><span class="line">       &#x2F; \</span><br><span class="line">      2   3</span><br><span class="line">     &#x2F;   &#x2F; \</span><br><span class="line">    4   5   6</span><br><span class="line">       &#x2F;</span><br><span class="line">      7</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> You may assume the tree (i.e., the given root node) is not <strong>NULL</strong>.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> findBottomLeftValue = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [root.val,<span class="number">1</span>];</span><br><span class="line">    dfs(root,<span class="number">1</span>,res);</span><br><span class="line">    <span class="keyword">return</span> res[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dfs = <span class="function"><span class="keyword">function</span>(<span class="params">root,height,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root.left &amp;&amp; !root.right &amp;&amp; height&gt;res[<span class="number">1</span>]) &#123;</span><br><span class="line">        [res[<span class="number">0</span>],res[<span class="number">1</span>]] = [root.val,height];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left) dfs(root.left,height+<span class="number">1</span>,res);</span><br><span class="line">    <span class="keyword">if</span>(root.right) dfs(root.right,height+<span class="number">1</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree, find the leftmost value in the last row of the tree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 113. Path Sum II</title>
    <link href="http://yoursite.com/2020/07/24/LeetCode-113-Path-Sum-II/"/>
    <id>http://yoursite.com/2020/07/24/LeetCode-113-Path-Sum-II/</id>
    <published>2020-07-24T14:24:44.000Z</published>
    <updated>2020-07-24T15:02:53.117Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.</p><p><strong>Note:</strong> A leaf is a node with no children.</p><p><strong>Example:</strong></p><p>Given the below binary tree and <code>sum = 22</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \    &#x2F; \</span><br><span class="line">7    2  5   1</span><br></pre></td></tr></table></figure><p>Return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">sum</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root,sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function"><span class="keyword">function</span>(<span class="params">node,target,path</span>) </span>&#123;</span><br><span class="line">    target = target-node.val;</span><br><span class="line">    <span class="keyword">if</span>(target===<span class="number">0</span> &amp;&amp; !node.left &amp;&amp; !node.right) &#123;</span><br><span class="line">        path.push(node.val);</span><br><span class="line">        res.push(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        path.push(node.val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!node.left&amp;&amp;!node.right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left) dfs(node.left,target,path.slice(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span>(node.right) dfs(node.right,target,path.slice(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root,sum,[]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 832. Flipping an Image</title>
    <link href="http://yoursite.com/2020/07/24/LeetCode-832-Flipping-an-Image/"/>
    <id>http://yoursite.com/2020/07/24/LeetCode-832-Flipping-an-Image/</id>
    <published>2020-07-24T14:22:25.000Z</published>
    <updated>2020-07-24T14:23:24.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary matrix <code>A</code>, we want to flip the image horizontally, then invert it, and return the resulting image.</p><p>To flip an image horizontally means that each row of the image is reversed. For example, flipping <code>[1, 1, 0]</code> horizontally results in <code>[0, 1, 1]</code>.</p><p>To invert an image means that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>. For example, inverting <code>[0, 1, 1]</code> results in <code>[1, 0, 0]</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,1,0],[1,0,1],[0,0,0]]</span><br><span class="line">Output: [[1,0,0],[0,1,0],[1,1,1]]</span><br><span class="line">Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].</span><br><span class="line">Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</span><br><span class="line">Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</span><br><span class="line">Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].</span><br><span class="line">Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</span><br></pre></td></tr></table></figure><p><strong>Notes:</strong></p><ul><li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li><li><code>0 &lt;= A[i][j] &lt;= 1</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flipAndInvertImage = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = A[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;A.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="built_in">Math</span>.floor((len+<span class="number">1</span>)/<span class="number">2</span>);j++) &#123;</span><br><span class="line">          <span class="comment">// +1 =&gt; consider even / odd number situation</span></span><br><span class="line">             [ A[i][j], A[i][len-j<span class="number">-1</span>] ] = [ <span class="built_in">Math</span>.abs(<span class="number">1</span>-A[i][len-j<span class="number">-1</span>]), <span class="built_in">Math</span>.abs(<span class="number">1</span>-A[i][j]) ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary matrix &lt;code&gt;A&lt;/code&gt;, we want to flip the image horizontally, then invert it, and return the resulting image
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 559. Maximum Depth of N-ary Tree</title>
    <link href="http://yoursite.com/2020/07/23/LeetCode-559-Maximum-Depth-of-N-ary-Tree/"/>
    <id>http://yoursite.com/2020/07/23/LeetCode-559-Maximum-Depth-of-N-ary-Tree/</id>
    <published>2020-07-23T15:39:37.000Z</published>
    <updated>2020-07-23T15:46:05.428Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a n-ary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" alt="img" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [1,null,3,2,4,null,5,6]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png" alt="img" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root &#x3D; [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li><li>The total number of nodes is between <code>[0, 10^4]</code>.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val,children) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val;</span></span><br><span class="line"><span class="comment"> *    this.children = children;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> child <span class="keyword">of</span> root.children) &#123;</span><br><span class="line">        depth = <span class="built_in">Math</span>.max(depth,maxDepth(child));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+depth;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val,children) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val;</span></span><br><span class="line"><span class="comment"> *    this.children = children;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="keyword">let</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(queue.length) &#123;</span><br><span class="line">        depth++;</span><br><span class="line">        <span class="keyword">let</span> len = queue.length</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = queue.shift();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> child <span class="keyword">of</span> curr.children) &#123;</span><br><span class="line">                queue.push(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a n-ary tree, find its maximum depth.&lt;/p&gt;
&lt;p&gt;The maximum depth is the number of nodes along the longest path from the 
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>64匹马，8个赛道，最少跑几次能排出前四名</title>
    <link href="http://yoursite.com/2020/07/23/64%E5%8C%B9%E9%A9%AC%EF%BC%8C8%E4%B8%AA%E8%B5%9B%E9%81%93%EF%BC%8C%E6%9C%80%E5%B0%91%E8%B7%91%E5%87%A0%E6%AC%A1%E8%83%BD%E6%8E%92%E5%87%BA%E5%89%8D%E5%9B%9B%E5%90%8D/"/>
    <id>http://yoursite.com/2020/07/23/64%E5%8C%B9%E9%A9%AC%EF%BC%8C8%E4%B8%AA%E8%B5%9B%E9%81%93%EF%BC%8C%E6%9C%80%E5%B0%91%E8%B7%91%E5%87%A0%E6%AC%A1%E8%83%BD%E6%8E%92%E5%87%BA%E5%89%8D%E5%9B%9B%E5%90%8D/</id>
    <published>2020-07-23T14:23:41.000Z</published>
    <updated>2020-07-23T14:51:04.548Z</updated>
    
    <content type="html"><![CDATA[<p><code>let res = 0</code></p><h3 id="第一步"><a class="markdownIt-Anchor" href="#第一步"></a> 第一步</h3><p>随机分8组</p><p>每组都跑一次</p><p><code>res += 8</code> =&gt; <code>res = 8</code></p><p>每组去掉最慢的4个 剩下 32匹</p><h3 id="第二步"><a class="markdownIt-Anchor" href="#第二步"></a> 第二步</h3><p>不能继续暴力了 因为第一次是随机的 现在已经筛过一次了</p><p>每组第一名拿出来跑一次</p><p><code>res = 9</code></p><p>去掉后4个 连带着去掉后4个所在组的所有马 剩下  32-4*4=16 匹</p><p>这时候最快的因为是所有组最快的选的最快 所以第一名就是它了 <strong>此时确定一个</strong></p><h3 id="第三步"><a class="markdownIt-Anchor" href="#第三步"></a> 第三步</h3><p>剩下的3匹最快的马</p><p>只可能是 15 匹的3匹</p><p>显然 可以继续缩小范围</p><p>第一名组 剩下3匹都可能（4匹都是第一名所在的组</p><p>第二名组 最快3匹（第一组第一名 + 第二组第一名第二名第三名</p><p>第三名组 最快2匹  （第一组第一名 + 第二组第一名 + 第三组第一第二名</p><p>第四名组 最快1匹 （四个组每组第一名</p><p>所以其实只有 3+3+2+1 = 9 匹需要考虑</p><p>此时随机抽8匹比赛</p><p>淘汰最后5匹</p><p><code>res=10</code></p><h4 id="第四步"><a class="markdownIt-Anchor" href="#第四步"></a> 第四步</h4><p>刚刚选出来的3匹和剩下的一匹比一下 选最快的三匹</p><p><code>res=11</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;let res = 0&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一步&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一步&quot;&gt;&lt;/a&gt; 第一步&lt;/h3&gt;
&lt;p&gt;随机分8组&lt;/p&gt;
&lt;p&gt;每组都跑一次&lt;/p&gt;
&lt;p&gt;&lt;code&gt;res 
      
    
    </summary>
    
    
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 112. Path Sum</title>
    <link href="http://yoursite.com/2020/07/23/LeetCode-112-Path-Sum/"/>
    <id>http://yoursite.com/2020/07/23/LeetCode-112-Path-Sum/</id>
    <published>2020-07-23T14:01:20.000Z</published>
    <updated>2020-07-23T14:15:53.210Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p><p><strong>Note:</strong> A leaf is a node with no children.</p><p><strong>Example:</strong></p><p>Given the below binary tree and <code>sum = 22</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \      \</span><br><span class="line">7    2      1</span><br></pre></td></tr></table></figure><p>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">sum</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> hasPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root &amp;&amp; sum===root.val &amp;&amp; !root.left &amp;&amp; !root.right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.left,sum-root.val) || hasPathSum(root.right,sum-root.val);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the pa
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
